@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.FundBalanceViewVM>

<div class="row">
    <div class="col-md-4">
        Total Receipt Amount
        <input type="text" value="@ViewBag.TotalAmount" name="TotalAmount" id="TotalAmount" class="form-control input-type-no" disabled />
    </div>
    <div class="col-md-4">
        Total Line Amount
        <input type="text" value="@ViewBag.TotalLineAmount" name="TotalLineAmount" id="TotalLineAmount" class="form-control input-type-no" disabled />
    </div>
    <div class="col-md-4">
        Difference
        <input type="text" value="@ViewBag.DiffAmount" name="DiffAmount" id="DiffAmount" class="form-control input-type-no" disabled />
    </div>
</div>
<hr />
<table class="table table-striped table-bordered table-hover table-condensed table-responsive" id="tblGlItems" width="100%">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GlAccount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GlAccountDesc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FundBalance)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FundingRefNo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ExpensedAmount)
            </th>
        </tr>
    </thead>
    @{
        int i = 0;
    }

</table>

<script>
    var paymentCategory;
    $(function () {
        paymentCategory = '@ViewBag.PaymentCategory';
        $(".input-type-no").autoNumeric("init");

        BindDataTable();
    });

    var BindDataTable = function (response) {
        var url = '@Url.Action("GetGlItemsV2Data", "FundTransfers")';
        var sbc = $("#SubBudgetClassCode").val();
        var totalAmount = $("#OperationalAmount").val();
        var applyDate = $("#ApplyDate").val();
        var isSpecialDummyPayment = $("#IsSpecialDummyPayment").prop("checked"); // Boolean true
        var paymentCategory = $("#PaymentCategory").val();
        $("#tblGlItems").DataTable({
            "bServerSide": true,
            "sAjaxSource": url,
            "fnServerData": function (sSource, aoData, fnCallback) {
                $.ajax({
                    type: "GET",
                    url: sSource,
                    data: aoData,
                    success: fnCallback
                });
            },
            "fnServerParams": function (aoData) {
                aoData.push({ sbc: sbc, totalAmount: totalAmount, applyDate: applyDate, dummyPaymentDetails: dummyPaymentDetails, paymentCategory: paymentCategory, isSpecialDummyPayment: isSpecialDummyPayment });
            },
            "aoColumns": [
                {
                    render: function (data, type, row, meta) {
                        return meta.row + meta.settings._iDisplayStart + 1;
                    }
                },
                { "mData": "UserName" },
                { "mData": "FullName" },
                { "mData": "PhoneNumber" },
                { "mData": "Email" },
                { "mData": "VoteCode" },
                {
                    "mData": "Id",
                    "bSortable": false,
                    "render": function (Id, type, full, meta) {
                        return '<a href="@Url.Action("UserDetails", "Manage")/' + Id + '"><i class="glyphicon glyphicon-eye-open"></i></a>'
                    }
                },
            ]
        });
    };

    function ExpensedAmountOnKeyUp(i) {
        var fundBalance = $("#FundBalance" + i).val();
        var expensedAmount = $("#ExpensedAmount" + i).val();
        fundBalance = fundBalance.replace(/,/g, "");
        expensedAmount = expensedAmount.replace(/,/g, "");

        if (isNaN(fundBalance) || fundBalance == "" || fundBalance == null) {
            fundBalance = "0";
        }
        if (isNaN(expensedAmount) || expensedAmount == "" || expensedAmount == null) {
            expensedAmount = "0";
        }
        fundBalance = parseFloat(fundBalance);
        expensedAmount = parseFloat(expensedAmount);
        if (fundBalance < expensedAmount) {
            $("#ExpensedAmount" + i).addClass("input-has-exceeded");
            return false;
        } else {
            $("#ExpensedAmount" + i).removeClass("input-has-exceeded");
        }

        var totalAmount = $("#TotalAmount").val();
        totalAmount = totalAmount.replace(/,/g, "");
        if (isNaN(totalAmount) || totalAmount == "" || totalAmount == null) {
            totalAmount = "0";
        }
        var totalLineAmount = CalculateTotalOnChange();
        if (isNaN(totalLineAmount) || totalLineAmount == "" || totalLineAmount == null) {
            totalLineAmount = "0";
        }
        $("#TotalLineAmount").val(numeral(totalLineAmount).format("0,0.00"));

        var diffAmount = totalAmount - totalLineAmount;
        if (isNaN(diffAmount) || diffAmount == "" || diffAmount == null) {
            diffAmount = "0";
        }
        $("#DiffAmount").val(numeral(diffAmount).format("0,0.00"));

        if ((paymentCategory == "Dummy Payment" && diffAmount != 0)
            || (paymentCategory == "Transfer to PMG" && diffAmount < 0)) {
            $("#DiffAmount").addClass("input-has-exceeded");
            $("#btnAddGlItem").prop("disabled", true); /*need to be true always*/
            $("#btnSave").attr("disabled", true);/*need to be true always*/
        } else {
            $("#DiffAmount").removeClass("input-has-exceeded");
            $("#btnAddGlItem").prop("disabled", false);
            $("#btnSave").attr("disabled", false);
        }
    };

    function CalculateTotalOnChange() {
        let totalExpensedAmount = 0;
        var data = $('#tblDummyPaymentDetails').dataTable().fnGetNodes();
        var i = 1;
        $(data).each(function () {
            expensedAmount = $(this).find('input[name="ExpensedAmount' + i + '"]').val();
            expensedAmount = expensedAmount.replace(/,/g, "");
            if (isNaN(expensedAmount) || expensedAmount == "" || expensedAmount == null) {
                expensedAmount = "0";
            }

            expensedAmount = parseFloat(expensedAmount);
            totalExpensedAmount = totalExpensedAmount + expensedAmount;

            i++;
        })

        return Math.round(totalExpensedAmount*100)/100;
    };

</script>
