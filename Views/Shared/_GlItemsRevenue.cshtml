@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.FundBalanceViewVM>

<div class="row">
    <div class="col-md-4">
        Total Receipt Amount
        <input type="text" value="@ViewBag.TotalAmount" name="TotalAmount" id="TotalAmount" class="form-control input-type-no" disabled />
    </div>
    <div class="col-md-4">
        Total Line Amount
        <input type="text" value="@ViewBag.TotalLineAmount" name="TotalLineAmount" id="TotalLineAmount" class="form-control input-type-no" disabled />
    </div>
    <div class="col-md-4">
        Difference
        <input type="text" value="@ViewBag.DiffAmount" name="DiffAmount" id="DiffAmount" class="form-control input-type-no" disabled />
    </div>
</div>
<hr />
<table class="table table-striped table-bordered table-hover table-condensed table-responsive" id="tblDummyPaymentDetails" width="100%">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GlAccount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GlAccountDesc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FundBalance)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FundingRefNo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ExpensedAmount)
            </th>
        </tr>
    </thead>
    @{
        int i = 0;
    }
    <tbody>
        @foreach (var item in Model)
        {
            i++;
            <tr>
                <td>
                    @i
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GlAccount).ToString().Replace("|", "-")
                    @Html.HiddenFor(modelItem => item.GlAccount, new { @id = "GlAccount" + i, @Name = "GlAccount" + i })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GlAccountDesc)
                    @Html.HiddenFor(modelItem => item.GlAccountDesc, new { @id = "GlAccountDesc" + i, @Name = "GlAccountDesc" + i })
                </td>
                <td style="text-align: right">
                    @Html.DisplayFor(modelItem => item.FundBalance, "_DecimalThousands")
                    @Html.HiddenFor(modelItem => item.FundBalance, new { @id = "FundBalance" + i, @Name = "FundBalance" + i })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FundingRefNo)
                    @Html.HiddenFor(modelItem => item.FundingRefNo, new { @id = "FundingRefNo" + i, @Name = "FundingRefNo" + i })
                </td>
                <td style="text-align: right">
                    @Html.EditorFor(modelItem => item.ExpensedAmount, new { htmlAttributes = new { @class = "form-control input-type-no", @id = "ExpensedAmount" + i, @Name = "ExpensedAmount" + i, @onkeyup = "ExpensedAmountOnKeyUp(" + i + ")", @autocomplete = "off" } })
                    @Html.HiddenFor(modelItem => item.GfsCode, new { @id = "GfsCode" + i, @Name = "GfsCode" + i })
                    @Html.HiddenFor(modelItem => item.GfsCodeCategory, new { @id = "GfsCodeCategory" + i, @Name = "GfsCodeCategory" + i })
                    @Html.HiddenFor(modelItem => item.VoteDesc, new { @id = "VoteDesc" + i, @Name = "VoteDesc" + i })
                    @Html.HiddenFor(modelItem => item.GeographicalLocationDesc, new { @id = "GeographicalLocationDesc" + i, @Name = "GeographicalLocationDesc" + i })
                    @Html.HiddenFor(modelItem => item.TrDesc, new { @id = "TrDesc" + i, @Name = "TrDesc" + i })
                    @Html.HiddenFor(modelItem => item.SubBudgetClassDesc, new { @id = "SubBudgetClassDesc" + i, @Name = "SubBudgetClassDesc" + i })
                    @Html.HiddenFor(modelItem => item.ProjectDesc, new { @id = "ProjectDesc" + i, @Name = "ProjectDesc" + i })
                    @Html.HiddenFor(modelItem => item.ServiceOutputDesc, new { @id = "ServiceOutputDesc" + i, @Name = "ServiceOutputDesc" + i })
                    @Html.HiddenFor(modelItem => item.ActivityDesc, new { @id = "ActivityDesc" + i, @Name = "ActivityDesc" + i })
                    @Html.HiddenFor(modelItem => item.FundTypeDesc, new { @id = "FundTypeDesc" + i, @Name = "FundTypeDesc" + i })
                    @Html.HiddenFor(modelItem => item.CofogDesc, new { @id = "CofogDesc" + i, @Name = "CofogDesc" + i })
                    @Html.HiddenFor(modelItem => item.SubVote, new { @id = "SubVote" + i, @Name = "SubVote" + i })
                    @Html.HiddenFor(modelItem => item.SubVoteDesc, new { @id = "SubVoteDesc" + i, @Name = "SubVoteDesc" + i })
                    @Html.HiddenFor(modelItem => item.TR, new { @id = "TR" + i, @Name = "TR" + i })
                    @Html.HiddenFor(modelItem => item.CostCentre, new { @id = "CostCentre" + i, @Name = "CostCentre" + i })
                    @Html.HiddenFor(modelItem => item.CostCentreDesc, new { @id = "CostCentreDesc" + i, @Name = "CostCentreDesc" + i })
                    @Html.HiddenFor(modelItem => item.Facility, new { @id = "Facility" + i, @Name = "Facility" + i })
                    @Html.HiddenFor(modelItem => item.FacilityDesc, new { @id = "FacilityDesc" + i, @Name = "FacilityDesc" + i })
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    $(function () {
        var paymentCategory = '@ViewBag.PaymentCategory';
        $(".input-type-no").autoNumeric("init");
    })

    function ExpensedAmountOnKeyUp(i) {
        //var fundBalance = $("#FundBalance" + i).val();
        var expensedAmount = $("#ExpensedAmount" + i).val();
        //fundBalance = fundBalance.replace(/,/g, "");
        expensedAmount = expensedAmount.replace(/,/g, "");

        //if (isNaN(fundBalance) || fundBalance == "" || fundBalance == null) {
        //    fundBalance = "0";
        //}
        if (isNaN(expensedAmount) || expensedAmount == "" || expensedAmount == null) {
            expensedAmount = "0";
        }
        //fundBalance = parseFloat(fundBalance);
        expensedAmount = parseFloat(expensedAmount);
        //if (fundBalance < expensedAmount) {
        //    $("#ExpensedAmount" + i).addClass("input-has-exceeded");
        //    return false;
        //} else {
        //    $("#ExpensedAmount" + i).removeClass("input-has-exceeded");
        //}

        var totalAmount = $("#TotalAmount").val();
        totalAmount = totalAmount.replace(/,/g, "");
        if (isNaN(totalAmount) || totalAmount == "" || totalAmount == null) {
            totalAmount = "0";
        }
        var totalLineAmount = CalculateTotalOnChange();
        if (isNaN(totalLineAmount) || totalLineAmount == "" || totalLineAmount == null) {
            totalLineAmount = "0";
        }
        $("#TotalLineAmount").val(numeral(totalLineAmount).format("0,0.00"));

        var diffAmount = totalAmount - totalLineAmount;
        if (isNaN(diffAmount) || diffAmount == "" || diffAmount == null) {
            diffAmount = "0";
        }
        $("#DiffAmount").val(numeral(diffAmount).format("0,0.00"));

        if ((paymentCategory == "Dummy Payment" && diffAmount != 0)
            || (paymentCategory == "Transfer to PMG" && diffAmount < 0)) {
            $("#DiffAmount").addClass("input-has-exceeded");
            $("#btnAddGlItem").prop("disabled", true); /*need to be true always*/
            $("#btnSave").attr("disabled", true);/*need to be true always*/
        } else {
            $("#DiffAmount").removeClass("input-has-exceeded");
            $("#btnAddGlItem").prop("disabled", false);
            $("#btnSave").attr("disabled", false);
        }
    }

    function CalculateTotalOnChange() {
        let totalExpensedAmount = 0;
        var data = $('#tblDummyPaymentDetails').dataTable().fnGetNodes();
        var i = 1;
        $(data).each(function () {
            expensedAmount = $(this).find('input[name="ExpensedAmount' + i + '"]').val();
            expensedAmount = expensedAmount.replace(/,/g, "");
            if (isNaN(expensedAmount) || expensedAmount == "" || expensedAmount == null) {
                expensedAmount = "0";
            }

            expensedAmount = parseFloat(expensedAmount);
            totalExpensedAmount = totalExpensedAmount + expensedAmount;

            i++;
        })

        return totalExpensedAmount;
    }
</script>
