@model AddLawsonUserVM
@{
    ViewBag.Title = "Add User";
}

<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>User Registration Form </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form method="post" id="add-user-form" class="form-horizontal">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label" })
                                        @Html.TextBoxFor(model => model.EmployeeId, new { @class = "form-control", @placeholder = "Search Employee" })
                                        @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.CheckNumber, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.CheckNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.CheckNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-8">
                                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.VoteCode, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.VoteCode, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.VoteCode, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.VoteName, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.VoteName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.VoteName, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.VoteGroupId, htmlAttributes: new { @class = "control-label" })
                                        @Html.DropDownListFor(model => model.VoteGroupId, Model.VoteGroupIds, "Select Vote Group", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.VoteGroupId, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.Station, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.Station, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Station, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.TokenName, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.TokenName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TokenName, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.TokenSerialNumber, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.TokenSerialNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TokenSerialNumber, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.PasswordConfirm, htmlAttributes: new { @class = "control-label" })
                                        @Html.EditorFor(model => model.PasswordConfirm, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.PasswordConfirm, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <button type="submit" class="btn btn-default btn-flat" style="float: left; margin-right: 5px">
                                                <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                                                Save
                                            </button>

                                            <button type="reset" id="btnReset" class="btn btn-default btn-flat" style="float: left; margin-right: 5px">
                                                <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                                Reset
                                            </button>

                                            <a href="@Url.Action("Users", "Manage")" class="btn btn-default btn-flat" style="float: left">
                                                <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                                Back
                                            </a>
                                        </div>
                                    </div>

                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section Scripts{

    <script>
        $(function () {

            $("#Password").val("Tanzania@123");
            $("#PasswordConfirm").val("Tanzania@123");

            var url = '@Url.Action("GetEmployees", "Manage")';

            $("#EmployeeId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Select Employee',
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedEmployee", "Manage")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: url, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "POST",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.employees }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $('#EmployeeId').on("change", function () {
            var employeeId = $("#EmployeeId").val();
            $.ajax({
                type: "POST",
                url: "GetEmployee",
                data: { id: employeeId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#CheckNumber").val(data.CheckNumber);
                        $("#UserName").val(data.UserName);
                        $("#FirstName").val(data.FirstName);
                        $("#MiddleName").val(data.MiddleName);
                        $("#LastName").val(data.LastName);
                        $("#PhoneNumber").val(data.PhoneNumber);
                        $("#Email").val(data.Email);
                        $("#VoteCode").val(data.VoteCode);
                        $("#VoteName").val(data.VoteName);
                        $("#Title").val(data.Title);
                        $("#Password").val(data.Password);
                        $("#PasswordConfirm").val(data.PasswordConfirm);
                    } else {
                        alert('Error on accessing employee details');
                    }
                },
                error: function () {
                    alert("Error on accessing employee details");
                }
            })
        });

    </script>
}
