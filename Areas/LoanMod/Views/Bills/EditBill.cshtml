@model IFMIS.Areas.IFMISTZ.Models.EditBillVM
@{

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Edit Bill </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            <form action="@Url.Action("EditBill","Bills")" method="post" name="form" class="form-horizontal" novalidate autocomplete="off">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.BillId)
                                @Html.HiddenFor(model => model.ReferenceNo)
                                @Html.HiddenFor(model => model.CostCode)
                                @Html.HiddenFor(model => model.CostName)
                                @Html.HiddenFor(model => model.UOM)
                                @Html.HiddenFor(model => model.IsMainSource)
                                @Html.HiddenFor(model => model.GLAccountReceivable)
                                @Html.HiddenFor(model => model.GLAccountRevenue)
                                @Html.HiddenFor(model => model.BillValidDays)
                                @Html.HiddenFor(model => model.SubCostName)
                                @Html.HiddenFor(model => model.IdTypeId)
                                @Html.HiddenFor(model => model.VatPercentage)
                                @Html.HiddenFor(model => model.VatAmount)
                                @Html.HiddenFor(model => model.NetAmount)
                                @Html.HiddenFor(model => model.GlAccountVat)
                                @Html.HiddenFor(model => model.BillPayOption)
                                @Html.HiddenFor(model => model.IsPreRevenue)
                                <fieldset>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Revenue Source</label>
                                        <div class="col-md-3">
                                            @Html.DropDownListFor(model => model.CostingId, Model.CostingIds, "Select Revenue Source", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.CostingId, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="col-md-2 control-label">Revenue Desc</label>
                                        <div class="col-md-5">
                                            <input class="form-control" name="CostDesc" id="CostDesc" value="@Model.CostDesc" placeholder="Revenue Source Description" type="text" readonly="readonly">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Sub Revenue Source</label>
                                        <div class="col-md-3">
                                            @Html.DropDownListFor(model => model.SubCostingId, Model.SubCostingIds, "Select Sub Revenue Source", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.SubCostingId, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="col-md-2 control-label">Sub Revenue Desc</label>
                                        <div class="col-md-5">
                                            <input class="form-control" name="SubCostDesc" id="SubCostDesc" value="@Model.SubCostDesc" placeholder="Sub Revenue Source Description" type="text" readonly="readonly">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Billed Item No</label>
                                        <div class="col-md-3">
                                            <input class="form-control" name="BilledItemId" id="BilledItemId" value="@Model.BilledItemId" placeholder="Billed Item No" type="text">
                                        </div>
                                        <label class="col-md-2 control-label">Billed Item Desc</label>
                                        <div class="col-md-5">
                                            <input class="form-control" type="text" name="BilledItemDesc" id="BilledItemDesc" value="@Model.BilledItemDesc" placeholder="Billed Item Desc">
                                        </div>
                                    </div>
                                    <!-- Start of select 2 customer -->
                                    <div class="form-group" id="divSelectCustomer">
                                        <section>
                                            <label class="col-md-2 control-label">Customer</label>
                                            <div class="col col-md-3">
                                                @Html.TextBoxFor(model => model.CustomerId, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                        <section>
                                            <label class="col-md-2 control-label">Id Type</label>
                                            <div class="col-md-5">
                                                <input type="text" class="form-control" name="IdType" id="IdType" value="@Model.IdType" placeholder="Id Type" readonly="readonly">
                                                @Html.ValidationMessageFor(model => model.IdTypeId, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                    </div>
                                    <!-- End of select 2 customer -->
                                    <!-- Start of txt customer -->
                                    <div class="form-group" id="divTxtCustomer">
                                        <section>
                                            <label class="col-md-2 control-label">Customer</label>
                                            <div class="col-md-3">
                                                <input type="text" class="form-control" name="TxtCustomerName" id="TxtCustomerName" value="@Model.CustomerName" placeholder="Customer Name">
                                                @Html.ValidationMessageFor(model => model.TxtCustomerName, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                        <section>
                                            <label class="col-md-2 control-label">Id Type</label>
                                            <div class="col-md-5">
                                                @Html.DropDownListFor(model => model.DdlIdTypeId, Model.IdTypeIds, "Select Id Type", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.DdlIdTypeId, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                    </div>
                                    <!-- End of txt customer -->
                                    <div class="form-group">
                                        <section>
                                            <label class="col-md-2 control-label">Id No</label>
                                            <div class="col-md-3">
                                                <input type="text" class="form-control" name="IdNo" id="IdNo" value="@Model.IdNo" placeholder="Id No">
                                                @Html.ValidationMessageFor(model => model.IdNo, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                    </div>
                                    <div class="form-group">
                                        <section>
                                            <label class="col-md-2 control-label">Phone No</label>
                                            <div class="col-md-3">
                                                <input class="form-control" type="text" name="PhoneNo" id="PhoneNo" value="@Model.PhoneNo" placeholder="Phone Number" required>
                                                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                        <section>
                                            <label class="col-md-2 control-label">Email Address</label>
                                            <div class="col-md-5">
                                                <input id="EmailAddress" name="EmailAddress" value="@Model.EmailAddress" class="form-control" placeholder="Email Address" type="email">
                                                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                            </div>
                                        </section>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Unit Cost</label>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" name="UnitCost" id="UnitCost" placeholder="Unit Cost" value="@Model.UnitCost" required>
                                            @Html.ValidationMessageFor(model => model.UnitCost, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="col-md-2 control-label">Currency</label>
                                        <div class="col-md-5">
                                            @Html.DropDownListFor(model => model.OperationalCurrency, Model.Currencies, "Select Currency", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.OperationalCurrency, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Quantity</label>
                                        <div class="col-md-3">
                                            @Html.TextBoxFor(model => model.Quantity, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Add VAT Amount?</label>
                                        <div class="col-md-10">
                                            @Html.CheckBoxFor(model => model.HasVat)
                                            @Html.ValidationMessageFor(model => model.HasVat, "", new { @class = "text-danger" })
                                            <span id="divVat" style="display: none">
                                                VAT is <b> <span id="txtVatPercentage"> @Html.DisplayFor(model => model.VatPercentage)% </span> </b>,
                                                Net Amount is <b> <span id="txtNetAmount"> @Html.DisplayFor(model => model.NetAmount, "_DecimalThousands")</span> </b>,
                                                VAT Amount is <b> <span id="txtVatAmount"> @Html.DisplayFor(model => model.VatAmount, "_DecimalThousands")</span> </b>
                                            </span>
                                            <div>
                                                <span id="divHasVat" style="color: red; display: none"> VAT percentage setting is missing </span>
                                            </div>
                                            <div>
                                                <span id="divGlAccountVat" style="color: red; display: none"> Gl Account for VAT is missing </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-md-2 control-label">Total Amount</label>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" name="OperationalAmount" id="OperationalAmount" placeholder="Amount" value="@Model.OperationalAmount" readonly="readonly">
                                        </div>
                                    </div>
                                </fieldset>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-8">
                                            <button class="btn btn-info" type="submit" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingBills","Billings")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->
            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->
    </section>
    <!-- end widget grid -->
</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
    <script type="text/javascript">
        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        $(function () {
            $("#UnitCost").autoNumeric({ aNeg: "-" }).trigger("change");
            $("#Quantity").autoNumeric({ aNeg: "-", mDec: '2' }).trigger("change");
            $("#OperationalAmount").autoNumeric({ aNeg: "-" }).trigger("change");

            if ($("#IsMainSource").val() == "True") {
                $("#divSelectCustomer").show();
                $("#divTxtCustomer").hide();
                $("#IdNo").prop("readonly", true);
                $("#PhoneNo").prop("readonly", true);
                $("#EmailAddress").prop("readonly", true);
            } else {
                $("#divSelectCustomer").hide();
                $("#divTxtCustomer").show();
                $("#IdNo").prop("readonly", false);
                $("#PhoneNo").prop("readonly", false);
                $("#EmailAddress").prop("readonly", false);
            }

            var url = '@Url.Action("GetCustomers", "Bills")';

            $("#CustomerId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Select Customer',
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedCustomer", "Bills")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: url, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "POST",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.customers }; // data.CountryList returning json data from Controlle
                    }
                }
            });

            if ($("#HasVat").checked) {
                $("#divVat").show();
            }
        });

        $('#CostingId').on("change", function () {
            var costingId = $("#CostingId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCosting")',
                data: { id: costingId },
                success: function (data, status, jqXHR) {
                    $("#CostCode").val(data.CostCode);
                    $("#CostName").val(data.CostName);
                    $("#CostDesc").val(data.CostDesc);
                    $("#UOM").val(data.UOM);
                    $("#BillValidDays").val(data.BillValidDays);
                    $("#IsMainSource").val(data.IsMainSource);
                    $("#GLAccountReceivable").val(data.GLAccountReceivable);
                    $("#GLAccountRevenue").val(data.GLAccountRevenue);
                    $("#BillPayOption").val(data.BillPayOption);
                    $("#IsPreRevenue").val(data.IsPreRevenue);
                    $("#SubCostingId option").remove();
                    $("#SubCostingId").append('<option value="">Select Sub Revenue Source</option>');
                    $.each(data.SubCostings, function (i, subCosting) {
                        $("#SubCostingId").append('<option value="'
                                                   + subCosting.SubCostingId + '">'
                                             + subCosting.SubCostDesc + '</option>');
                    });
                    $("#SubCostDesc").val("");
                    var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
                    var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
                    var hasVat = $("#HasVat").is(':checked');
                    var netAmount = GetNetAmount(num1, num2);
                    var vatAmount = GetVatAmount(num1, num2, hasVat);
                    var operationAmount = GetTotalAmount(num1, num2, hasVat);
                    $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
                    $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
                    $("#OperationalAmount").autoNumeric('set', operationAmount);
                },
                error: function () {
                    swal({
                        text: "Error on accessing costing details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#SubCostingId').on("change", function () {
            var subCostingId = $("#SubCostingId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSubCosting")',
                data: { id: subCostingId },
                success: function (data, status, jqXHR) {
                    $("#SubCostName").val(data.SubCostName);
                    $("#SubCostDesc").val(data.SubCostDesc);
                    $("#UnitCost").autoNumeric('set', data.UnitCost);
                    var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
                    var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
                    var hasVat = $("#HasVat").is(':checked');
                    var netAmount = GetNetAmount(num1, num2);
                    var vatAmount = GetVatAmount(num1, num2, hasVat);
                    var operationAmount = GetTotalAmount(num1, num2, hasVat);
                    $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
                    $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
                    $("#OperationalAmount").autoNumeric('set', operationAmount);
                },
                error: function () {
                    swal({
                        text: "Error on accessing sub costing details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#CustomerId').on("change", function () {
            var customerId = $("#CustomerId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCustomer")',
                data: { id: customerId },
                success: function (data, status, jqXHR) {
                    $("#TxtCustomerName").val(data.CustomerName);
                    $("#IdTypeId").val(data.IdTypeId);
                    $("#IdType").val(data.IdType);
                    $("#IdNo").val(data.IdNo);
                    $("#PhoneNo").val(data.PhoneNo);
                    $("#EmailAddress").val(data.EmailAddress);
                },
                error: function () {
                    swal({
                        text: "Error on accessing customer details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $("#UnitCost").keyup(function () {
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var operationAmount = GetTotalAmount(num1, num2, hasVat);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $("#OperationalAmount").autoNumeric('set', operationAmount);
            if (operationAmount == 0) {
                $("#btnSave").prop("disabled", true);
            } else {
                $("#btnSave").prop("disabled", false);
            }
        });

        $("#Quantity").keyup(function () {
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));;
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var operationAmount = GetTotalAmount(num1, num2, hasVat);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $("#OperationalAmount").autoNumeric('set', operationAmount);
            if (operationAmount == 0) {
                $("#btnSave").prop("disabled", true);
            } else {
                $("#btnSave").prop("disabled", false);
            }
        });

        $('#HasVat').click(function () {
            debugger
            $("#divVat").toggle(this.checked);
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetVatDetails")',
                async: false,
                success: function (data, status, jqXHR) {
                    debugger
                    var vatPercentage = 0;
                    var glAccountVat = "";
                    vatPercentage = data.VatPercentage;
                    glAccountVat = data.GlAccountVat;
                    $("#VatPercentage").val(vatPercentage);
                    $("#GlAccountVat").val(glAccountVat);
                    $('#txtVatPercentage').html(numeral(vatPercentage).format("0,0.00"));
                },
                error: function () {
                    swal({
                        text: "Error on accessing VAT details",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {

                }
            });
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));;
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var operationAmount = GetTotalAmount(num1, num2, hasVat);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $("#OperationalAmount").autoNumeric('set', operationAmount);
            if (operationAmount == 0) {
                $("#btnSave").prop("disabled", true);
            } else {
                $("#btnSave").prop("disabled", false);
            }
            if (hasVat && $("#VatPercentage").val() == 0) {
                $("#divHasVat").show();
                $("#btnSave").prop("disabled", true);
            } else {
                $("#divHasVat").hide();
                $("#btnSave").prop("disabled", false);
            }
            if (hasVat && ($("#GlAccountVat").val() == "" || $("#GlAccountVat").val() == null)) {
                $("#divGlAccountVat").show();
                $("#btnSave").prop("disabled", true);
            } else {
                $("#divGlAccountVat").hide();
                $("#btnSave").prop("disabled", false);
            }
        });

        function GetNetAmount(num1, num2) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            return num1 * num2;
        }

        function GetVatAmount(num1, num2, hasVat) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            if (hasVat) {
                var vatPercentage = $("#VatPercentage").val();
                return (num1 * num2) * (vatPercentage / 100);
            }

            return 0;
        }

        function GetTotalAmount(num1, num2, hasVat) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            if (hasVat) {
                var vatPercentage = $("#VatPercentage").val();
                return (num1 * num2) + ((num1 * num2) * (vatPercentage / 100));
            }

            return num1 * num2;
        }

    </script>
}