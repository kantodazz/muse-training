@model IFMIS.Areas.RecurrentPayment.Models.MinisterVM
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .input {
        border: 1px solid lightgray;
        width: 100%;
        height: 35px;
    }

    .textarea {
        border: 1px solid lightgray;
        width: 100%;
    }

    .input[type="text"]:focus {
        border: 1px solid lightblue;
    }
</style>
<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 5%">

    <section id="widget-grid" class="">
        <div class="row">

            <article class="col-sm-12 col-md-12 col-lg-12">

                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>

                        <h2 style="color:black;">Add Ministers</h2>

                    </header>
                    <div>
                        <div class="widget-body" style="padding-top:10px; width:100%;">

                            <table style="width:100%;">
                                <tr>
                                    <td>
                                        @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitData(this)", id = "AddMinister" }))
                                        {
                                            @Html.AntiForgeryToken()
                                        <div class="form-horizontal">
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BeneficiaryID, "Beneficiary Name", htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                                <div class="col-md-3">
                                                    @Html.TextBoxFor(model => model.BeneficiaryID, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.BeneficiaryID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.BeneficiaryName, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                                <div class="col-md-3">
                                                    @Html.HiddenFor(model => model.BeneficiaryName, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.BeneficiaryName, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BeneficiaryCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.EditorFor(model => model.BeneficiaryCode, new { htmlAttributes = new { @class = "form-control", @readOnly = true } })
                                                    @Html.ValidationMessageFor(model => model.BeneficiaryCode, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.AccountNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.EditorFor(model => model.AccountNo, new { htmlAttributes = new { @class = "form-control", @readOnly = true } })
                                                    @Html.ValidationMessageFor(model => model.AccountNo, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BeneficiaryCategory, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.EditorFor(model => model.BeneficiaryCategory, new { htmlAttributes = new { @class = "form-control", @readOnly = true } })
                                                    @Html.ValidationMessageFor(model => model.BeneficiaryCategory, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SalaryAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.EditorFor(model => model.SalaryAmount, new { htmlAttributes = new { @class = "form-control", @readOnly = true } })
                                                    @Html.ValidationMessageFor(model => model.SalaryAmount, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.PayrollStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.HiddenFor(model => model.PayrollStatus, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.PayrollStatus, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.PayrollSource, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.HiddenFor(model => model.PayrollSource, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.PayrollSource, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.BankID, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.HiddenFor(model => model.BankID, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.BankID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.PayStationID, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.HiddenFor(model => model.PayStationID, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.PayStationID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.HasCheckNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.HiddenFor(model => model.HasCheckNumber, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.HasCheckNumber, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-offset-2 col-md-10">
                                                    <button type="submit" class="btn btn-info" id="submit" onclick="AddMinister()" style="float: left">
                                                        <span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span>
                                                        Save
                                                    </button>

                                                    <a href="@Url.Action("MinisterList")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                        <span class="glyphicon glyphicon-backward" aria-hidden="true"></span>
                                                        Back
                                                    </a>
                                                </div>
                                            </div>
                                            
                                        </div>
                                        }
                                    </td>
                                    <td colspan="1"></td>
                                </tr>
                            </table>

                        </div>

                    </div>
                </div>
            </article>
        </div>
    </section>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {

            var url = '@Url.Action("GetBeneficiaries", "Deductions")';

            $("#BeneficiaryID").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                ajax: {
                    url: url,
                    type: "POST",
                    dataType: 'json',
                    data: function (searchQuery) {
                        return {
                            searchQuery: searchQuery,
                        };
                    },
                    results: function (data, page) {
                        return { results: data.beneficiaries }; // data.beneficiaries returning json data from Controller
                    }
                }
            });
        });

        $("#BeneficiaryID").change(function () {
            var url = '@Url.Action("PopulateEmployeeFields", "Ministers")';
            var beneficiaryId = $("#BeneficiaryID").val();
            debugger
            $.ajax({
                type: "POST",
                url: url,
                data: { 'beneficiaryId': beneficiaryId },
                success: function (data, status, jqXHR) {
                    debugger
                    if (data.success) {
                        document.getElementById('BeneficiaryName').value = data.beneficiaryName;
                        document.getElementById('BeneficiaryCode').value = data.beneficiaryCode;
                        document.getElementById('AccountNo').value = data.accountNo;
                        document.getElementById('BeneficiaryCategory').value = data.beneficiaryCategory;
                        document.getElementById('SalaryAmount').value = data.salaryAmount;
                        document.getElementById('PayrollStatus').value = data.payrollStatus;
                        document.getElementById('PayrollSource').value = data.payrollSource;
                        //document.getElementById('BeneficiaryTitle').value = data.beneficiaryTitle;
                        //document.getElementById('DepartmentID').value = data.departmentID;
                        document.getElementById('PayStationID').value = data.payStationID;
                        //document.getElementById('SectionID').value = data.sectionID;
                        //document.getElementById('SalaryScale').value = data.salaryScale;
                        //document.getElementById('DOB').value = data.dOB;
                        //document.getElementById('BeneficiaryTitle').value = data.beneficiaryTitle;
                        document.getElementById('BankID').value = data.bankID;
                        document.getElementById('PayStationID').value = data.payStationID;
                        document.getElementById('HasCheckNumber').value = data.hasCheckNumber;
                        //document.getElementById('DOB').value = data.dOB;
                        //document.getElementById('BeneficiaryTitle').value = data.beneficiaryTitle;
                    } else {
                        alert('This beneficiary does not exist!');
                        document.getElementById('BeneficiaryName').value = "";
                        document.getElementById('BeneficiaryCode').value = "";
                        document.getElementById('AccountNo').value = "";
                        document.getElementById('BeneficiaryCategory').value = "";
                        document.getElementById('SalaryAmount').value = "";
                        document.getElementById('PayrollStatus').value = "";
                        document.getElementById('PayrollSource').value = "";
                       // document.getElementById('BeneficiaryTitle').value = "";
                        document.getElementById('BankID').value = "";
                        document.getElementById('PayStationID').value = "";
                        document.getElementById('HasCheckNumber').value = "";
                        //document.getElementById('DepartmentID').value = "";
                        document.getElementById('PayStationID').value = "";
                        //document.getElementById('SectionID').value = "";
                        //document.getElementById('SalaryScale').value = "";
                        document.getElementById('HasCheckNumber').value = "";
                        //document.getElementById('DOB').value = "";
                        //document.getElementById('BeneficiaryTitle').value = "";
                    }
                }
            })
        });

        function SubmitData(formData) {
            //var data = $("#paymentForm").serialize();
            var url = '@Url.Action("AddMinister", "Ministers")';
            debugger
            if (!$("#AddMinister").valid()) {
                swal("Please fill required area");
                return false;
            }
            $("#divLoader").show();
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (response) {
                    $("#divLoader").hide();
                    if (response == "success") {
                        swal("Minister saved successfully", { icon: "success" })
                            .then((value) => {
                                var url = '@Url.Action("MinisterList", "Ministers")';
                                window.location.replace(url);
                            });
                    }
                    else if (response == "duplicate") {
                        swal("Minister Already Exist!", { icon: "warning" });
                    }
                    else if (response == "Error") {
                        swal("Error during save, contact system support", { icon: "warning" });
                    } else {
                        swal(response, { icon: "warning" });
                    }
                },error: function (err) {
                    debugger
                    $("#divLoader").hide();
                    console.log('errorResp', err.responseText)
                    swal(err.responseText, { icon: "warning" });
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
            
        }

    </script>
}
