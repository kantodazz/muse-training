@model IEnumerable<IFMIS.Areas.RecurrentPayment.Models.PaymentVM>
@{
    ViewBag.Title = "Pending Unapplied List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="content">
    <div class="row"></div>
    <section id="widget-grid">
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-12">

                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2>Pending Unapplied List</h2>
                    </header>

                    <div>
                        <div class="widget-body">

                            <table class="table table-bordered table-condensed" id="tblDataList">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Beneficiary Code</th>
                                        <th>Full Name</th>
                                        <th>Account #</th>
                                        <th>BIC</th>
                                        <th>Bank</th>
                                        <th>Amount</th>
                                        <th>Description</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int i = 0;
                                    }
                                    @foreach (var item in Model)
                                    {
                                        i++;
                                        <tr>
                                            <td>@i</td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BeneficiaryCode)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BeneficiaryName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BeneficiaryAccountNo)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BankBic)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BankName)
                                            </td>
                                            <td>
                                                @string.Format("{0:#,0.00}", item.Amount)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.UnappliedDescription)
                                            </td>
                                            <td>
                                                @Convert.ToDateTime(item.UnappliedAt).ToString("dd/MM/yyyy")
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>

@section Scripts{
    <script src="~/Scripts/accounting.min.js"></script>
    <script>

        $(document).ready(function () {
            var responsiveHelper_tblDataList = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };
            $('#tblDataList').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_tblDataList) {
                        responsiveHelper_tblDataList = new ResponsiveDatatablesHelper($('#tblDataList'), breakpointDefinition);
                    }
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_dt_basic.respond();
                }

            }); 
        });

        //$(function () {
        //    BindDataTable();
        //});

        @*var BindDataTable = function (response) {
            var url = '@Url.Action("GetPendingUnappliedList", "Payments")';
            $("#tblUsers").DataTable({
                "bServerSide": true,
                "sAjaxSource": url,
                "fnServerData": function (sSource, aoData, fnCallback) {
                    $.ajax({
                        type: "GET",
                        url: sSource,
                        data: aoData,
                        success: fnCallback
                    });
                },
                "aoColumns": [
                    {
                        render: function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    { "mData": "BeneficiaryCode" },
                    { "mData": "BeneficiaryName" },
                    { "mData": "BeneficiaryAccountNo" },
                    { "mData": "BankBic" },
                    { "mData": "BankName" },
                    {
                        "mData": "Amount",
                        "render": function (data, type, row) {
                            return accounting.formatMoney(data, { format: "%v" });
                        }
                    },
                    { "mData": "UnappliedDescription" },
                    {
                        "mData": "UnappliedAt",
                        "render": function (data, type, row) {
                            var dt = data;
                            var dx = new Date(parseInt(dt.substr(6)));
                            var dd = ("0" + dx.getDate()).slice(-2);
                            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
                            var yy = dx.getFullYear();
                            var HH = ("0" + dx.getHours()).slice(-2);
                            var m = ("0" + dx.getMinutes()).slice(-2);
                            var ss = ("0" + dx.getSeconds()).slice(-2);
                            return dd + "/" + mm + "/" + yy;
                        }
                    },
                ]
            });
        };*@
    </script>
}