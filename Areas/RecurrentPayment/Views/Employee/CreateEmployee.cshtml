@model IFMIS.Areas.RecurrentPayment.Models.EmployeeVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .input {
        border: 1px solid lightgray;
        width: 100%;
        height: 35px;
    }

    .textarea {
        border: 1px solid lightgray;
        width: 100%;
    }

    .input[type="text"]:focus {
        border: 1px solid lightblue;
    }
</style>
<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 5%">

    <section id="widget-grid" class="">
        <div class="row">

            <article class="col-sm-12 col-md-12 col-lg-12">

                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>

                        <h2 style="color:black;">Add Beneficiary.</h2>

                    </header>
                    <div>
                        <div class="widget-body" style="padding-top:10px; width:100%;">

                            <table style="width:100%;">
                                <tr>
                                    <td>
                                        @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitData(this)",id = "AddBeneficiary" }))
                                        {
                                            @Html.AntiForgeryToken()
                                        <div class="form-horizontal">
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            
                                                <div class="row">
                                                    <div class="col-md-2">
                                                        @Html.LabelFor(model => model.HasCheckNumber, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EnumDropDownListFor(model => model.HasCheckNumber, "Please Select", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.HasCheckNumber, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-2">
                                                        @Html.LabelFor(model => model.BeneficiaryCode, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.BeneficiaryCode, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.BeneficiaryCode, "", new { @class = "text-danger" })
                                                    </div>

                                                    @*<div class="col-md-4"></div>*@
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.PayrollSources, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EnumDropDownListFor(model => model.PayrollSources, "Please Select", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.PayrollSources, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.PayrollStatus, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EnumDropDownListFor(model => model.PayrollStatus, "Please Select", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.PayrollStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.BeneficiaryName, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.BeneficiaryName, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.BeneficiaryName, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.BeneficiaryCategory, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.BeneficiaryCategory, Model.BeneficiaryCategories, "Select Category", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.BeneficiaryCategory, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.BeneficiaryTitle, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.BeneficiaryTitle, Model.BeneficiaryTitles, "Select Title", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.BeneficiaryTitle, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.BankID, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.BankID, Model.Banks, "Select Bank", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.BankID, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.AccountNo, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.AccountNo, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.AccountNo, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.SalaryScale, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.SalaryScale, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.SalaryScale, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.SalaryAmount, htmlAttributes: new { @class = "control-label" })
                                                        <div class="input-group">
                                                            <span class="input-group-addon"><i class="fa">TZS</i></span>
                                                            @Html.EditorFor(model => model.SalaryAmount, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.SalaryAmount, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    @*<div class="col-md-4">
                                                        @Html.LabelFor(model => model.PayStationID, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.PayStationID, Model.PayStations, "Select Pay Station", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.PayStationID, "", new { @class = "text-danger" })
                                                    </div>*@
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.DeptID, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownList("DeptID", null, "Select Department", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.DeptID, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                
                                                <div class="row">
                                                    @*<div class="col-md-4">
                                                        @Html.LabelFor(model => model.SectionID, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.SectionID, new SelectList(""), "Select Section", new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.SectionID, "", new { @class = "text-danger" })
                                                    </div>*@
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(model => model.ContractStartDate, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.ContractStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.ContractStartDate, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-2" id="contractModal1" style="display: none">
                                                        @Html.LabelFor(model => model.ContractEndDate, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.ContractEndDate, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.ContractEndDate, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="col-md-2" id="contractModal" style="display: none">
                                                        @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                @*<div class="row">
                                                    <div class="col-md-offset-2 col-md-10">
                                                        <button type="submit" class="btn btn-info" id="submit" style="float: left">
                                                            <span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span>
                                                            Save
                                                        </button>

                                                        <a href="@Url.Action("EmployeeList")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                            <span class="glyphicon glyphicon-backward" aria-hidden="true"></span>
                                                            Back
                                                        </a>
                                                    </div>
                                                </div>*@
                                                <div class="form-actions">
                                                    <div class="row">
                                                        <div class="col-md-offset-2 col-md-8">
                                                            <button type="submit" class="btn btn-info" id="submit"  style="float: left">
                                                                <i class="fa fa-save"></i>
                                                                Save
                                                            </button>
                                                            <a href="@Url.Action("EmployeeList")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                                <i class="fa fa-arrow-left"></i>
                                                                Back
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            }
</td>
                                    <td colspan="1"></td>
                                </tr>
                            </table>

                        </div>

                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@section Scripts{
    <script>
        $("#SalaryAmount").autoNumeric('init');
        $(function () {
           // $("#ContractEndDate").prop("disabled", true);

        });
        $("#saveLoader").toggle(false);
        debugger
        var today = new Date();
        var startd = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());

        $("#DOB")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0",
                showOn: "both",
                buttonImage: "/Media/Images/calendar.gif",
                //minDate: startd.toDateString(),
                maxDate: startd
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select a date",
                text: false
            })
            .addClass("btn btn-default")
            //.wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });

        $("#ContractStartDate")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0",
                showOn: "both",
                buttonImage: "/Media/Images/calendar.gif",
                maxDate: "+0D"
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select a date",
                text: false
            })
            .addClass("btn btn-default")
            //.wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });

        //$("#ContractEndDate")
        //    .wrap('<div class="input-group">')
        //    .datepicker({
        //        dateFormat: "yy-mm-dd",
        //        changeMonth: true,
        //        changeYear: true,
        //        yearRange: "-60:+0",
        //        showOn: "both",
        //        buttonImage: "/Media/Images/calendar.gif",
        //        //maxDate: "+0D"
        //    })
        //    .next("button").button({
        //        icons: { primary: "ui-icon-calendar" },
        //        label: "Select a date",
        //        text: false
        //    })
        //    .addClass("btn btn-default")
        //    //.wrap('<span class="input-group-btn">')
        //    .find('.ui-button-text')
        //    .css({
        //        'visibility': 'hidden',
        //        'display': 'inline'
        //    });


        function SubmitData(formData) {
            debugger;
            if (!$("#AddBeneficiary").valid()) {
                swal("Please fill required area", {icon:"warning"});
                return false;
            }
            var url = '@Url.Action("CreateEmployee", "Employee")';
            $("#divLoader").show();
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (response) {
                    $("#divLoader").hide();
                    if (response == "Success") {
                        swal("Beneficiary saved successfully", { icon: "success" })
                            .then((value) => {
                                var url = '@Url.Action("EmployeeList", "Employee")';
                                window.location.replace(url);
                            });
                    }
                    else {
                        //pageLoading("false");
                        swal(response, { icon: "warning" });
                    }
                }
            }
        
            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }

        $("#SalaryAmount").change(function () {
            var salaryAmount = $("#SalaryAmount").val();
            if (salaryAmount < 1) {
                swal("Amount can not be less than 1", { icon: "warning" });
                $("#SalaryAmount").val("");
            }
        })

        $("#HasCheckNumber").change(function () {
            $("#divLoader").toggle(true);
            var hasCheckNumber = $("#HasCheckNumber option:selected").text();

            if (hasCheckNumber == "No") {

                $("#BeneficiaryCode").prop("readonly", true);

                var url = "GetEmpTempBenCode";

                $.ajax({
                    type: "POST",
                    url: url,
                    success: function (data, status, jqXHR) {
                        if (data.success) {
                            $("#BeneficiaryCode").val(data.beneficiaryCode);
                        } else {
                            $("#BeneficiaryCode").val("");
                        }
                    },
                    complete: function () {
                        $("#divLoader").toggle(false);
                    }
                })
            } else {
                $("#BeneficiaryCode").val("");
                $("#BeneficiaryCode").prop("readonly", false);
                $("#divLoader").toggle(false);
            }
        });

        //$("#PayStationID").change(function () {
        //    var Id = $(this).val();
        //    $("#divLoader").toggle(true);
        //    var url = "GetDeptsPerPayStation/" + Id;

        //    $.ajax({
        //        type: "POST",
        //        url: url,
        //        contentType: "html",
        //        success: function (response) {
        //            $("#DeptID").empty();
        //            $("#DeptID").append(response);
        //        },
        //        complete: function () {
        //            $("#divLoader").toggle(false);
        //        }
        //    })
        //});

        //$("#DeptID").change(function () {
        //    var Id = $(this).val();
        //    var url = "GetSectionsPerDept/" + Id;
        //    $("#divLoader").toggle(true);
        //    $.ajax({
        //        type: "POST",
        //        url: url,
        //        contentType: "html",
        //        success: function (response) {
        //            $("#SectionID").empty();
        //            $("#SectionID").append(response);
        //        }, complete: function () {
        //            $("#divLoader").toggle(false);
        //        }
        //    })
        //});


        $("#BeneficiaryCategory").change(function () {
            debugger;
            var beneficiaryCategory = $("#BeneficiaryCategory").val();

            if (beneficiaryCategory == "Contract") {
                $("#contractModal").show();
                $("#contractModal1").show();
                $("#Duration").prop("required", true);
                $("#ContractEndDate").prop("required", true);

            } else {
                $("#contractModal").hide();
                $("#contractModal1").hide();
            }
        });


        $("#ContractEndDate").change(function () {
            //debugger
            //var rightOfOccupancy = $("#Duration").val();
            var start = document.getElementById('ContractStartDate').value;
            var end = document.getElementById('ContractEndDate').value;
            var date1 = new Date(start);
            var date2 = new Date(end);
            var diffInMilliseconds = date2.getTime() - date1.getTime();
            
            // Convert milliseconds to days (divide by 1000 * 60 * 60 * 24)
            var durationInDays = diffInMilliseconds / (1000 * 60 * 60 * 24);
            var years = durationInDays / 365.25;
            
            $("#Duration").val(Math.floor(years));
        });

    </script>
}
