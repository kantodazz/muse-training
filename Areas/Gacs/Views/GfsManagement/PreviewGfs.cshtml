@model IFMIS.Areas.Gacs.Models.GfsListVM

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create";
}

<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div>
                    <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                        <header>
                            <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                            <h2> Preview  GFS </h2>

                        </header>


                        <div>
                            <div class="widget-body " style="padding-top:10px;width:100%">


                                <h4>GFS Transaction No   @Html.DisplayFor(model => model.ID) </h4>
                                <hr />
                                <dl class="dl-horizontal">
                                    <dt>
                                        @Html.DisplayNameFor(model => model.Chapter)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.Chapter)
                                    </dd>

                                    <dt>
                                        @Html.DisplayNameFor(model => model.SubChapter)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.SubChapter)
                                    </dd>

                                    <dt>
                                        @Html.DisplayNameFor(model => model.Item)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.Item)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.SubItem)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.SubItem)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.ItemDescription)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.ItemDescription)
                                    </dd>

                                    <dt>
                                        @Html.DisplayNameFor(model => model.GFSTransaction)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.GFSTransaction)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.GFSHoldingGain)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.GFSHoldingGain)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.GFSVolume)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.GFSVolume)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.GFSStock)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.GFSStock)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.ActiveFlag)
                                    </dt>

                                    <dd>
                                        @if(Model.ActiveFlag==1)
                                        {
                                        <span>Active</span>
                                          }élse{
                                          <span>InActive</span>
                                        }
                                    </dd>
                              

                                </dl>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <a href="@Url.Action("GfsList","GfsManagement")" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        </div>
                                    </div>
                                </div>


                            </div>





                        </div>


                    </div>
                </div>
            </article>

        </div>
    </section>

</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">

            $(document).ready(function () {
                /* // DOM Position key index //
         l - Length changing (dropdown)
         f - Filtering input (search)
         t - The Table! (datatable)
         i - Information (records)
         p - Pagination (paging)
         r - pRocessing
         < and > - div elements
         <"#id" and > - div with an id
         <"class" and > - div with a class
         <"#id.class" and > - div with an id and class
         Also see: http://legacy.datatables.net/usage/features
         */
                /* BASIC ;*/
                var responsiveHelper_dt_gfs = undefined;
                var responsiveHelper_datatable_fixed_column = undefined;
                var responsiveHelper_datatable_col_reorder = undefined;
                var responsiveHelper_datatable_tabletools = undefined;

                var breakpointDefinition = {
                    tablet: 1024,
                    phone: 480
                };

                $('#dt_gfs').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_dt_gfs) {
                            responsiveHelper_dt_gfs = new ResponsiveDatatablesHelper($('#dt_gfs'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_dt_gfs.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_dt_gfs.respond();
                    }
                });

                /* END BASIC */

                /* COLUMN FILTER  */
                var otable = $('#datatable_fixed_column').DataTable({
                    //"bFilter": false,
                    //"bInfo": false,
                    //"bLengthChange": false
                    //"bAutoWidth": false,
                    //"bPaginate": false,
                    //"bStateSave": true // saves sort state using localStorage
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_fixed_column) {
                            responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_fixed_column.respond();
                    }
                });

                // custom toolbar
                $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

                // Apply the filter
                $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {
                    otable
                        .column($(this).parent().index() + ':visible')
                        .search(this.value)
                        .draw();
                });
                /* END COLUMN FILTER */

                /* COLUMN SHOW - HIDE */
                $('#datatable_col_reorder').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_col_reorder) {
                            responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_col_reorder.respond();
                    }
                });

                /* END COLUMN SHOW - HIDE */

                /* TABLETOOLS */
                $('#datatable_tabletools').dataTable({

                    // Tabletools options:
                    //   https://datatables.net/extensions/tabletools/button_options
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "oTableTools": {
                        "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                           {
                               "sExtends": "pdf",
                               "sTitle": "SmartAdmin_PDF",
                               "sPdfMessage": "SmartAdmin PDF Export",
                               "sPdfSize": "letter"
                           },
                           {
                               "sExtends": "print",
                               "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                           }
                        ],
                        "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                    },
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_tabletools) {
                            responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_tabletools.respond();
                    }
                });
                /* END TABLETOOLS */


                $("#ConfirmReason").on('submit', function (e) {
                    e.preventDefault();

                    swal({
                        title: 'Confirmation',
                        text: "Do you confirm this LPO ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                            var url = '@Url.Action("ConfirmRejectedLPO", "Procurement")';
                            var id = $("#Id").val();
                            var reason = $("#Reason").val();
                            var formData = {
                                "Id": id,
                                "Reason": reason
                            }
                            $('#ComfirmLPO').modal('hide');
                            $.ajax(
                        {
                            type: "POST",
                            url: url,
                            data: formData,
                            success: function (result) {
                                if (result == "Success") {

                                    swal("LPO Confirmed  successfully!", { icon: "success" })
                                              .then((value) => {
                                           location.reload();
                                              });


                                }
                                else if (result.response == "Items") {
                                  swal("Failed to confirm ,Please enter items with total value of "+toLabel(result.amount)+" equals to Purchase Order Amount,currently you have entered items with value of "+toLabel(result.items_amount));
                                             }
                               else if (result.response == "glItems") {

                                 swal("Failed to confirm ,Please assign GL items with total value of "+toLabel(result.items_amount));

                                            }
                                else {

                                    swal("Failed to reject ,DbException");
                                }
                            },
                            error: function (xhr) {
                                swal(error);

                            },

                        });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });
                });


                        });

            //SHOW LOADER ICON
            $(document).ajaxStart(function () {
                $(".loadingImg").show();

            });
            //HIDE LOADER ICON
            $(document).ajaxStop(function () {
                $(".loadingImg").hide();
            });

      var showDetails = function (id) {
            debugger;
            var url = '@Url.Action("PurchaseOrderDetails", "Procurement")';
            $("#divModalBody").load(url, { id: id }, function (response, status, xhr) {
                if (status == "error") {
                    $("#divModalBody").html("Error on accessing this details, contact system support.");
                }
                $("#divModal").modal("show");
            });
        };

                    var confirmEntry = function (id, lpo) {
                     swal({
                                    title: 'Confirmation',
                                    text: "Do you what to confirm LPO  " + lpo + " ?",
                                    buttons: [
                                      'No',
                                      'Yes'
                                    ],
                                }).then(function (isConfirm) {
                                    if (isConfirm) {
                                        var url = '@Url.Action("ConfirmLPO", "Procurement")';
                                        $.ajax(
                            {
                                type: "POST",
                                url: url,
                                data: { id: id },
                                    success: function (result) {
                                   if (result == "Success") {

                                   swal("Confirmed successfully!", { icon: "success" })
                                                            .then((value) => {
                                                               location.reload();
                                     });


                                      }
                                   else if (result.response == "Items") {
                                  swal("Failed to confirm ,Please enter items with total value of "+toLabel(result.amount)+" "+result.currency+" equals to Purchase Order Amount,currently you have entered items with value of "+toLabel(result.items_amount)+" "+result.currency+".So "+toLabel(result.remains)+" "+result.currency+" remained.");
                                             }
                                   else if (result.response == "glItems") {

                                 swal("Failed to confirm ,Please assign all items with GLs ");

                                            }
                                    else {

                                        swal("Failed to confirm ,DbException");
                                        }
                                },
                                error: function (xhr) {
                                    swal(error);
                                },

                            });
                                    } else {
                                        swal("Cancelled", "No change was made");
                                    }
                                });
                }
            var confirmRejected = function (id, lpo) {
                $("#lpo_number").text(lpo);
                $(".modal-body #Id").val(id);
               $('#ComfirmLPO').modal('show');
            }


        $("#ChapterID").on("change", function () {
            var chapterId = $(this).val();
            if (chapterId == 1 || chapterId == 2) {
                $("#GFSHoldingGain").val("00000000");
                $("#GFSVolume").val("00000000");
                $("#GFSStock").val("00000000");
                $("#GFSHoldingGain").prop("readonly", true);
                $("#GFSVolume").prop("readonly", true);
                $("#GFSStock").prop("readonly", true);
             
            } else {
                $("#GFSHoldingGain").val("");
                $("#GFSVolume").val("");
                $("#GFSStock").val("");
                $("#GFSHoldingGain").prop("readonly", false);
                $("#GFSVolume").prop("readonly", false);
                $("#GFSStock").prop("readonly", false);
            }
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSubChapters", "GfsManagement")',
                data: { id: chapterId },
                success: function (data, status, jqXHR) {
                    $("#SubChapterID option").remove();
                    $("#SubChapterID").append('<option value="">Select Sub Chapter</option>');
                    $.each(data.SubChapters, function (i, subChapters) {
                        $("#SubChapterID").append('<option value="'
                            + subChapters.SubChapterCode + '">'
                            + subChapters.SubChapterDescription + '</option>');
                    });
                },
                error: function () {
                    swal({
                        text: "Error on accessing Sub Chapters",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        })

        $("#SubChapterID").on("change", function () {
            var subChapterId = $(this).val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetItems", "GfsManagement")',
                data: { id: subChapterId },
                success: function (data, status, jqXHR) {
                    $("#ItemID option").remove();
                    $("#ItemID").append('<option value="">Select GFS Item</option>');
                    $.each(data.GfsItems, function (i, gfsItems) {
                        $("#ItemID").append('<option value="'
                            + gfsItems.ID + '">'
                            + gfsItems.ItemShortDescription + '</option>');
                    });
                },
                error: function () {
                    swal({
                        text: "Error on accessing GFS items",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        })


        $("#ItemID").on("change", function () {
            var itemId = $(this).val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSystemSubModule", "ApplicationRoles")',
                data: { id: systemSubModuleId },
                success: function (data, status, jqXHR) {
                    $("#RoleName option").remove();
                    $("#RoleName").append('<option value="">Select Role</option>');
                    $.each(data.Roles, function (i, role) {
                        $("#RoleName").append('<option value="'
                            + role.Name + '">'
                            + role.Name + '</option>');
                    });
                },
                error: function () {
                    swal({
                        text: "Error on accessing sub module details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        })
    </script>
}
