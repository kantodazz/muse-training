@model IFMIS.Areas.PayrollManagement.Models.EmployeeAllowanceVM
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 5%">
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i></span>
                        <h2 style="color:black;">Employee Allowance</h2>
                    </header>
                    <div>
                        <div class="widget-body" style="padding-top:10px; width:100%;">
                            <table style="width:100%;">
                                <tr>
                                    <td>
                                        @using (Html.BeginForm("", "", FormMethod.Post, new { id = "form" }))
                                        {
                                        @Html.AntiForgeryToken()
                                        <div class="form-horizontal">
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.EmployeeEarningId)
                                                @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", @readonly = true })
                                                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CheckNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.EditorFor(model => model.CheckNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                    @Html.ValidationMessageFor(model => model.CheckNumber, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.EditorFor(model => model.BankName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                    @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BankAccount, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.EditorFor(model => model.BankAccount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                    @Html.ValidationMessageFor(model => model.BankAccount, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.EarningJobCodeMapId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.DropDownListFor(model => model.EarningJobCodeMapId, ViewBag.AllowanceList as SelectList, "Select Allowance", new { @class = "form-control select2" })
                                                    @Html.ValidationMessageFor(model => model.EarningJobCodeMapId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.AllowanceDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.TextAreaFor(model => model.AllowanceDescription, new { @class = "form-control", @readonly = true })
                                                    @Html.ValidationMessageFor(model => model.AllowanceDescription, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.AllowanceAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.EditorFor(model => model.AllowanceAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                    @Html.ValidationMessageFor(model => model.AllowanceAmount, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-5">
                                                    @Html.EnumDropDownListFor(model => model.Status, "Select Status", new { @class = "form-control select2" })
                                                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-offset-2 col-md-10">
                                                    <button type="button" class="btn btn-info" id="btnSave" style="float: left">
                                                        <span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span>
                                                        Save
                                                    </button>
                                                    <a href="@Url.Action("BeneficiaryAllowanceList","BeneficiaryAllowances")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                        <span class="glyphicon glyphicon-backward" aria-hidden="true"></span>
                                                        Back
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                        }
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@section pagespecific {
    <script>
      $(document).ready(function () {
        $('#divLoader').hide();

        var url = '@Url.Action("GetBeneficiaries", "AutomaticEarnings")';

        $("#EmployeeId").select2({
            minimumInputLength: 2, //minimumInputLength for sending ajax request to server
            width: 'resolve',   //to adjust proper width of select2 wrapped elements
            ajax: {
                url: url,
                type: "POST",
                dataType: 'json',
                data: function (searchQuery){
                    return {
                        searchQuery: searchQuery
                    };
                },
                results: function (data, page) {
                    return { results: data.beneficiaries }; //data.beneficiaries returning json data from Controller
                }
            }
        });
      });

      $("#EmployeeId").change(function () {
            var url = '@Url.Action("PopulateBeneficiaryFields", "AutomaticEarnings")';
            var beneficiaryId = $("#EmployeeId").val();

            $.ajax({
                type: "POST",
                url: url,
                data: { 'beneficiaryId': beneficiaryId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        document.getElementById('CheckNumber').value = data.beneficiaryCode;
                        document.getElementById('BankName').value = data.bankName;
                        document.getElementById('BankAccount').value = data.bankAccount;
                    } else {
                        document.getElementById('CheckNumber').value = "";
                        document.getElementById('BankName').value = "";
                        document.getElementById('BankAccount').value = "";
                    }
                }
            })
        });

        $("#EarningJobCodeMapId").change(function () {
            var url = '@Url.Action("PopulateAllowanceFields", "AutomaticEarnings")';
            var allowanceListId = $("#EarningJobCodeMapId").val();

            $.ajax({
                type: "POST",
                url: url,
                data: { 'allowanceListId': allowanceListId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        document.getElementById('AllowanceDescription').value = data.allowanceDescription;
                        document.getElementById('AllowanceAmount').value = data.allowanceAmount;
                    } else {
                        document.getElementById('AllowanceDescription').value = "";
                        document.getElementById('AllowanceAmount').value = "";
                    }
                }
            })
        });

    $('#AllowanceAmount').autoNumeric('init');

    $("#btnSave").on("click", function () {
        $("#btnSave").attr("disabled", true);
        $.validator.unobtrusive.parse("#form");
        if (!$("#form").valid()) {
            $("#btnSave").attr("disabled", false);

            return false;
        }

        $("#divLoader").show();

        var token = $("[name='__RequestVerificationToken']").val();

        var formData = new FormData();

        formData.append("__RequestVerificationToken", token);
        formData.append("EarningJobCodeMapId", $('#EarningJobCodeMapId').val());
        formData.append("Status", $('#Status').val());
        formData.append("EmployeeEarningId", $('#EmployeeEarningId').val());
        

        var url = '@Url.Action("EditEarningEntry", "AutomaticEarnings")';
        var url1 = '@Url.Action("AutomaticEarningsNewList", "AutomaticEarnings")';

        $.ajax({
            url: url,
            type: "POST",
            //data: JSON.stringify(Object.fromEntries(formData)),
            data: formData,
            dataType: "JSON",
            //contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            //cache: false,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response == "success") {
                    swal("Saved Successfully!", { icon: "success" })
                        .then((value) => {
                            window.location.href = url1;
                        })
                }
                else if (response == "exist") {
                    swal("Allowance exist to this employee!", { icon: "info" })
                        .then((value) => {
                        })
                }
                else {
                    swal("Error on saving allowance!", { icon: "error" })
                        .then((value) => {
                        })
                }
            },
            error: function () {
                swal({
                    text: "An error occured while processing your request, please contact system support",
                    icon: "error",
                    button: "OK",
                })
            },
            complete: function () {
                $("#btnSave").attr("disabled", false);
                $("#divLoader").hide();
            }
        });
    })

    </script>
}

