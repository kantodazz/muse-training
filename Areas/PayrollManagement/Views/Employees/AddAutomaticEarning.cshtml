@model IFMIS.Areas.PayrollManagement.Models.EmployeeDetailVM
@{
    ViewBag.Title = "Create";
}
<div id="content">
    <div class="panel panel-default">
        <!-- Default panel contents -->
        <div class="panel-heading">
            <h3 class="panel-title"> Add Employees Earnings </h3>
        </div>
        @using (Html.BeginForm("", "", FormMethod.Post, new { id = "form" }))
        {
            @Html.AntiForgeryToken()
            <div class="panel-body">
                <div class="step-pane active" style="margin-top:20px">
                    <!-- wizard form starts here -->
                    <div class="form-group row">
                        <label class="col-md-2 control-label">CheckNumber</label>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.CheckNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CheckNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2 control-label">Force Number</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.ForceNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.ForceNumber, "", new { @class = "text-danger" })
                        </div>
                        <label class="col-md-1 control-label">Firstname</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2 control-label">Middlename</label>
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                        </div>
                        <label class="col-md-1 control-label">Lastname</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2 control-label">Account No#</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.AccountNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
                        </div>
                        <label class="col-md-1 control-label">Department</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.DepartmentName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.DepartmentName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2 control-label">Company</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                        </div>
                        <label class="col-md-1 control-label">WorkStation</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.WorkstationName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.WorkstationName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2 control-label">Job Code</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.JobCodeName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.JobCodeName, "", new { @class = "text-danger" })
                        </div>
                        <label class="col-md-1 control-label">Job Dependant</label>
                        <div class="col-md-3">
                            @Html.DropDownListFor(model => model.JobCodeDependantId, ViewBag.Jobcodedependant as SelectList, "Select--", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.JobCodeDependantId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2 control-label">Payment Code</label>
                        <div class="col-md-3">
                            @Html.DropDownListFor(model => model.EarningJobCodeMapId, new SelectList(""), "Select Payment Code", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.EarningJobCodeMapId, "", new { @class = "text-danger" })
                        </div>
                        <label class="col-md-1 control-label">Amount</label>
                        <div class="col-lg-3">
                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control number", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.JobCodeId)
                    <div class="form-group row">
                        @Html.HiddenFor(model => model.EarningJobCodeMapId)
                        <label class="col-md-2 control-label">Effect Date</label>
                        <div class="col-lg-1">
                            @Html.EditorFor(model => model.EffectiveDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EffectiveDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-lg-2">
                            @Html.DropDownListFor(model => model.ReasonId, ViewBag.Reasons as SelectList, "Select Reasons", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ReasonId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="panel-footer">
            <a href="@Url.Action("EmployeeList", "Employees")" class="btn btn-default btn-flat" style="margin-left:230px">
                <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                Back
            </a>
            <button style="margin-right:245px" onclick="addPaymentcode()" value="save" class="btn btn-info">
                <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                Save
            </button>
        </div>
    </div>
</div>
<!-- end widget div -->
@section pagespecific {
    <script src="~/Scripts/libs/jquery.validate.min.js"></script>
    <script src="~/Scripts/libs/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/libs/jquery.unobtrusive-ajax.min.js"></script>
    <script type="text/javascript">
        var addEmployee = function (){
            debugger
            $.validator.unobtrusive.parse("#form");
            if (!$("#form").valid()) {
                return false;
            }

            var url = '@Url.Action("CreateEmployee", "Employees")';
            var url1 = '@Url.Action("EmployeeList", "Employees")'
            var model = $("#form").serialize();
            $.ajax({
                type: "POST",
                url: url,
                data: model,
                success: function (response) {
                    if (response == "success") {
                        swal("Employee Saved Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.href = url1;
                            })
                    }
                    else {
                        swal("Error on saving employee!", { icon: "error" })
                            .then((value) => {
                                location.reload();
                            })
                    }
                },
                error: function (response) {
                    swal("Error on saving employee!")
                    location.reload();
                }
            });
        };

        $("#JobCodeDependantId").change(function () {
            debugger
            var id = $("#JobCodeDependantId").val();
            var url = '@Url.Action("GetJobCodeDependants", "Employees")';
            url += '?id=' + id;
            $.ajax({
                type: "POST",
                url: url,
                contentType: "html",
                success: function (response) {
                    $("#EarningJobCodeMapId").empty();
                    $("#EarningJobCodeMapId").append(response);
                }
            })
        });

        $(document).ready(function () {
            var url = '@Url.Action("GetEmployee", "Employees")';
            $("#CheckNumber").select2({
                minimumInputLength: 4,
                width: 'resolve',
                ajax: {
                    url: url,
                    type: "POST",
                    dataType: 'json',
                    data: function (searchQuery) {
                        return {
                            searchQuery: searchQuery,
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data.employees
                        };
                    }
                }
            });
        });

        $("#CheckNumber").change(function () {
            var url = '@Url.Action("PopulateEmployeeFields","Employees")';
            var checknumber = $("#CheckNumber").val();
            $.ajax({
                type: "POST",
                url: url,
                data: { 'id': checknumber },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        document.getElementById('CheckNumber').value = data.CheckNumber;
                        document.getElementById('ForceNumber').value = data.ForceNumber;
                        document.getElementById('FirstName').value = data.FirstName;
                        document.getElementById('MiddleName').value = data.MiddleName;
                        document.getElementById('LastName').value = data.LastName;
                        document.getElementById('AccountNumber').value = data.AccountNumber;
                        document.getElementById('JobCodeId').value = data.JobCodeId;
                        document.getElementById('DepartmentName').value = data.DepartmentName;
                        document.getElementById('CompanyName').value = data.CompanyName;
                        document.getElementById('WorkstationName').value = data.WorkstationName;
                        document.getElementById('JobCodeName').value = data.JobCodeName;
                    } else {
                        alert('This Employee does not exist!');
                        document.getElementById('CheckNumber').value = "";
                        document.getElementById('ForceNumber').value = "";
                        document.getElementById('FirstName').value = "";
                        document.getElementById('MiddleName').value = "";
                        document.getElementById('LastName').value = "";
                        document.getElementById('AccountNumber').value = "";
                        document.getElementById('JobCodeId').value = "";
                        document.getElementById('DepartmentName').value = "";
                        document.getElementById('CompanyName').value = "";
                        document.getElementById('WorkstationName').value = "";
                        document.getElementById('JobCodeName').value = "";
                    }
                }
            })
        });

        $("#EarningJobCodeMapId").change(function () {
            debugger
            var url = "@Url.Action("PopulateAmount", "Employees")";
            var earningJobCodeMapId = $("#EarningJobCodeMapId").val();
            $.ajax({
                type: "POST",
                url: url,
                data: { earningJobCodeMapId: earningJobCodeMapId },
                success: function (response) {
                    $("#Amount").val(response.amount);
                    $(".number").autoNumeric({ aNeg: "-" }).trigger("change");
                },
                error: function (err) {
                    alert(err.statusText);
                },
            })
        });

        $("#PaymentCodeId").change(function (){
            debugger
            var url = "@Url.Action("PopulateAmount", "Employees")";
            var paymentcodeId = $("#PaymentCodeId").val();
            var jobCodeId = $("#JobCodeId").val();
            $.ajax({
                type: "POST",
                url: url,
                data: { paymentcodeId: paymentcodeId, jobCodeId: jobCodeId },
                success: function (response) {
                    $("#Amount").val(response.amount);
                    $("#EarningJobCodeMapId").val(response.EarningJobCodeMapId);
                },
                error: function (err) {
                    alert(err.statusText);
                },
            })
        });
    </script>
}
