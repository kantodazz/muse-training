@model IFMIS.Areas.PayrollManagement.Models.LoanVM
@{
    ViewBag.Title = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .input {
        border: 1px solid lightgray;
        width: 100%;
        height: 35px;
    }

    .textarea {
        border: 1px solid lightgray;
        width: 100%;
    }

    .input[type="text"]:focus {
        border: 1px solid lightblue;
    }
</style>

<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 5%">
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i></span>
                        <h2 style="color:black;">Employee Deduction</h2>
                    </header>
                    <div class="widget-body" style="padding-top:10px; width:100%;">
                        @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "form" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-horizontal">
                                <div class="form-group"> 
                                    @Html.HiddenFor(model => model.EmployeeDeductionId)
                                    @Html.LabelFor(model => model.FullName, "Employee Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", @readonly = true })
                                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.CheckNumber, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.CheckNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.CheckNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BankAccount, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.BankAccount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.BankAccount, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.SalaryAmount, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.SalaryAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.SalaryAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @Html.HiddenFor(model => model.DedIdentifier)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DeductionCodeId, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.DropDownListFor(model => model.DeductionCodeId, ViewBag.DeductionCodes as SelectList, "Select Deduction Code", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.DeductionCodeId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.LoanAmount, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.LoanAmount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LoanAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MonthlyDeductionAmount, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.MonthlyDeductionAmount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MonthlyDeductionAmount, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.PaybackPeriod, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.PaybackPeriod, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.PaybackPeriod, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.RegistrationNumber, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EditorFor(model => model.RegistrationNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RegistrationNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", style = "width: 235px;" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-3" style="padding-left: 5px">
                                        @Html.EnumDropDownListFor(model => model.Status, "Select--", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <button type="button" class="btn btn-info" id="btnSave" style="float: left">
                                            <span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span>
                                            Save
                                        </button>
                                        <a href="@Url.Action("DeductionList")" class="btn btn-info" style="float: left; margin-left: 5px">
                                            <span class="glyphicon glyphicon-backward" aria-hidden="true"></span>
                                            Back
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@section Scripts{
    <script>
        $('#SalaryAmount').autoNumeric('init');
        $('#LoanAmount').autoNumeric('init');
        $('#MonthlyDeductionAmount').autoNumeric('init');

        $(document).ready(function () {

            var url = '@Url.Action("GetBeneficiaries", "AutomaticEarnings")';

            $("#EmployeeId").select2({
                minimumInputLength: 2, //minimumInputLength for sending ajax request to server
                width: 'resolve', //to adjust proper width of select2 wrapped elements
                ajax: {
                    url: url,
                    type: "POST",
                    dataType: 'json',
                    data: function (searchQuery) {
                        return {
                            searchQuery: searchQuery,
                        };
                    },
                    results: function (data, page) {
                        return { results: data.beneficiaries };
                    }
                }
            });
        });

      $("#EmployeeId").change(function () {
            var url = '@Url.Action("PopulateBeneficiaryFields", "AutomaticEarnings")';
            var beneficiaryId = $("#EmployeeId").val();

            $.ajax({
                type: "POST",
                url: url,
                data: { 'beneficiaryId': beneficiaryId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        document.getElementById('CheckNumber').value = data.beneficiaryCode;
                        document.getElementById('BankName').value = data.bankName;
                        document.getElementById('BankAccount').value = data.bankAccount;
                        document.getElementById('SalaryAmount').value = data.salaryAmount;
                    } else {
                        document.getElementById('CheckNumber').value = "";
                        document.getElementById('BankName').value = "";
                        document.getElementById('SalaryAmount').value = "";
                        document.getElementById('SalaryAmount').value = "";
                    }
                }
            })
        });

        $("#DeductionCodeId").change(function () {
            var dedCodeId = $("#DeductionCodeId").val();
            var url = '@Url.Action("GetDeductionCategory", "Deduction")';

            $.ajax({
                type: "POST",
                url: url,
                data: { dedCodeId: dedCodeId },
                success: function (data, status, jqXHR) {
                    if (data == "D") {
                        document.getElementById('DedIdentifier').value = "D";
                        $("#LoanAmount").prop("readonly", false);
                        $("#PaybackPeriod").prop("readonly", false);
                        $("#LoanAmount").val("");
                        $("#PaybackPeriod").val("");
                    } else {
                        document.getElementById('DedIdentifier').value = "C";
                        $("#LoanAmount").prop("readonly", true);
                        $("#PaybackPeriod").prop("readonly", true);
                    }
                }
            })
        });

function validateLoanAmount() {
    if ($('#DedIdentifier').val() == "D") {
        if ($('#LoanAmount').val() == "" || $('#LoanAmount').val() == null) {
            $('#LoanAmount').addClass('input-validation-error');
            $('#LoanAmount').next('.field-validation-valid').html("Loan Amount is required.");
            $('#PaybackPeriod').addClass('input-validation-error');
            $('#PaybackPeriod').next('.field-validation-valid').html("Payback Period is required.");

            return false;
        } else {
            $('#LoanAmount').removeClass('input-validation-error');
            $('#LoanAmount').next('.field-validation-valid').html("");
            $('#PaybackPeriod').removeClass('input-validation-error');
            $('#PaybackPeriod').next('.field-validation-valid').html("");
        }

    } else {
        $('#LoanAmount').removeClass('input-validation-error');
        $('#LoanAmount').next('.field-validation-valid').html("");
        $('#PaybackPeriod').removeClass('input-validation-error');
        $('#PaybackPeriod').next('.field-validation-valid').html("");
    }

    return true;
}

$("#btnSave").on("click", function () {
    $("#btnSave").attr("disabled", true);

    if (!validateLoanAmount()) {
        $("#btnSave").attr("disabled", false);
        return false;
    }

    $.validator.unobtrusive.parse("#form");
    if (!$("#form").valid()) {
        $("#btnSave").attr("disabled", false);
        return false;
    }

    $("#divLoader").show();

    var token = $("[name='__RequestVerificationToken']").val();

    var formData = new FormData();
    formData.append("__RequestVerificationToken", token);
    formData.append("EmployeeDeductionId", $('#EmployeeDeductionId').val());
    formData.append("DeductionCodeId", $('#DeductionCodeId').val());
    formData.append("LoanAmount", $('#LoanAmount').val());
    formData.append("MonthlyDeductionAmount", $('#MonthlyDeductionAmount').val());
    formData.append("PaybackPeriod", $('#PaybackPeriod').val());
    formData.append("StartDate", $('#StartDate').val());
    formData.append("RegistrationNumber", $('#RegistrationNumber').val());
    formData.append("Status", $('#Status').val());
    formData.append("Remarks", $('#Remarks').val());
    formData.append("DedIdentifier", $('#DedIdentifier').val());

    var url = '@Url.Action("EditDeduction", "Deduction")';
    var url1 = '@Url.Action("DeductionList", "Deduction")';

    $.ajax({
        url: url,
        type: "POST",
        data: formData,
        dataType: "JSON",
        processData: false,
        contentType: false,
        success: function (response) {
            $("#divLoader").hide();
            if (response == "success") {
                swal("Saved Successfully!", { icon: "success" })
                    .then((value) => {
                        window.location.href = url1;
                    })
            }
            else if (response == "Initial balance should be greater") {
                swal("Initial balance should be greater!", { icon: "info" })
                    .then((value) => {
                    })
            }
            else if (response == "Deduction Exist") {
                swal("Deduction exist to this employee!", { icon: "info" })
                    .then((value) => {
                    })
            }
            else {
                swal("Error on saving deduction!", { icon: "error" })
                    .then((value) => {
                    })
            }
        },
        error: function () {
            swal({
                text: "An error occured while processing your request, please contact system support",
                icon: "error",
                button: "OK",
            })
        },
        complete: function () {
            $("#btnSave").attr("disabled", false);
            $("#divLoader").hide();
        }
    });
})
    </script>
}
