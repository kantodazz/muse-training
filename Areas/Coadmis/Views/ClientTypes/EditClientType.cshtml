@model IFMIS.Areas.Coadmis.Models.ClientType
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create Client";
    var i = 0;
}

<div id="divLoader">
</div>
<div id="content">
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                     usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                        -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2> Create Client </h2>
                    </header>
                    <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form method="post" id="form" class="form-horizontal" encytpe="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ClientTypeId, new { htmlAttributes = new { @class = "form-control" } })
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TypeName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TypeName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-8">
                                        (<span style="font-weight:bold;" id="DescriptionCount">500 Characters Remaining</span>)
                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", maxlength = "500" })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-10">
                                            <button type="button" class="btn btn-info" id="btnSave" style="float: left">
                                                <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                                                Save
                                            </button>
                                            <a href="@Url.Action("ClientTypesList")" class="btn btn-default" style="float: left; margin-left: 10px">
                                                <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <!-- end widget content -->
                        </div>
                        <!-- end widget div -->
                    </div>
                    <!-- end widget -->
                </div>
            </article>
        </div>
    </section>
</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">
        $(function () {
            $("#OperationalAmount").autoNumeric('init');
            // This for dynamic table. Don't know why on load but it works
            var attachments = [];

            $("#btnSave").on("click", function () {
            $("#btnSave").attr("disabled", true);
            $.validator.unobtrusive.parse("#form");
            if (!$("#form").valid()) {
                    $("#btnSave").attr("disabled", false);
                    return false;
                }


                $("#divLoader").show();

                var token = $("[name='__RequestVerificationToken']").val();

                var formData = new FormData();

                formData.append("__RequestVerificationToken", token);
                formData.append("ClientTypeId", $('#ClientTypeId').val());
                formData.append("TypeName", $('#TypeName').val());
                formData.append("Description", $('#Description').val());
               
                var url = '@Url.Action("CreateClient", "ClientTypes")';
                $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(Object.fromEntries(formData)),
                data: formData,
                dataType: "JSON",
                //contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                //cache: false,
                processData: false,
                contentType: false,
                success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Client saved successfully!",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                    window.location = '@Url.Action("ClientTypesList", "ClientTypes")';
                                });
                            } else {
                                swal({
                                    text: response,
                                    icon: "warning",
                                    button: "OK",
                                })
                            }
                        },
                error: function () {
                            swal({
                                text: "An error occured while processing your request, please contact system support",
                                icon: "error",
                                button: "OK",
                        })
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
                });
            })
            // End of dynamic table
        });

        $('#Description').on("keyup", function () {
            var count = $('#Description').val().split('');
            var numChars = 500 - parseInt(count.length);
            $('#DescriptionCount').text(parseInt(numChars) + " Characters Remaining");

            if (numChars == 0) {
                $("#Description").addClass("input-has-exceeded");
            } else {
                $("#Description").removeClass("input-has-exceeded");
            }
        });

    </script>
}
