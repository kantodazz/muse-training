@model IFMIS.Areas.Coadmis.Models.ProffessionalAdvisorVM
@{
    ViewBag.Title = "Manage Proffessional Advisors";
    Layout = "~/Views/Shared/_PFLayout.cshtml";
}

<style type="text/css">
    .loadingImg {
        display: none;
    }
</style>
<div id="content" style="margin: 0px 5px; padding-top: 5px">
    <div class="row"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <div class="row">
            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2 id="advisorHeader"> Proffessional Advisor List</h2>
                    </header>

                    <div>

                        <div class="widget-body " style="padding-top:10px;width:100%">
                            @Html.AntiForgeryToken()
                            <div id="tblAdvisorList">
                                <div class="row">
                                    <div class="col-md-6">
                                        <a class="btn btn-info" onclick="showCreateForm()">
                                            <i class="glyphicon glyphicon-plus"></i> Add New
                                        </a>
                                    </div>
                                    <div class="col-md-6"></div>
                                </div>
                                <table class="table  table-bordered table-hover table-condensed" id="dataTableList">
                                    <thead>
                                        <tr>
                                            <th style="text-align:right;width:4%">#</th>
                                            <th style="text-align:left;">Name</th>
                                            <th style="text-align:left;">Type of Service</th>
                                            <th style="text-align:left;">Physical Address</th>
                                            <th style="text-align:left;">Phone No</th>
                                            <th style="text-align:left;">Email</th>
                                            <th style="text-align:center">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div id="advisorEntryForm" style="display: none">
                                <form>
                                     @Html.AntiForgeryToken()

                                    <div class="form-horizontal">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.TypeofServiceId, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.DropDownList("TypeofServiceId", ViewBag.TypeOfServices as SelectList,"Select service type", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.TypeofServiceId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.PhysicalAddress, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.PhysicalAddress, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.PhysicalAddress, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-actions row">
                                        <div class="col-sm-3">
                                            <a class="btn btn-default" onclick="back()"><i class="glyphicon glyphicon-arrow-left"></i> Back</a>
                                            <button class="btn btn-info role-save" onclick="saveAdvisor()">
                                                <i class="fa fa-save"></i>
                                                <img src="~/Content/img/loading.gif" id="saveLoader" />
                                                Save
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div id="advisorEditForm" style="display: none">
                                <form>
                                    @Html.AntiForgeryToken()

                                    <div class="form-horizontal">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        @Html.HiddenFor(model => model.ProffessionalAdvisorId, new { @class = "form-control", @id = "ProffessionalAdvisorId2" })

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @id= "Name2" })
                                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.TypeofServiceId, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.DropDownListFor(model => model.TypeofServiceId, ViewBag.TypeofServices as SelectList, "Select service type", new { @class = "form-control", @id= "TypeofServiceId2" })
                                                @Html.ValidationMessageFor(model => model.TypeofServiceId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.PhysicalAddress, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.PhysicalAddress, new { @class = "form-control", @id= "PhysicalAddress2" })
                                                @Html.ValidationMessageFor(model => model.PhysicalAddress, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", @id= "PhoneNumber2" })
                                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-sm-2" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id="Email2" })
                                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-actions row">
                                        <div class="col-sm-3">
                                            <a class="btn btn-default" onclick="back()"><i class="glyphicon glyphicon-arrow-left"></i> Back</a>
                                            <button class="btn btn-info role-save" onclick="updateAdvisor()">
                                                <i class="fa fa-save"></i>
                                                <img src="~/Content/img/loading.gif" id="saveEditLoader" />
                                                Save
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </article>

        </div>
    </section>

</div>


@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->
    <script type="text/javascript">
        var datatable = $("#dataTableList").dataTable();
        var showCreateForm = function () {
            $("#saveLoader").hide();
            $("#advisorEntryForm").show();
            $("#tblAdvisorList").hide();
            $("#advisorHeader").text("Create Proffessional Advisor");
        };

        function back() {
            window.location.reload();
        }

        //function to reset bootstrap modal popups
        $("#divModal").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass("alert-danger").addClass("alert-info");
            $(".role-save").css("display", "inline-block");
            $("#divModalBody").html("");
        });

        $.ajax({
            type: "get",
            url: '@Url.Action("GetProffessionalAdvisor", "ProffessionalAdvisor")/?fileId='+@ViewBag.fileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatable.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                        datatable.fnAddData([i + 1,
                            data[i]["Name"],
                            data[i]["TypeOfService"],
                            data[i]["PhysicalAddress"],
                            data[i]["PhoneNumber"],
                            data[i]["Email"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                 <span class="caret"></span\
                                     <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="#" onclick="showEditForm('+ data[i]["ProffessionalAdvisorId"] + ',\'' + data[i]["Name"] + '\', \'' + data[i]["TypeOfService"] + '\', \'' + data[i]["PhysicalAddress"] + '\', \'' + data[i]["PhoneNumber"] + '\', \'' + data[i]["Email"]+'\')">Edit</a></li>\
                                    <li><a href="#" onclick="deleteAdvisor('+ data[i]["ProffessionalAdvisorId"] + ')">Delete</a></li>\
                                </ul>\
                            </div>\ '
                        ]);
                }
            },
            failure: function (error)
            {
                swal(error);
            }
        });

        var showEditForm = function (id, name, service, physicalAddress, phoneNo, email) {
            $("#saveEditLoader").hide();

            $("#ProffessionalAdvisorId2").val(id);
            $("#Name2").val(name);
            $("#TypeofServiceId2").text(service);
            $("#PhysicalAddress2").val(physicalAddress);
            $("#PhoneNumber2").val(phoneNo);
            $("#Email2").val(email);

            $("#advisorEditForm").show();
            $("#tblAdvisorList").hide();
            $("#advisorHeader").text("Edit Proffessional Advisor");
        };

        function saveAdvisor() {
            var Name = $("#Name").val();
            var PhysicalAddress = $("#PhysicalAddress").val();
            var TypeOfService = $("#TypeofServiceId").val();
            var PhoneNumber = $("#PhoneNumber").val();
            var Email = $("#Email").val();
            var PermanentFileId = @ViewBag.fileId;
            var Phase = "Permanent File"

            if (Name == '') {
                swal("Please add name");
                return false;
            }

            if (PhysicalAddress == '') {
                swal("Please add physical address");
                return false;
            }

            if (TypeOfService == '') {
                swal("Please select type of service");
                return false;
            }

            if (PhoneNumber == '') {
                swal("Please add phone number");
                return false;
            }

            if (Email == '') {
                swal("Please add email");
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('TypeofServiceId', TypeOfService);
            formData.append('PhysicalAddress', PhysicalAddress);
            formData.append('PhoneNumber', PhoneNumber);
            formData.append('Email', Email);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Phase', Phase);

            postFormData(formData);
        }

        function postFormData(formData) {
            $("#saveLoader").show();
            $("#saveLoader").toggle(true);
            var url = '@Url.Action("create", "ProffessionalAdvisor")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divModal').modal('hide');
                    $("#saveLoader").toggle(true);
                    if (response == "Success") {
                        swal("Advisor created successfully", { icon: "success" })
                            .then((m) => {
                                window.location.reload();
                            });
                    } else if (response == "Duplicate") {
                        swal("Advisor already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveLoader").toggle(false);
                        swal("Failed to create advisor", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function updateAdvisor() {
            var Name = $("#Name2").val();
            var PhysicalAddress = $("#PhysicalAddress2").val();
            var TypeOfService = $("#TypeofServiceId2").val();
            var PhoneNumber = $("#PhoneNumber2").val();
            var Email = $("#Email2").val();
            var PermanentFileId = @ViewBag.fileId;
            var Phase = "Permanent File"
            var Id = $("#ProffessionalAdvisorId2").val();

            if (Name == '') {
                swal("Please add name");
                return false;
            }

            if (PhysicalAddress == '') {
                swal("Please add physical address");
                return false;
            }

            if (TypeOfService == '') {
                swal("Please select type of service");
                return false;
            }

            if (PhoneNumber == '') {
                swal("Please add phone number");
                return false;
            }

            if (Email == '') {
                swal("Please add email");
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('TypeofServiceId', TypeOfService);
            formData.append('PhysicalAddress', PhysicalAddress);
            formData.append('PhoneNumber', PhoneNumber);
            formData.append('Email', Email);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Phase', Phase);
            formData.append('ProffessionalAdvisorId', Id);

            putFormData(formData);
        }

        function putFormData(formData) {
            $("#saveEditLoader").show();
            $("#saveEditLoader").toggle(true);
            var url = '@Url.Action("Edit", "ProffessionalAdvisor")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditModalBody').modal('hide');
                    $("#saveEditLoader").toggle(true);
                    if (response == "Success") {
                        swal("Advisor updated successfully", { icon: "success" })
                            .then((m) => {
                                window.location.reload();
                            });
                    } else if (response == "Duplicate") {
                        swal("Advisor already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Advisor not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditLoader").toggle(false);
                        swal("Failed to update advisor", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function deleteAdvisor(id) {
            swal({
                position: 'top-end',
                text: "Are you Sure you want to delete this advisor",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteData(id);
                } else {
                    swal("Cancelled", "No changes was made");
                }
            });

        }

        function deleteData(id) {
             var url = '@Url.Action("Delete", "ProffessionalAdvisor")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Banker deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.reload();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
    </script>
}




