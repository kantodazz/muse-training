@model IFMIS.Areas.Coadmis.DTO.ClientInformationVM
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create Client";
    var i = 0;
}
<div id="divLoader"></div>
<div id="content">
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2> Client Information </h2>
                    </header>
                    <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form method="post" id="form" class="form-horizontal" encytpe="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.RequireSpecification)
                                @Html.HiddenFor(model => model.ClientNumber)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ClientTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ClientTypeId, ViewBag.ClientType as SelectList, "Select Client type", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.ClientTypeId, "", new { @class = "text-danger" })
                                    </div>                      
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ClientCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ClientCategoryId, ViewBag.ClientCategory as SelectList, "Select Category", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.ClientCategoryId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.CategoryLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.CategoryLevel, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.CategoryLevel, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group" style="display:none" id="class">
                                    @Html.LabelFor(model => model.SaccosClassId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.SaccosClassId, ViewBag.Class as SelectList, "Select Class", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.SaccosClassId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.ClientCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ClientCode, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ClientCode, "", new { @class = "text-danger" })
                                    </div>*@
                                    @Html.LabelFor(model => model.RegistrationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.RegistrationNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RegistrationNumber, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ClientAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ClientAddress, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ClientAddress, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.RegionId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.RegionId, ViewBag.Region as SelectList, "Select Region", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.RegionId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.DistrictId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.DistrictId, new SelectList(""), "Select District", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.DistrictId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.WardId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.WardId, new SelectList(""), "Select Ward", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.WardId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.RegistrationDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.RegistrationDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RegistrationDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.AccountingPeriod, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.AccountingPeriod, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.AccountingPeriod, "", new { @class = "text-danger" })
                                    </div>*@                    
                                    @Html.LabelFor(model => model.OperationstatusId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.OperationstatusId, ViewBag.Operation as SelectList, "Select operational status", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.OperationstatusId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.TINnumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.TINnumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TINnumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.VATNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.VATNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.VATNumber, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.CommonBond, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.CommonBond, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CommonBond, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.MainPlaceOfBusiness, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.MainPlaceOfBusiness, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MainPlaceOfBusiness, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.FinancialYearStart, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.FinancialYearStart, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.FinancialYearStart, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.FinancialYearEnd, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.FinancialYearEnd, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.FinancialYearEnd, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.NumberOfBranches, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.NumberOfBranches, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NumberOfBranches, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.AssociateCompanyId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.AssociateCompanyId, ViewBag.Association as SelectList, "Select--", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.AssociateCompanyId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                   
                                    <div style="display:none" id="reasons">
                                        <div id="Specifyreasons">
                                            @Html.LabelFor(model => model.Specify, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-4">
                                                (<span style="font-weight:bold;" id="SpecifyCount">500 Characters Remaining</span>)
                                                @Html.TextAreaFor(model => model.Specify, new { @class = "form-control", maxlength = "500" })
                                                @Html.ValidationMessageFor(model => model.Specify, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-10">
                                            <button type="button" class="btn btn-info" id="btnSave" style="float: left">
                                                <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                                                Save
                                            </button>
                                            <a href="@Url.Action("ClientInformationlist")" class="btn btn-default" style="float: left; margin-left: 10px">
                                                <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <!-- end widget content -->
                        </div>
                        <!-- end widget div -->
                    </div>
                    <!-- end widget -->
                </div>
            </article>
        </div>
    </section>
</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">

        $('#FinancialYearEnd').change(function () {
            debugger
            var startDate = new Date($('#FinancialYearStart').val());
            var endDate = new Date($('#FinancialYearEnd').val());

        if (startDate > endDate) {
            swal({
                text: "Financial Year Start should be greater than Financial Year End",
                icon: "info",
                button: "OK",
            })
            $('#FinancialYearEnd').val('');
          }
        });

        $('#ClientCategoryId').change(function () {
            debugger
            clientCategoryId = $("#ClientCategoryId").val();

            if (clientCategoryId == 3) {
                $("#class").show();
            } else {
                $("#class").hide();
            }
            //getClientCode(clientCategoryId);
        });

        function getClientCode(id) {

            $("#divLoader").show();

                var url = '@Url.Action("GetClientCode", "ClientInformations")';

                $.ajax({
                    type: "GET",
                    url: url,
                    data: { id: id },
                    success: function (data, status, jqXHR) {
                        if (data.success) {
                            $("#ClientCode").val(data.client);
                            $("#ClientNumber").val(data.clientNumber);
                        } else {
                            swal({
                                text: "An error occurred while processing your request, contact system support",
                                icon: "warning",
                                button: "OK",
                            })
                        };
                    },
                    error: function () {
                        swal({
                            text: "An error occurred while processing your request, contact system support",
                            icon: "error",
                            button: "OK",
                        });
                    },
                    complete: function () {
                        $("#divLoader").hide();
                    }
                });
        }

        $(function () {
          $("#btnSave").on("click", function () {
              $("#btnSave").attr("disabled", false);
              debugger
            $.validator.unobtrusive.parse("#form");
            if (!$("#form").valid()) {
                $("#btnSave").attr("disabled", false);
                    return false;
                }

                $("#divLoader").show();

                var token = $("[name='__RequestVerificationToken']").val();
                var formData = new FormData();

              formData.append("__RequestVerificationToken", token);
              formData.append("ClientName", $('#ClientName').val());
              formData.append("ClientTypeId", $('#ClientTypeId').val());
              formData.append("ClientCategoryId", $('#ClientCategoryId').val());
              formData.append("CategoryLevel", $('#CategoryLevel').val());
              formData.append("RegistrationNumber", $('#RegistrationNumber').val());
              formData.append("RequireSpecification", $('#RequireSpecification').val());
              formData.append("ClientAddress", $('#ClientAddress').val());
              formData.append("OperationstatusId", $('#OperationstatusId').val());
              formData.append("RegistrationDate", $('#RegistrationDate').val());
              formData.append("TINnumber", $('#TINnumber').val());
              formData.append("VATNumber", $('#VATNumber').val());
              formData.append("CommonBond", $('#CommonBond').val());
              formData.append("EmailAddress", $('#EmailAddress').val());
              formData.append("MainPlaceOfBusiness", $('#MainPlaceOfBusiness').val());
              formData.append("AssociateCompanyId", $('#AssociateCompanyId').val());
              formData.append("Specify", $('#Specify').val());
              formData.append("OperationstatusId", $('#OperationstatusId').val());
              formData.append("NumberOfBranches", $('#NumberOfBranches').val());
              formData.append("ClientCategoryId", $('#ClientCategoryId').val());
              formData.append("RegionId", $('#RegionId').val());
              formData.append("DistrictId", $('#DistrictId').val());
              formData.append("WardId", $('#WardId').val());
              formData.append("CategoryLevel", $('#CategoryLevel').val());
            //formData.append("AccountingPeriod", $('#AccountingPeriod').val());
              formData.append("ClientCode", $('#ClientCode').val());
              formData.append("SaccosClassId", $('#SaccosClassId').val());
              formData.append("FinancialYearStart", $('#FinancialYearStart').val());
              formData.append("FinancialYearEnd", $('#FinancialYearEnd').val());
              formData.append("ClientNumber", $('#ClientNumber').val());

                var url = '@Url.Action("CreateClientInformation", "ClientInformations")';
                $.ajax({
                url: url,
                type: "POST",
                //data:JSON.stringify(Object.fromEntries(formData)),
                data: formData,
                dataType: "JSON",
                //contentType:'application/x-www-form-urlencoded; charset=utf-8',
                //cache: false,
                processData: false,
                contentType: false,
                success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Client saved successfully!",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                    window.location = '@Url.Action("ClientInformationlist", "ClientInformations")';
                                });
                            } else if (response == "Client Exist") {
                                swal({
                                    text: "Client Already Exist!",
                                    icon: "info",
                                    button: "OK",
                                }).then(function () {
                                    
                                });
                            }
                            else {
                                swal({
                                    text: response,
                                    icon: "warning",
                                    button: "OK",
                                })
                            }
                        },
                error: function () {
                            swal({
                                text: "An error occured while processing your request, please contact system support",
                                icon: "error",
                                button: "OK",
                        })
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
                });
            })
        });

        $("#RegionId").change(function() {
            debugger
            var regionId = $(this).val();
             $("#divLoader").show();
            var url = '@Url.Action("GetDistrict", "ClientInformations")';
            var params = { "regionId": regionId };

            $.ajax({
                type: "POST",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function(response){
                    console.log(response);
                    $("#DistrictId").empty();
                    $("#DistrictId").append(response);
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
            })
         });

        $("#DistrictId").change(function() {
            debugger
            var districtId = $(this).val();
            $("#divLoader").show();
            var url = '@Url.Action("GetWard", "ClientInformations")';
            var params = { "districtId": districtId };

            $.ajax({
                type: "POST",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function(response) {
                    console.log(response);
                    $("#WardId").empty();
                    $("#WardId").append(response);
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
            })
        });

        $('#Specify').on("keyup", function () {
            var count = $('#Specify').val().split('');
            var numChars = 500 - parseInt(count.length);
            $('#SpecifyCount').text(parseInt(numChars) + "Characters Remaining");

            if (numChars == 0) {
                $("#Specify").addClass("input-has-exceeded");
            } else {
                $("#Specify").removeClass("input-has-exceeded");
            }
        });

        $("#ClientCategoryId").change(function() {

            var id = $("#ClientCategoryId").val();

            $("#divLoader").show();
            if (id != 3) {
                var url = '@Url.Action("GetClientCategories", "ClientInformations")';

                $.ajax({
                    type: "GET",
                    url: url,
                    data: { id: id },
                    success: function (data, status, jqXHR) {
                        if (data.success) {
                            $("#CategoryLevel").val(data.CategoryLevel);
                        } else {
                            swal({
                                text: "An error occurred while processing your request, contact system support",
                                icon: "warning",
                                button: "OK",
                            })
                        };
                    },
                    error: function () {
                        swal({
                            text: "An error occurred while processing your request, contact system support",
                            icon: "error",
                            button: "OK",
                        });
                    },
                    complete: function () {
                        $("#divLoader").hide();
                    }
                });
            } else {
                $("#CategoryLevel").val('');
            }

            $("#divLoader").hide();
        });

        $("#SaccosClassId").change(function() {
            var saccosClassId = $("#SaccosClassId").val();
            var clientCategoryId = $("#ClientCategoryId").val();

            var url = '@Url.Action("GetSaccosClass", "ClientInformations")';
            $("#divLoader").show();
            $.ajax({
                type: "GET",
                url: url,
                data: { saccosClassId: saccosClassId, clientCategoryId: clientCategoryId },
                success: function(data, status, jqXHR) {
                    if (data.success) {
                        $("#CategoryLevel").val(data.LevelName);
                    } else {
                        swal({
                            text: "An error occurred while processing your request, contact system support",
                            icon: "warning",
                            button: "OK",
                        })
                    };
                },
                error: function() {
                    swal({
                        text: "An error occurred while processing your request, contact system support",
                        icon: "error",
                        button: "OK",
                    });
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            });
        });

        $("#AssociateCompanyId").change(function () {
            debugger
            var associateCompanyId = $("#AssociateCompanyId").val();
            if (associateCompanyId == "1") {
                $("#RequireSpecification").val(true);
                $("#Specifyreasons").show();
                $("#reasons").show();
            } else {
                $("#RequireSpecification").val(false);
                $("#Specifyreasons").hide();
                $("#reasons").hide();
            }
        });

    </script>
}
