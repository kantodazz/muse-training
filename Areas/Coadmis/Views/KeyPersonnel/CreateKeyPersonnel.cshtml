@model IFMIS.Areas.Coadmis.Models.KeyPersonnel
@{
    ViewBag.Title = "Create Key Personnel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .loadingImg {
        display: none;
    }

    body {
        margin-top: 40px;
    }
    .search-btn {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 5px;
        padding-right: 10px;
    }

    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }

    .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }

    .search-icon {
        padding: 0.5rem;
    }

    .search-button {
        background: #538AC5;
        border: 0;
        color: white;
        padding: 8px;
        border-radius: 0;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        width: 205px;
    }

    input[type=text] {
        padding: 5px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    #itemUL li {
        margin-left: -40px;
        border-bottom: 1px solid silver;
        height: 26px;
        padding-left: 5px;
        padding-top: 8px;
        cursor: pointer;
    }

    .redStar {
        color: red;
        font-size: 15px;
    }
</style>
<div id="content" style="margin: 5px; padding-top: 50px">
    <div class="row"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <div class="row">
            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> @ViewBag.Title</h2>
                    </header>
                    <div class="widget-body">
                        <div class="row">
                            @*<form method="post" id="form" class="form-horizontal" encytpe="multipart/form-data">*@
                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.TextBoxFor(model => model.FirstName, "", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PhoneNumber, "", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Nationality, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.TextBoxFor(model => model.Nationality, "", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Nationality, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.NIDANo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.NIDANo, "", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.NIDANo, "", new { @class = "text-danger" })
                                    </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EducationLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownList("EducationLevel", ViewBag.EducationLevel as SelectList, "Select level of education", new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(model => model.EducationLevel, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.CategoryTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownList("CategoryTypeId", ViewBag.CategoryTypes as SelectList, "Select category type", new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(model => model.CategoryTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <select id="Position" name="Position" class="form-control select2" required="required">
                                                <option>Select position</option>
                                            </select>
                                            @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="control-label col-md-2">Current Position?</label>
                                        <div class="col-md-3">
                                            <select id="isCurrentPosition" name="isCurrentPosition" class="form-control select2">
                                                <option>select choice</option>
                                                <option value="Yes">Yes</option>
                                                <option value="No">No</option>
                                            </select>
                                            @Html.ValidationMessageFor(model => model.isCurrentPosition, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                        </div>
                                        <div id="divEndDate">
                                            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.OperationalStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownList("OperationalStatus", ViewBag.OperationalStatus as SelectList, "Select status", new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(model => model.OperationalStatus, "", new { @class = "text-danger" })
                                        </div>
                                        @*@Html.LabelFor(model => model.ClientInformationId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownList("ClientInformationId", ViewBag.Clients as SelectList, "Select client", new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(model => model.ClientInformationId, "", new { @class = "text-danger" })
                                        </div>*@
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.OperationalDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-8">
                                            @Html.TextAreaFor(model => model.OperationalDescription, new { @class = "form-control ", @rows = 5 })
                                            @Html.ValidationMessageFor(model => model.OperationalDescription, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                           @* </form>*@
                            <div class="form-actions row" style="margin: 10px">
                                <div class="col-md-2"></div>
                                <div class="col-md-3">
                                    <a class="btn btn-default" href="@Url.Action("FileContent", "PermanentFile")/?id=@ViewBag.PermanentFileId"><i class="glyphicon glyphicon-arrow-left"></i> Back</a>
                                    <button class="btn btn-info" id="savePersonnel">
                                        <i class="fa fa-save"></i>
                                        <img src="~/Content/img/loading.gif" id="saveLoader" />
                                        Save
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@section pagespecific {
    <script>

        $("#saveLoader").toggle(false);

        $('#CategoryTypeId').change(function () {
            debugger;
            var option = [];
            var selectedValue = $('#CategoryTypeId').val();
            var url = '@Url.Action("GetPositions", "KeyPersonnel")/?id='+ selectedValue;
            $.ajax({
                url: url,
                type: 'GET',
                success: function (response) {
                    option.empty;
                    option.push('<option value="">Select Position</option>');
                    response.data.forEach(d => {
                        option.push('<option value=' + d["CategoryTypeId"] + '>' + d["Position"] + '</option>');
                    });
                    option = option.toString().replace(",", "").replace("[", "").replace("]", "");
                    $("#Position").html(option);
                },
                failure: function (error) {
                    swal(error);
                }
            });
        });

        $('#isCurrentPosition').change(function () {
            if ($('#isCurrentPosition').val() == 'Yes') {
                $("#divEndDate").hide();
            } else {
                $("#divEndDate").show();
            }
        });

        $("#savePersonnel").on("click", function () {
            var FirstName = $("#FirstName").val();
            var LastName = $("#LastName").val();
            var DateOfBirth = $("#DateOfBirth").val();
            var PhoneNumber = $("#PhoneNumber").val();
            var Nationality = $("#Nationality").val();
            var NIDANo = $("#NIDANo").val();
            var EducationLevel = $("#EducationLevel").val();
            var CategoryType = $("#CategoryTypeId").val();
            var Position = $("#Position").val();
            var StartDate = $("#StartDate").val();
            var EndDate = $("#EndDate").val();
            var OperationalStatus = $("#OperationalStatus").val();
            //var ClientInformationId = $("#ClientInformationId").val();
            var OperationalDescription = $("#OperationalDescription").val();
            var isCurrentPosition = $("#isCurrentPosition").val();
            var PermanentFileId = @ViewBag.PermanentFileId;

            if (isCurrentPosition == "No") {
                if ((Date.parse(EndDate) <= Date.parse(StartDate))) {
                    swal("End date should be greater than Start date", { icon: "warning" });
                    document.getElementById("EndDate").value = "";
                    return false;
                }
            }

            if (FirstName == "" || FirstName == null) {
                swal("Please enter first name", { icon: "warning" });
                return false;
            }

            if (LastName == "" || LastName == null) {
                swal("Please enter last name", { icon: "warning" });
                return false;
            }

            //if (DateOfBirth == "" || DateOfBirth == null) {
            //    swal("Please select date of birth", { icon: "warning" });
            //    return false;
            //}

            if (Position == "" || Position == null) {
                swal("Please select position", { icon: "warning" });
                return false;
            }

            if (CategoryType == "" || CategoryType == null) {
                swal("Please select category type", { icon: "warning" });
                return false;
            }

            if (Nationality == "" || Nationality == null) {
                swal("Please enter nationality", { icon: "warning" });
                return false;
            }

            if (EducationLevel == "" || EducationLevel == null) {
                swal("Please select education level", { icon: "warning" });
                return false;
            }

            if (StartDate == "" || StartDate == null) {
                swal("Please select start date", { icon: "warning" });
                return false;
            }

            if (OperationalStatus == "" || OperationalStatus == null) {
                swal("Please select operational status", { icon: "warning" });
                return false;
            }

            if (OperationalDescription == "" || OperationalDescription == null) {
                swal("Please enter operational description", { icon: "warning" });
                return false;
            }

            var formData = new FormData();
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('FirstName', FirstName);
            formData.append('LastName', LastName);
            formData.append('DateOfBirth', DateOfBirth);
            formData.append('PhoneNumber', PhoneNumber);
            formData.append('Nationality', Nationality);
            formData.append('NIDANo', NIDANo);
            formData.append('EducationLevel', EducationLevel);
            formData.append('Position', Position);
            formData.append('CategoryTypeId', CategoryType);
            formData.append('StartDate', StartDate);
            formData.append('EndDate', EndDate);
            formData.append('OperationalStatus', OperationalStatus);
            formData.append('OperationalDescription', OperationalDescription);
            /* formData.append('ClientInformationId', ClientInformationId);*/
            formData.append('isCurrentPosition', isCurrentPosition);
            formData.append('PermanentFileId', PermanentFileId);

            postFormData(formData);
        });

        function postFormData(formData) {
             $(".saveLoader").show();
             $(".saveLoader").toggle(true);
             var url = '@Url.Action("CreatePersonnel", "KeyPersonnel")';
             var urlReturn = '@Url.Action("FileContent", "PermanentFile")/?id='+@ViewBag.PermanentFileId;

            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    debugger;
                    console.log('Response', response);
                    $(".saveLoader").toggle(true);
                    if (response == "Success") {
                        swal("Saved Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location = urlReturn;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" });
                        return false;
                    } else {
                        $(".saveLoader").toggle(false);
                        swal("Failed to create key personnel", { icon: "warning" });
                        return false;
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }
    </script>
}
