@model IFMIS.Areas.Coadmis.Models.KeyPersonnelVM
@{
    ViewBag.Title = "Edit Key Personnel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="divLoader"></div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">


        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>
    <!-- widget grid -->
    <section id="widget-grid" class="">

        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> @ViewBag.Title</h2>
                    </header>

                    <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <div class="row">
                                @*@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formKeyPersonnel" }))
                                    {*@
                       
                                    @Html.AntiForgeryToken()

                                    <div class="form-horizontal">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(model => model.KeyPersonId)
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(model => model.FirstName, "", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(model => model.LastName, "", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(model => model.PhoneNumber, "", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Nationality, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(model => model.Nationality, "", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Nationality, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.NIDANo, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(model => model.NIDANo, "", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.NIDANo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.EducationLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.EducationLevel, Model.EducationLevels, "Select level of education", new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(model => model.EducationLevel, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.CategoryTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.CategoryTypeId, Model.CategoryTypes, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(model => model.CategoryTypeId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.PositionId, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.PositionId, Model.Positions, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(model => model.PositionId, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="control-label col-md-2">Current Position?</label>
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.isCurrentPosition, Model.PositionStatus, new { @class = "form-control select2" })
                                                @Html.ValidationMessageFor(model => model.isCurrentPosition, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                            </div>
                                            <div id="divEndDate">
                                                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.OperationalStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.OperationalStatus, Model.OperationalStatuses, "Select status", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.OperationalStatus, "", new { @class = "text-danger" })
                                            </div>
                                            @*@Html.LabelFor(model => model.ClientInformationId, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.DropDownList("ClientInformationId", ViewBag.Clients as SelectList, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.ClientInformationId, "", new { @class = "text-danger" })
                                            </div>*@
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.OperationalDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-8">
                                                @Html.TextAreaFor(model => model.OperationalDescription, new { @class = "form-control ", @rows = 5 })
                                                @Html.ValidationMessageFor(model => model.OperationalDescription, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-actions row" style="margin: 10px">
                                        <div class="col-md-2"></div>
                                        <div class="col-md-3">
                                            <a class="btn btn-default" href="@Url.Action("FileContent", "PermanentFile")/?id=@Model.PermanentFileId"><i class="glyphicon glyphicon-arrow-left"></i> Back</a>
                                            <button type="submit" name="submit" class="btn btn-info" id="savePersonnel">
                                                <i class="fa fa-save"></i>
                                                <img src="~/Content/img/loading.gif" id="saveEditLoader" />
                                                Save
                                            </button>
                                        </div>
                                    </div>
                                
                                @*}*@
                            </div>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->
                </div>
                <!-- end widget -->
            </article>
            <!-- END COL -->
        </div>

        <!-- END ROW -->
    </section>
    <!-- end widget grid -->
</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script>
        $("#saveEditLoader").hide();
        $(document).ready(function () {
            $('#DateOfBirth').datepicker({
                dateFormat: "dd/mm/yy",
                showStatus: true,
                showWeeks: true,
                currentText: 'Now',
                autoSize: true,
                gotoCurrent: true,
                showAnim: 'blind',
                highlightWeek: true
            });

            $('#StartDate').datepicker({
                dateFormat: "dd/mm/yy",
                showStatus: true,
                showWeeks: true,
                currentText: 'Now',
                autoSize: true,
                gotoCurrent: true,
                showAnim: 'blind',
                highlightWeek: true
            });

            $('#EndDate').datepicker({
                dateFormat: "dd/mm/yy",
                showStatus: true,
                showWeeks: true,
                currentText: 'Now',
                autoSize: true,
                gotoCurrent: true,
                showAnim: 'blind',
                highlightWeek: true
            });

            if ($('#isCurrentPosition').val() == 'Yes') {
                $("#divEndDate").hide();
            }
            else {
                $("#divEndDate").show();
            }
        });

        $('#CategoryTypeId').change(function () {
                var option = [];
                var selectedValue = $('#CategoryTypeId').val();
                var url = '@Url.Action("GetPositions", "KeyPersonnel")/?id='+ selectedValue;
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (response) {
                        option.empty;
                        option.push('<option value="">Select Position</option>');
                        response.data.forEach(d => {
                            option.push('<option value=' + d["CategoryTypeId"] + '>' + d["Position"] + '</option>');
                        });
                        option = option.toString().replace(",", "").replace("[", "").replace("]", "");
                        $("#PositionId").html(option);
                    },
                    failure: function (error) {
                        swal(error);
                    }
                });
            });

        $('#isCurrentPosition').change(function () {
            if ($('#isCurrentPosition').val() == 'Yes') {
                $("#divEndDate").hide();
            }
            else {
                $("#divEndDate").show();
            }
        });

        $("#savePersonnel").on("click", function () {
            debugger
            var FirstName = $("#FirstName").val();
            var LastName = $("#LastName").val();
            var KeyPersonId = $("#KeyPersonId").val();
            var DateOfBirth = $("#DateOfBirth").val();
            var PhoneNumber = $("#PhoneNumber").val();
            var Nationality = $("#Nationality").val();
            var NIDANo = $("#NIDANo").val();
            var EducationLevel = $("#EducationLevel").val();
            var CategoryType = $("#CategoryTypeId").val();
            var PositionId = $("#PositionId").val();
            var StartDate = $("#StartDate").val();
            var EndDate = $("#EndDate").val();
            var OperationalStatus = $("#OperationalStatus").val();
            var OperationalDescription = $("#OperationalDescription").val();
            var isCurrentPosition = $("#isCurrentPosition").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (isCurrentPosition == "No") {
                if ((Date.parse(EndDate) <= Date.parse(StartDate))) {
                    swal("End date should be greater than Start date", { icon: "warning" });
                    document.getElementById("EndDate").value = "";
                    return false;
                }
            }

            if (FirstName == "" || FirstName == null) {
                swal("Please enter first name");
                return false;
            }

            if (LastName == "" || LastName == null) {
                swal("Please enter last name");
                return false;
            }

            if (DateOfBirth == "" || DateOfBirth == null) {
                swal("Please select date of birth");
                return false;
            }

            if (PositionId == "" || PositionId == null) {
                swal("Please select position");
                return false;
            }

            if (CategoryType == "" || CategoryType == null) {
                swal("Please select category type");
                return false;
            }

            if (Nationality == "" || Nationality == null) {
                swal("Please enter nationality");
                return false;
            }

            if (EducationLevel == "" || EducationLevel == null) {
                swal("Please select education level");
                return false;
            }

            if (StartDate == "" || StartDate == null) {
                swal("Please select start date");
                return false;
            }

            if (OperationalStatus == "" || OperationalStatus == null) {
                swal("Please select operational status");
                return false;
            }

            if (OperationalDescription == "" || OperationalDescription == null) {
                swal("Please enter operational description");
                return false;
            }

            var formData = new FormData();
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('FirstName', FirstName);
            formData.append('LastName', LastName);
            formData.append('DateOfBirth', DateOfBirth);
            formData.append('PhoneNumber', PhoneNumber);
            formData.append('Nationality', Nationality);
            formData.append('NIDANo', NIDANo);
            formData.append('EducationLevel', EducationLevel);
            formData.append('PositionId', PositionId);
            formData.append('CategoryTypeId', CategoryType);
            formData.append('StartDate', StartDate);
            formData.append('EndDate', EndDate);
            formData.append('OperationalStatus', OperationalStatus);
            formData.append('OperationalDescription', OperationalDescription);
            formData.append('KeyPersonId', KeyPersonId);
            formData.append('isCurrentPosition', isCurrentPosition);
            formData.append('PermanentFileId', PermanentFileId);

            postFormData(formData);
        });

        function postFormData(formData) {
            debugger;
            $("#saveEditLoader").show();
             var url = '@Url.Action("EditPersonnel", "KeyPersonnel")';
             var urlReturn = '@Url.Action("FileContent", "PermanentFile")/?id='+'@Model.PermanentFileId';

            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    debugger;
                    $("#saveEditLoader").show();
                    if (response == "Success") {
                        swal("Key Personnel updated successfully", { icon: "success" }).then((m) => {
                            window.location.replace(urlReturn);
                        });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" });
                        return false;
                    } else {
                        $("#saveEditLoader").hide();
                        swal("Failed to updated key personnel", { icon: "warning" });
                        return false;
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
    </script>
}
