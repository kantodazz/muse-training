@model IFMIS.Areas.Coadmis.Models.FieldWorkSummary

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .search-btn {
        border: 1px dashed #ccc;
        border-radius: 4px;
        padding: 5px;
        padding-right: 10px;
    }

    .submit-btn {
        background-color: white;
        color: black;
        border: 1px solid #538AC5;
        border-radius: 12px;
        padding: 3px;
        padding-right: 10px;
    }

    .searchContainer {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
    }

    .searchIcon {
        padding: 0.5rem;
    }

    .searchBox {
        border: 0;
        /*padding: 0.5rem 0.5rem 0.5rem 0;*/
        padding: 8px;
        flex: 1;
    }

    .searchButton {
        background: #538AC5;
        border: 0;
        color: white;
        /*padding: 0.5rem;*/
        padding: 8px;
        border-radius: 0;
    }

    input[type=text] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        resize: vertical;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    .action-btn {
        width: 100px;
        border-radius: 10px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }


    .modal-header {
        padding: 9px 15px;
        border-bottom: 1px solid #eee;
        background-color: #0480be;
        -webkit-border-top-left-radius: 5px;
        -webkit-border-top-right-radius: 5px;
        -moz-border-radius-topleft: 5px;
        -moz-border-radius-topright: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    .alert-secondary {
        background-color: lightgrey;
        color: black;
    }
</style>

<div id="content" style="margin: 5px; padding-top: 30px">
    <div id="divLoader"></div>
    <br />
    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!----->
        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <div class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>

                        <h2>  Field Work </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "fieldWorkForm", enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    @Html.HiddenFor(model => model.FieldWorkSummaryId)
                                    @Html.HiddenFor(model => model.AuditableAreaId)
                                    @Html.HiddenFor(model => model.ClientId)
                                    @Html.HiddenFor(model => model.EngagementId)
                                    @Html.HiddenFor(model => model.Status)
                                    @Html.HiddenFor(model => model.StatusDescription)
                                    @Html.HiddenFor(model => model.ReferenceNo)
                                    @Html.HiddenFor(model => model.FinancialYear)
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.Label("Assigned Auditable Area", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-8">
                                            @Html.DropDownList("assignedEngagementId", Model.AuditableAreas, new { @class = "form-control" })

                                            @*<select class="form-control select2" id="assignedEngagementId">
                                                                                                    @foreach (var item in Model.AuditPrograms)
                                                                                                    {
                                                                                                        <option value="@item.Value">@item.Text</option>
                                                r
                                                                                                    }
                                                                                                </select>*@

                                            @Html.ValidationMessageFor(model => model.AuditableArea, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AuditableArea, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(model => model.AuditableArea, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            @*@Html.HiddeNF(model => model.ClientName, new { htmlAttributes = new { @class = "form-control",@readonly="readonly" } })*@
                                            @Html.ValidationMessageFor(model => model.AuditableArea, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            @*@Html.HiddeNF(model => model.ClientName, new { htmlAttributes = new { @class = "form-control",@readonly="readonly" } })*@
                                            @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.EngagementName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.EngagementName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.EngagementName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @*<div class="form-group">
                                            @Html.LabelFor(model => model.AuditableArea, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.AuditableArea, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.AuditableArea, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.Label("Audit FinancialYear", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.FinancialYear, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.ExecutionType, "", new { @class = "text-danger" })
                                            </div>
                                        </div>*@

                                    <div class="form-group">
                                        @Html.Label("Audit Program", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <a class="search-btn" onclick="AddProgramItems()" id="searchbtn" href="#" style="display:block;border:1px solid #ccc;padding:8px">
                                                <i class="fa fa-search search-icon"></i> &nbsp;
                                                Add Auditable Item(s) <strong id="added_programs"></strong>
                                            </a>
                                            <input type="hidden" id="totalItems" />
                                        </div>

                                        @Html.Label("Lead Schedule", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <a class="search-btn" onclick="AddLeadSchedule()" id="searchbtn" href="#" style="display:block;border:1px solid #ccc;padding:8px">
                                                <i class="fa fa-search search-icon"></i> &nbsp;
                                                Lead Schedule(s) <strong id="added_ls"></strong>
                                            </a>
                                            <input type="hidden" id="totalItems" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Summary of Findings", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <a class="search-btn" onclick="ShowAddFindings()" id="searchbtn" href="#" style="display:block;border:1px solid #ccc;padding:8px">
                                                <i class="fa fa-search search-icon"></i> &nbsp;
                                                Add Finding(s) <strong id="added_finding"></strong>
                                            </a>
                                            <input type="hidden" id="totalItems" />
                                        </div>

                                        @Html.Label("Attachments", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <a class="search-btn" onclick="ShowAddAttachment()" id="searchbtn" href="#" style="display:block;border:1px solid #ccc;padding:8px">
                                                <i class="fa fa-paperclip"></i> &nbsp;
                                                Add Attachment(s) <strong id="added_attachments"></strong>
                                            </a>
                                            <input type="hidden" id="totalItems" />
                                        </div>
                                    </div>

                                    @*<div class="form-group">
                                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.LabelFor(model => model.TotalItems, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.TotalItems, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.TotalItems, "", new { @class = "text-danger" })
                                            </div>
                                        </div>*@

                                    @*<table id="dt_voucher_detail" class="table table-striped table-bordered table-hover table-condensed" width="100%"></table>*@

                                    <br />
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <a href="@Request.UrlReferrer" style="margin-right:5px" type="button" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                                            <button class="btn btn-info" id="saveBtn" type="button" style="float: left">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }




                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>


<!-------------ADD ATTACHMENT MODAL ----------->

<div class="modal fade" id="AddAttachment" style="left:4%">
    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content">
            <div class="modal-header alert alert-info">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Attachments </h3>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-6">
                        <div style="padding-left:5%;padding-right:1%">

                            <table style="margin-left: 2%;padding:4px">
                                <tr>
                                    <td>
                                        Attachment Name
                                        <i class="fa fa-times" style="color:white" id="Name_1"></i>
                                    </td>
                                    <td style="width:50px"></td>
                                    <td>
                                        &nbsp;&nbsp;&nbsp;
                                        File
                                    </td>
                                    <td></td>
                                </tr>
                                <tr>
                                    <td style="width:900px">
                                        <div class="name-input-container">
                                            <input type="text" class="form-control" id="AttachmentName" style="width:400px" />
                                        </div>
                                    </td>
                                    <td style="width:50px"></td>
                                    <td style="width:1000px">
                                        <div class="name-input-container">
                                            <input type="file" class="form-control" name="FileName" id="FileName" accept=".pdf" style="width:300px" />
                                        </div>
                                    </td>
                                    <td style="width:50px"></td>
                                    <td>
                                        <div class="name-input-container">
                                            <a class="btn btn-info" href="#" onclick="addAttachments()">
                                                <i class="glyphicon glyphicon-plus"></i>Add
                                            </a>
                                        </div>
                                    </td>
                                </tr>


                            </table>
                        </div>
                    </div>

                </div>
                <br />
                <table class="table" id="dt_attachments">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Attachment Name</th>
                            <th>File Name</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-save"></i>Save
                </button>
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>
<!------------------END ADD ATTACHMENT MODAL--------------->
<!-------------ADD FINDINGS MODAL ----------->

<div class="modal fade" id="AddFindings" style="left:4%">
    <div class="modal-dialog" style="width:75%;">
        <div class="modal-content">
            <div class="modal-header alert alert-info">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Summary of Findings </h3>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "fieldWorkForm", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    <div class="form-group">
                        @Html.Label("Finding Nature", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            @Html.DropDownList("FindingNature", Model.FindingNature, new { @class = "form-control" })
                        </div>

                        @Html.Label("Finding Category", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            <select class="form-control select2" id="findingCategory">
                                <option> Select Category </option>
                            </select>
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.Label("Opinion Basis", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <select class="form-control select2" id="opinionBasis">
                                <option> Select Opinion </option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Finding Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @*<textarea id="FindingName" name="FindingName"> </textarea>*@
                            <input type="text" class="form-control" name="FindingName" id="FindingName" />
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Finding Description", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <textarea id="FindingDescription" name="FindingDescription" class="form-control"> </textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Condition", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <textarea id="Condition" name="Condition" class="form-control"> </textarea>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Criteria", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <textarea id="Criteria" name="Criteria" class="form-control"> </textarea>
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.Label("Implications (Consequence)", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <textarea id="Implication" name="Implication" class="form-control"> </textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Recommendation", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <textarea id="Recommendation" name="Recommendation" class="form-control"> </textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Causes", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <textarea id="Causes" name="Causes" class="form-control"> </textarea>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-md-2 control-label" style="font-weight:normal;text-align:right">

                            <i class="fa fa-asterisk" style="color:white;width:5px;height:5px" id="errorProjectDesc"></i>
                        </label>
                        <div class="col-md-8">
                            <a class="btn btn-info" href="#" onclick="addFinding()">
                                <i class="glyphicon glyphicon-plus"></i> Add Finding
                            </a>
                        </div>

                    </div>
                </div>
                }

                <table class="table" id="dt_findings">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th> Finding Name </th>
                            <th> Criteria </th>
                            <th> Condition </th>
                            <th> Implications </th>
                            <th> Causes </th>
                            <th> Recommendation </th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>

            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-save"></i>Save
                </button>
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>
<!------------------END ADD FINDINGS MODAL--------------->
<!-- Start of modal -->
<div id="modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 70%">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title"> Audit Programme </h4>
            </div>
            <div id="modal-body" class="modal-body">



                <table class="table" id="dt_programs">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th> Procedure </th>
                            <th>Test Required </th>
                            <th> Results Satisfactory </th>
                            <th> Action </th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info" id="btnSaveRedirection2">Save</button>
                <button class="btn btn-default role-dismiss" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- End of modal -->
<!----------- Lead Schedule Auditable area Items ----------------->
<div class="modal fade" id="glItemsModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">
            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Auditable Area Item </h3>
            </div>
            <div class="modal-body">

                <div>

                    <div class="row" style="padding-top:1%;padding-bottom:1%">
                        <div class="col-md-4">
                            <input type="text" disabled id="auditableAreaPopup" class="form-control">
                        </div>
                        <div class="col-md-2">
                        </div>
                        <div class="col-md-6">

                            <div class="search-container submit-btn" style="float:right">
                                <i class="fa fa-search search-icon"></i>
                                <input type="search" name="search" placeholder="Search..." id="searchbox2">
                            </div>
                        </div>
                    </div>
                    <table id="dt_search_gl_item" class="table table-striped table-bordered table-hover table-condensed" width="100%">
                        <thead>
                            <tr>
                                <th>
                                    #
                                </th>
                                <th>
                                    Auditable Item
                                </th>

                                <th>
                                    Current Amount
                                </th>

                                <th>
                                    Previous Amount
                                </th>
                                <th> AdjustMent </th>
                                <th>
                                    Adjust Current Amount
                                </th>
                                @*<th>
                                        Restate Previous Amount
                                    </th>
                                    <th>
                                        Remark
                                    </th>*@
                            </tr>
                        </thead>
                    </table>
                    <div class="name-input-container">
                        <a class="btn btn-info" href="#" onclick="addSchedules()">
                            <i class="glyphicon glyphicon-plus"></i>Add
                        </a>


                    </div>

                </div>
                <div class="modal-footer">
                    <table class="table" id="dt_schedules">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th> Auditable Item</th>
                                <th> Current Amount </th>
                                <th> Previous Amount </th>
                                <th> Adjustment </th>
                                <th> Adjusted Amount </th>
                                <th> Final Amount </th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>

                </div>
            </div>
        </div>
    </div>
</div>




@section pagespecific {
    <script type="text/javascript">

        $("#assignedEngagementId").change(function () {
            $("#divLoader").show();
            debugger
            var id = $(this).val();
            var url = "GetAssignedProgram/?id=" + id;
            $.ajax({
                type: "POST",
                url: url,
                contentType: "html",
                success: function (data) {
                    $("#divLoader").hide();
                    console.log(data);
                    $("#ClientName").val(data.ClientName);
                    $("#EngagementName").val(data.EngagementName);
                    $("#AuditableAreaName").val(data.AuditableAreaName);
                    $("#ExecutionType").val(data.ExecutionType);
                    $("#FinancialYear").val(data.FinancialYearName);
                    $("#AuditableAreaId").val(data.AuditableAreaId);
                    $("#ClientId").val(data.ClientId);
                    $("#EngagementId").val(data.EngagementId);
                    $("#Status").val(data.Status);
                    $("#StatusDescription").val(data.StatusDescription);
                    $("#EngagementRefNo").val(data.EngagementRefNo);
                },
            });

        });

        var AddItems = function () {
            var executionType = $("#ExecutionType").val();
            debugger;
             if (executionType == "Lead Schedule") {
                SearchGl();
            }
            else {
                 programItems();
            }

        }




        var AddProgramItems = function () {
                    debugger;
                    $("#divLoader").show();
                    var auditableArea = $("#AuditableArea").val();

                    var assignedEngagementId = $("#assignedEngagementId").val();

                    if (assignedEngagementId == "") {
                        $("#divLoader").hide();
                        swal("Please Select Engagement Before Adding Items", { icon : "warning" });
                        return false;
                    }

                     $(".modal-title").text("AUDIT PROGRAMME");
                     var url = '@Url.Action("GetAuditableAreaProgram", "FieldWorks")?auditableArea=' + auditableArea;



                    //$("#divLoader").show();
                    //$(".modal-body").load(url, function () {
                    //    $("#modal").modal({
                    //        backdrop: "static",
                    //        keyboard: false
                    //    });

                    //    $("#divLoader").hide();
                    //});


                $.ajax({
                    type: "GET",
                    url: url,
                    data: { "auditableArea": auditableArea },
                    success: function (response) {
                        console.log(response);
                        $("#divLoader").hide();
                        $("#modal").find("#modal-body").html(response);
                        $("#modal").modal('show');
                    },
                    failure: function (response) {
                        $("#divLoader").hide();
                        alert(response.responseText);
                    },
                    error: function (response) {
                        $("#divLoader").hide();
                        alert(response.responseText);
                    }
                });

        }


        function ShowAddFindings() {
            debugger;

            $(".modal-title").text("Summary of Findings");
            $("#AddFindings").modal("show");

        }

        function ShowAddAttachment() {
            debugger;
            $("#AddAttachment").modal("show");

        }


        function ShowAddAttachment() {
            debugger;
            var assignedEngagementId = $("#assignedEngagementId").val();
            if (assignedEngagementId == "") {
                $("#divLoader").hide();
                swal("Please Select Engagement Before Adding Attachments", { icon: "warning" });
                return false;
            }
            $(".modal-title").text("Attachments");
            $("#AddAttachment").modal("show");
            $("#AddAttachment ").modal("show");
        };




         $("#saveBtn").on("click", function () {
            debugger;
            $("#divLoader").show();
            $("#saveBtn").prop("disabled", true);
            var message = "";
            var url = '@Url.Action("CreateFieldWork", "FieldWorks")';
             var urlList = '@Url.Action("PendingFieldWork", "FieldWorks")';

             var formData = new FormData();

             formData.append("AuditableAreaId", $('#AuditableAreaId').val());
             formData.append("ClientId", $('#ClientId').val());
             formData.append("EngagementId", $('#EngagementId').val());
             formData.append("Status", $('#Status').val());
             formData.append("StatusDescription", $('#StatusDescription').val());
             formData.append("EngagementRefNo", $('#EngagementRefNo').val());
             formData.append("FinancialYear", $('#FinancialYear').val());
             formData.append("ClientName", $('#ClientName').val());
             formData.append("EngagementName", $('#EngagementName').val());
             formData.append("AuditableAreaName", $('#AuditableAreaName').val());
             formData.append("ExecutionType", $('#ExecutionType').val());

             for (var i = 0; i < attachments.length; i++) {
                 formData.append("FwAttachmentVMs[" + i + "].AttachmentName", attachments[i].AttachmentName);
                 formData.append("FwAttachmentVMs[" + i + "].FileName", attachments[i].FileName);
             }

            var model = $("#fieldWorkForm").serialize();


            $.ajax({
                type: "POST",
                url: url,
                type: "POST",
                processData: false,
                contentType: false,
                data: formData,
                success: function (response) {
                    $("#divLoader").show();
                    if (response == "Success") {
                        swal({
                            text: "Field Work Successfully Saved",
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            window.location.href = urlList;
                        });
                    }
                },
                error: function () {
                    $("#divLoader").show();
                    $("#saveBtn").prop("disabled", false);
                    swal({
                        text: "An error occured while processing your request, please contact system support",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $("#divLoader").hide();
                    $("#saveBtn").prop("disabled", false);
                }
            });
        });



        // TABLE YA SCHEDULES

        $(document).ready(function () {
            $("#dt_search_gl_item_wrapper .dt-toolbar").remove();

            $("#dt_voucher_detail_wrapper .dt-toolbar").remove();
            $("#dt_voucher_detail_wrapper .dt-toolbar-footer").remove();

            updateFindingsTables();
            updateAttachmentsTables();
            updateProgramTables();
        });


        var dt_voucher_detail = $('#dt_voucher_detail').dataTable({
            "data": [],
            "columns": [
                { title: "Auditable Item" },
                { title: "Current Amount" },
                { title: "Previous Amount" },
                { title: "Adjustment" },
                { title: "Adjust Current Amount" }
            ]
        });


        var responsiveHelper_dt_search_gl_item = undefined;
        var dt_search_gl_item = $('#dt_search_gl_item').dataTable({
            "language": {
                "emptyTable": '<strong id="loader" style="color:green">No matching records found</strong>',
                "zeroRecords": "No matching records found"
            },
        });

        $("#searchbox2").on("keyup search input paste cut", function () {
            dt_search_gl_item.DataTable().search(this.value).draw();
        });



        function AddLeadSchedule() {

            var engagementId = $("#EngagementId").val();
            var auditableAreaName = $("#AuditableArea").val();
            $('#glItemsModal').modal('show');
            updateSearchGITable(engagementId, auditableAreaName);
        }



        function updateSearchGITable(engagementId, auditableAreaName) {
            $("#loader").text("Loading Please Wait...")
            debugger;
            $("#auditableAreaPopup").val(auditableAreaName);
            var url = '@Url.Action("GetAuditableFwSchedule", "FieldWorks")';
            var fundBalanceParams = { "engagementId": engagementId, "auditableAreaName": auditableAreaName };

            $.ajax({
                type: "get",
                url: url,
                data: fundBalanceParams,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {

                    data = response.data;
                    dt_search_gl_item.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        var emb = data[i]["FundingRefNo"];
                        //var embassy = emb.substring(0, 7);
                        dt_search_gl_item.fnAddData(
                            [i + 1,
                            data[i]["AuditableAreaItem"],
                            data[i]["CurrentAmount"],
                            data[i]["PreviousAmount"],
                                '<select class="form-control" id="adjust-"' + data[i]["AuditableAreaScheduleId"] + '"\
                              onchange="amountChangedSchedule('+"adjust"+','+ data[i]["AuditableAreaScheduleId"]+')"> \
                              <option> Choose one </option> <option> Add </option> <option> Less </option></select>',
                                '<amount-input type="text" placeholder="Amount" id="adjustAmount-"' + data[i]["AuditableAreaScheduleId"] + '"\
                                onkeyup="amountChangedSchedule('+ "adjustamount" +','+ data[i]["AuditableAreaScheduleId"] +')"/>'
                        ]);
                    }

                },
                failure: function (error) {
                    swal(error);
                }

            });
        //}

        }




        function remove(array, val) {
            var found = array.indexOf(val);
            while (found !== -1) {
                array.splice(found, 1);
                found = array.indexOf(val);
            }
        }


        let schedulesdata = [];
        let formSchedules = {}
        function amountChangedSchedule(amountType, AuditableAreaAssignId) {
            debugger;
            formSchedules[AuditableAreaAssignId] = {
                [amountType]: $(`#${amountType}-${AuditableAreaAssignId}`).val(),
                ...(formSchedules[AuditableAreaAssignId] || []),
                'AuditableAreaAssignId': AuditableAreaAssignId
            }
        }


        //$("#addSchedules").on('click', function () {
        function addSchedules() {
        debugger;
        //var formdata = new FormData();
            for (let AuditableAreaAssignId in formSchedules) {
            let Adjustment = formSchedules[AuditableAreaAssignId].adjust
            let AdjustedAmount = formSchedules[AuditableAreaAssignId].adjustAmount
            
            schedulesdata.push({
                AuditableAreaScheduleId: AuditableAreaAssignId,
                Adjustment: Adjustment,
                AdjustedAmount: AdjustedAmount
            });

            console.log(schedulesdata);
        }

        var formData = {
            "FieldWorkSummaryId": $("#FieldWorkSummaryId").val(),
            "AuditScheduleDatas": schedulesdata
        }


        $("#divLoader").toggle(true);
        var url = '@Url.Action("SaveAuditSchedules", "FieldWorks")';
        $.ajax({
            url: url,
            data: JSON.stringify(formData),
            type: 'POST',
            dataType: "JSON",
            contentType: "application/json",
            success: function (response) {
                console.log('response', response)
                $("#btnSaveRedirection").prop('disabled', false);
                $("#divLoader").toggle(false);
                if (response == "Success") {
                    swal("Saved Successfully!", { icon: "success" })
                        .then((value) => {
                            window.location.reload();
                        });
                } else if (response == "Dublicate") {
                    swal("Dublicate Program!", { icon: "warning" })
                        .then((value) => {
                            return false;
                        });
                }
                else {
                    swal(response);
                }
            },
            failure: function (error) {
                $("#divLoader").toggle(false);
                swal(error);
            }
        });
    };


        $("#btn_save_gl_items").click(function () {
            var total_amount = 0;
            var difference = 0;
            var data = dt_search_gl_item.DataTable().rows().data();
            if (form_data_status.length == 0) {
                var obj = [];
                dt_voucher_detail.fnClearTable();
                $("#total_amount").text("0.00");
                for (var i = 0; i < data.length; i++) {

                    var amount = all_amounts["Id-" + i];
                    if (amount == undefined) {
                        amount = "";
                    }
                    if (amount.toString().trim()) {
                        var row = data.rows(i).data()[0];
                        console.log(row);
                        if (parseFloat(amount) > 0) {
                            dt_voucher_detail.fnAddData([row[1], row[2], toLabel(row[3]),toLabel(row[4]), toLabel(amount)]);
                        }
                        total_amount = parseFloat(total_amount) + parseFloat(amount);
                        $("#total_amount").text(toLabel(total_amount));
                    }
                }

                difference = toNumber($('#total_voucher_amount').val()) - toNumber(total_amount);
                //if (difference < 0) {
                //    swal("Total Allocation Amount Exceed Fund Balance");
                //    dt_voucher_detail.fnClearTable();
                //} else {
                    $('#glItemsModal').modal('hide');

                /*}*/
            } else {
                swal("Please Fix Form Errors....");
            }
            toggleTableInfo();
        });

        toggleTableInfo();
        function toggleTableInfo() {
            var data = dt_voucher_detail.DataTable().rows().data();
            if (data.length > 0) {
                $("#dt_voucher_detail").toggle(true);
                $("#infoPanel").toggle(false);
            } else {
                $("#dt_voucher_detail").toggle(false);
                $("#infoPanel").toggle(true);
            }
        }





    /// ADDING  SUMMARY OF FINDINGS
     var dt_findings = $('#dt_findings').dataTable();

        $("#dt_findings_wrapper .dt-toolbar").remove();
        $("#dt_findings_wrapper .dt-toolbar-footer").remove();

      var allfindings = []
      var findings = []
        function addFinding() {

          debugger;
          $("#divLoader").show();
          if (!findings.includes($("#FindingName").val())) {

                  var fwId = $("#FieldWorkSummaryId").val();
                  var engagementid = $("#EngagementId").val();
                  var findingname = $("#FindingName").val();
                  var criteria = $("#Criteria").val();
                  var condition = $("#Condition").val();
                  var implication = $("#Implication").val();
                  var recommendation = $("#Recommendation").val();
                  var causes = $("#Causes").val();
                  var findingnature = $("#FindingNature :selected").text();
                  var findingcategory = $("#findingCategory :selected").text();
                  var opinionbasis = $("#opinionBasis").val();




              var params = {
                  "fieldWorkSummaryId":fwId,
                  "engagementid": engagementid,
                  "findingname": findingname,
                  "criteria": criteria,
                  "condition": condition,
                  "implication": implication,
                  "recommendation": recommendation,
                  "causes": causes,
                  "findingnature": findingnature,
                  "findingcategory": findingcategory,
                  "opinionbasis": opinionbasis
              };
                  var url = '@Url.Action("AddSummaryFinding", "FieldWorks")';
                  $.ajax({
                      type: "Get",
                      url: url,
                      data: params,
                      contentType: "application/json; charset=utf-8",
                      dataType: "json",
                      success: function (response) {
                          $("#divLoader").hide();
                          if (response = "Success") {
                              swal("Finding Successfully Added", { icon: "success" });
                              allfindings.push({
                                  FindingName: findingname.trim(),
                                  Criteria: criteria.trim(),
                                  Condition: condition.trim(),
                                  Implication: implication.trim(),
                                  Recommendation: recommendation.trim(),
                                  Causes: causes.trim()
                              })
                              findings.push($("#FindingName").val());
                              updateFindingsTables();


                          }
                      },
                      failure: function (response) {
                          $("#divLoader").hide();
                          alert(response.d);
                      }
                  });

          } else {
              $("#divLoader").hide();
              swal("Finding Already Exist for this Auditable Area", {icon:"warning"});
              }
         // }

       }


      function findingRemove(index,id) {
            debugger;
                var params = {"did":  id };
                var url = '@Url.Action("RemoveFinding", "FieldWorks")';
              $.ajax({
                type: "Get",
                url: url,
                data: params,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                  success: function (response) {
                      if (response = "Success") {
                          allfindings.splice(index, 1);
                          findings.splice(index, 1);
                          updateFindingsTables();
                      }
                },
                failure: function (response) {
                    alert(response.d);
                }
            });
        }



        function updateFindingsTables() {
            debugger;
            var fwId = $("#FieldWorkSummaryId").val();
            var url = '@Url.Action("GetSummaryFinding", "FieldWorks")';
            var params = { "id": fwId };

            $.ajax({
                type: "get",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    datalength = data.length;
                    console.log(data.length)
                    dt_findings.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dt_findings.fnAddData([i+1,
                            data[i]['FindingName'],
                            data[i]['Criteria'],
                            data[i]['Condition'],
                            data[i]['Consequence'],
                            data[i]['Recommendation'],
                            data[i]['Causes'],
                            '<a href="#" onclick="findingRemove(' + i + ',' + data[i]["FwSummaryFindingId"] + ')">\
                           <i class="glyphicon glyphicon-trash"></i></a>'
                        ]);


                    }
                    $("#added_finding").text(" (" + data.length + ")");
                    added_programs

                },
                failure: function (error) {
                    swal(error);
                }
            });

        }

        // END OF SUMMARY FINDINGS

       /// ADDING ATTACHMENTS DIALOG STARTS HERE
        var dt_attachments = $('#dt_attachments').dataTable();
       $("#dt_attachments_wrapper .dt-toolbar").remove();
       $("#dt_attachments_wrapper .dt-toolbar-footer").remove();


        var allattachments = []
        var attachments = []
        function addAttachments() {
            $("#divLoader").show();
            console.log($("#ProjectId").val());
            debugger;
            var fwId = $("#FieldWorkSummaryId").val();
            var attachmentName = $("#AttachmentName").val()
            if (!findings.includes($("#AttachmentName").val())) {

                 var formData = new FormData();
                formData.append('ModuleId', fwId);
                formData.append('ModuleName', fwId);
                formData.append('FileName', $('#FileName')[0].files[0]);
                formData.append('AttachmentName', attachmentName );

                var url = '@Url.Action("AddAttachment", "FieldWorks")';
                $.ajax({
                type: "POST",
                url: url,
                data: formData,
                contentType: false,
                processData: false,
                    success: function (response) {
                        $("#divLoader").hide();
                        console.log(response);
                        if (response == "Success") {
                            swal("Attachment Successfully Added", { icon: "success" });
                            allattachments.push({
                                AttachmentName: attachmentName,
                                FileName: $("#FileName").val()
                            })
                            attachments.push(attachmentName);
                            updateAttachmentsTables();
                        }
                        else if (response == "Duplicate") {
                            $("#divLoader").hide();
                            swal("Duplicate Attachment,Name Already Exist", { icon: "warning" });
                        }
                        else {
                            swal(response, { icon: "warning" });
                        }
                },
                failure: function (response) {
                    alert(response.d);
                    $("#divLoader").hide();
                }
            });

            } else {
                $("#divLoader").hide();
                swal("Duplicate Attachment,Name Already Exist", {icon:"warning"});
        }

       }


        function attachmentRemove(index,id) {
            debugger;
            var params = {"did":  id };
                var url = '@Url.Action("RemoveAttachment", "FieldWorks")';
              $.ajax({
                type: "get",
                url: url,
                data: params,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                  success: function (response) {
                      if (response = "Success") {
                          allattachments.splice(index, 1);
                          attachments.splice(index, 1);
                          updateAttachmentsTables();
                      }
                },
                failure: function (response) {
                    alert(response.d);
                }
            });
        }



        function updateAttachmentsTables() {

            debugger;
            var id = $("#FieldWorkSummaryId").val();
            var url = '@Url.Action("GetFwAttachment", "FieldWorks")';
            var params = { "id": id };

            $.ajax({
                type: "get",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {

                    data = response.data;
                    datalength = data.length;
                    console.log(data.length)
                    dt_attachments.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dt_attachments.fnAddData([i+1,
                            data[i]["AttachmentName"],
                            data[i]["FilePath"],
                            '<a href="#" onclick="attachmentRemove(' + i + ',' + data[i]["AttachmentId"] + ')">\
                           <i class="glyphicon glyphicon-trash"></i></a>'
                        ]);
                    }
                    $("#added_attachments").text(" (" + data.length + ")");


                },
                failure: function (error) {
                    swal(error);
                }
            });
        }



        ///END ADD ATTACHMENT MODAL


        $("#FindingNature").change(function () {
            $("#findingCategory").empty();
            debugger
            var id = $(this).val();

            var url = '@Url.Action("GetFindingCategory", "FieldWorks")';
            var params = { "findingnatureId": id };

            $.ajax({
                type: "POST",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    console.log(response);
                    $("#findingCategory").empty();
                    $("#findingCategory").append(response);
                }
            })
        });



        $("#findingCategory").change(function () {

            debugger
            var id = $(this).val();
            var url = '@Url.Action("GetFindingOpinionBasis", "FieldWorks")';
             var params = { "findingcategoryId": id };
            $.ajax({
                type: "POST",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    console.log(response);
                    $("#opinionBasis").empty();
                    $("#opinionBasis").append(response);
                }
            })
        });



    var dt_programs = $('#dt_programs').dataTable();
    $("#dt_programs_wrapper .dt-toolbar").remove();
    $("#dt_programs_wrapper .dt-toolbar-footer").remove();

    function updateProgramTables() {

            debugger;
            var id = $("#FieldWorkSummaryId").val();
            var url = '@Url.Action("GetFwProgram", "FieldWorks")';
            var params = { "id": id };

            $.ajax({
                type: "get",
                url: url,
                data: params,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    datalength = data.length;
                    console.log(data.length)
                    dt_programs.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dt_programs.fnAddData([i+1,
                            data[i]["ProgramProcedure"],
                            data[i]["TestRequired"],
                            data[i]["ResultSatisfactory"],
                            '<a href="#" onclick="programRemove(' + i + ',' + data[i]["FieldWorkProgramId"] + ')">\
                           <i class="glyphicon glyphicon-trash"></i></a>'
                        ]);
                    }
                    $("#added_programs").text(" (" + data.length + ")");


                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

    </script>
}