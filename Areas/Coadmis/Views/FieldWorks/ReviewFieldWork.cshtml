@model IEnumerable<IFMIS.Areas.Coadmis.Models.FieldWorkSummary>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="content" style="margin: 5px; padding-top: 30px">
    <div id="divLoader"></div>
    <br />
    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!----->
        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <div class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>

                        <h2>  Field Works Review </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            <table id="dt_basic" class="table table-bordered table-hover table-condensed">
                                <thead>
                                    <tr>
                                        <th>
                                            @Html.DisplayNameFor(model => model.ReferenceNo)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.AuditableArea)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.ClientName)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.TotalItems)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Status)
                                        </th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.ReferenceNo)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.AuditableArea)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(modelItem => item.ClientName)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(modelItem => item.TotalItems)
                                            </td>
                                            <td>
                                                @if (item.Status == "RejectedToReview")
                                                {
                                                    string status = "REJECTED";
                                                    @status
                                                }
                                                else
                                                {
                                                    @Html.DisplayFor(modelItem => item.Status)
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <span class="caret"></span>
                                                        <span class="sr-only">Toggle Dropdown</span>
                                                    </button>
                                                    <ul class="dropdown-menu" style="white-space:nowrap">
                                                        <li><a href="#" onclick="RemarksFW(@item.FieldWorkSummaryId,'review',true)"> Review </a></li>
                                                        <li><a href="#" onclick="Details(@item.FieldWorkSummaryId)">Details </a></li>
                                                        <li><a href="#" onclick="RemarksFW(@item.FieldWorkSummaryId,'review',false)"> Reject </a></li>

                                                        @if (item.Status == "RejectedToConfirmation")
                                                        {
                                                            <li><a href="#" onclick="viewReason('@item.StatusDescription')"><i class="fa fa-search-plus"></i> Vew Reason </a></li>
                                                        }
                                                        @*}*@
                                                    </ul>
                                                </div>


                                            </td>
                                        </tr>
                                    }
                                </tbody>

                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>


<div class="modal fade" id="ViewReasonModal">
    x
    <div class="modal-dialog">
        <div class="modal-content panel-info">

            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 class="modal-title">  Rejection Reason </h4>
            </div>
            <div class="modal-body">
                <div id="registration-form">
                    @Html.TextArea("RejectionReason", null, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

        </div>
    </div>
</div>



@*Start request form bootstarp pop model*@
<div class="modal fade" id="RemarksModal">
    <div class="modal-dialog">
        <div class="modal-content ">

            <div class="modal-header" style="background-color:#b3e5fc;">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Rejection Reason  </h3>

            </div>
            @using (Html.BeginForm("SaveRemarks", "FieldWorks", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-body">

                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-3">  </div>
                            <div class="col-md-8">
                                <input type="hidden" value="" id="ids" name="ids" readonly="readonly" class="form-control" />
                                <input type="hidden" id="Level" value="Desk Officer - EFD MOFP" name="Level" readonly="readonly" class="form-control" />
                                <input type="hidden" id="Destination" value="Project Coordinator - Data Entry" name="Destination" readonly="readonly" class="form-control" />
                                <input type="hidden" id="OverallStatus" value="Incomplete" name="OverallStatus" readonly="readonly" class="form-control" />
                                <input type="hidden" id="url" value="ProjectReview" name="url" readonly="readonly" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3"> Destination </div>
                            <div class="col-md-8">
                                @Html.DropDownList("RejectTo",
                                                   new SelectList(new List<SelectListItem> {
                                                   new SelectListItem { Text = "Sector Ministry", Value = "Sector"},
                                                   new SelectListItem { Text = "Implementing Agency", Value = "Implementer"}
                                                                              }, "Value", "Text"),
                                                           "Select Destination", new { @class = "form-control select2" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3"> Reason </div>
                            <div class="col-md-8">
                                @Html.TextArea("RejectionReason", new { @class = "form-control" })
                            </div>
                        </div>

                        @*<div class="form-group">
                                <div class="col-md-3"> Attachment  </div>
                                <div class="col-md-8">
                                    <input type="file" class="form-control" name="file1" id="file1" accept=".pdf" />
                                </div>
                            </div>*@

                    </div>

                </div>
                <div class="modal-footer">
                    <div class="form-group" style="float:left;margin:0px 0px 0px 85px">
                        <div class="col-md-offset-3 col-md-7">
                            &nbsp;&nbsp; <input type="submit" value="Submit" class="btn btninfo" />
                        </div>
                    </div>

                </div>
            }
        </div>

    </div>

</div>


<!-- Start of modal -->
<div id="modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title"> Rejection Reason </h4>
            </div>
            <div id="modal-body" class="modal-body" style="padding:5px"></div>
            <div class="modal-footer">
                <button class="btn btn-info" id="btnSaveRedirection">Save</button>
                <button class="btn btn-default role-dismiss" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- End of modal -->




@section pagespecific {
    <script type="text/javascript">

        $(document).ready(function () {
           debugger;


            /* // DOM Position key index //

            l - Length changing (dropdown)
            f - Filtering input (search)
            t - The Table! (datatable)
            i - Information (records)
            p - Pagination (paging)
            r - pRocessing
            < and > - div elements
            <"#id" and > - div with an id
            <"class" and > - div with a class
            <"#id.class" and > - div with an id and class

            Also see: http://legacy.datatables.net/usage/features
            */

            /* BASIC ;*/
            var responsiveHelper_dt_basic = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            $('#dt_basic').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_dt_basic) {
                        responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#dt_basic'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_dt_basic.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_dt_basic.respond();
                }
            });

            /* END BASIC */

            /* COLUMN FILTER  */
            var otable = $('#datatable_fixed_column').DataTable({
                //"bFilter": false,
                //"bInfo": false,
                //"bLengthChange": false
                //"bAutoWidth": false,
                //"bPaginate": false,
                //"bStateSave": true // saves sort state using localStorage
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_fixed_column) {
                        responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_fixed_column.respond();
                }

            });

            // custom toolbar
            $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });
            /* END COLUMN FILTER */

            /* COLUMN SHOW - HIDE */
            $('#datatable_col_reorder').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_col_reorder) {
                        responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_col_reorder.respond();
                }
            });

            /* END COLUMN SHOW - HIDE */

            /* TABLETOOLS */
            $('#datatable_tabletools').dataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                        {
                            "sExtends": "pdf",
                            "sTitle": "SmartAdmin_PDF",
                            "sPdfMessage": "SmartAdmin PDF Export",
                            "sPdfSize": "letter"
                        },
                        {
                            "sExtends": "print",
                            "sMessage": "List of Recurrent Componet Details <i>(press Esc to close)</i>"
                        }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            /* END TABLETOOLS */

        });



        function Confirm(i, id) {
            debugger;
            if (i == 'x') i = id;
            swal({
                title: "Are you sure?",
                text: "This process cannot be undone",
                buttons: [
                    'Yes',
                    'No'
                ],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (isConfirm) {
                    swal("Cancelled", "No change was made");
                } else {

                    ConfirmFieldWork(i)
                }
            });
        };


        var ConfirmFieldWork = function (id) {
            debugger;
            $("#divLoader").show();
            $.ajax({
                type: "POST",
                url: "ConfirmFieldWork",
                data: { id: id },
                success: function (response) {
                    $("#divLoader").hide();
                    if (response == "Success") {
                        swal("Confirmed Successfully!", { icon: "success" }).then((e) => {
                            window.location.reload();
                        });

                    } else {
                        swal(response);
                    }
                },
                error: function (xhr) {
                    swal("An error has occured, contact system support");
                    $("#divLoader").hide();
                },
            });


        };


        function Delete(i,) {
            debugger;
            if (i == 'x') i = id;
            swal({
                title: "Are you sure?",
                text: "Once Cancelled, you will not be able to recover this Item ",
                buttons: [
                    'Yes',
                    'No'
                ],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (isConfirm) {
                    swal("Cancelled", "No change was made");
                } else {

                    deleteitem(i)
                }
            });
        }


        function reject(i, id) {
            debugger;
            swal({
                title: "Rejection Reason",
                closeOnClickOutside: false,
                content: "input",
                input: 'select',
                inputOptions: {
                    'SRB': 'Serbia',      // How do I dynamically set value?
                    'UKR': 'Ukraine',
                    'HRV': 'Croatia'
                },
                buttons: [
                    'Cancel',
                    'Save'
                ],
            }).then((value) => {
                //'
                debugger;
                var inputValue = `${value}`;
                if (inputValue == "null") {
                    swal("Cancelled");

                }
                else {
                    rejectReasons(i, `${value}`)
                }

            });
        }

        var rejectReasons = function (id, reason) {
            debugger;
            var rejectionReason = reason;

            $("#divLoader").show();

            $.ajax({
                type: "POST",
                url: "ReviewRejectFieldWork",
                data: { id: id, reason: rejectionReason },
                success: function (response) {
                    $("#divLoader").hide();
                    if (response == "Success") {
                        swal("Rejection Successfully Saved", { icon: "success" }).then((e) => {
                            window.location.reload();
                        });
                        $("#divLoader").hide();

                    } else {
                        swal(response + "An error has occured, contact system support");
                    }
                },
                error: function (xhr) {
                    //console.log(xhr.responseText);
                    swal("An error has occured, contact system support");
                    $("#divLoader").hide();
                },
            });

        };



        var RejectFW = function (csvIds) {

            $("#RemarksModal").modal("show");
            $(".modal-body #ids").val(csvIds);
            $("#divLoader").hide();
        };



        function RemarksFW(id, level, process) {
            debugger;
            if (i == 'x') i = id;
            swal({
                title: "Are you sure?",
                text: "To Send Selected Field Work to Approver",
                buttons: [
                    'Yes',
                    'No'
                ],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (isConfirm) {
                    swal("Cancelled", "No change was made");
                } else {

                    RemarksFWs(iid, level, process)
                }
            });
        }



        var RemarksFWs = function (id, level,process) {
            debugger;
            $("#divLoader").show();
            if (process == false) {
                $(".modal-title").text("REJECTION");
            }
            else {
                $(".modal-title").text("REVIEW");
            }
            $("#btnRejectTransfer").hide();
            var url = '@Url.Action("FieldWorkRemark", "FieldWorks")?id=' + id+'&&level='+level+'&&process='+process;

            $("#divLoader").show();
            $("#modal-body").load(url, function () {
                $("#modal").modal({
                    backdrop: "static",
                    keyboard: false
                });

                $("#divLoader").hide();
            });
        }



        $("#btnSaveRedirection").on("click", function () {
            debugger;
            $("#divLoader").show();
            $("#btnSaveRedirection").prop("disabled", true);
            var message = "";
             var url = '@Url.Action("SaveFieldWorkRemarks", "FieldWorks")';

            var model = $("#remarkForm").serialize();
            var process = $("#Process").val();
            if (process == true) {
                message = "Field Work Successfuly Reviewed";
            }
            else {
                message = "Field Work Successfuly Rejected";
            }

            $.ajax({
                type: "POST",
                url: url,
                data: model,
                success: function (response) {
                    if (response == "Success") {
                        swal({
                            text: message,
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    }
                },
                error: function () {
                    swal({
                        text: "An error occured while processing your request, please contact system support",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $("#divLoader").hide();
                    $("#btnSaveRedirection").prop("disabled", false);
                }
            });




        });

        //var urlvalue = getUrlVars()["remark"];
        //if (urlvalue == "Success") {
        //    swal("Field Work Submitted Successfully", { icon: "success" })
        //        .then((value) => {
        //            window.location.reload();
        //        })
        //}




    </script>
}