@model IEnumerable<IFMIS.Areas.Coadmis.Models.AuditableAreaProgram>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="content" style="margin: 5px; padding-top: 30px">
    <div id="divLoader"></div>
    <br />
    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!----->
        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <div class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>

                        <h2>  Audit Programs </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            <a class="btn btn-info" onclick="addNewItem()" href="#">
                                <span class="glyphicon glyphicon-plus"></span>
                                Add New
                            </a>


                            <table id="dt_basic" class="table table-bordered table-hover table-condensed">
                                <thead>
                                    <tr>
                                        <th>
                                            Auditable Area
                                        </th>

                                        <th>
                                            Total Procedures
                                        </th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var group1 in Model.GroupBy(a => a.AuditableAreaName))
                                    {

                                        <tr>
                                            <td>
                                                @group1.Key
                                            </td>
                                            <td>
                                                @group1.Count()
                                            </td>

                                            <td>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <span class="caret"></span>
                                                        <span class="sr-only">Toggle Dropdown</span>
                                                    </button>
                                                    <ul class="dropdown-menu" style="white-space:nowrap">
                                                        <li><a href="#" onclick="details('@group1.Key')"><i class="fa fa-list"></i> Details </a></li>
                                                        <li><a href="#" onclick="removeprogram('@group1.Key')"><i class="fa fa-trash-o"></i> Cancel </a></li>

                                                    </ul>
                                                </div>

                                            </td>
                                        </tr>
                                    }
                                </tbody>

                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>





<!----------- MODIFY CATEGORY DIALOG ----------------->
<div class="modal fade" id="newItemModal" style="left:4%">

    <div class="modal-dialog" style="width:60%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Upload Program   </h3>
            </div>

            @using (Html.BeginForm("UploadAuditProgram", "LookUpSetups", FormMethod.Post, new { enctype = "multipart/form-data", @class = "well form-horizontal" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    <div class="form-group">
                        @Html.Label("Auditable Area", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <select name="AuditableAreaId" id="AuditableAreaId" class="form-control select2">
                                <option> Select Auditable Area </option>
                                @foreach (var item in ViewBag.programs)
                                {
                                    <option value="@item.Value"> @item.Text </option>
                                }
                            </select>
                        </div>
                        <input type="hidden" id="auditableAreaName" name="Name" />
                    </div>

                    <div class="form-group">
                        @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                                    <textarea class="form-control" name="Description" id="Description">
                                    </textarea>
                        </div>
                    </div>



                    <div class="form-group">
                        @Html.Label("Upload", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            <input class="form-control" id="FileName" type="file" name="FileName" onchange="this.parentNode.nextSibling.value = this.value" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">

                            <button class="btn btn-info" type="submit" id="saveBtn">
                                <i class="fa fa-save"></i> &nbsp;
                                Save
                            </button>
                            &nbsp; &nbsp; &nbsp;
                            <button class="btn btn-info" data-dismiss="modal">
                                <i class="glyphicon glyphicon"></i> Cancel
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>




<div class="modal fade" id="ViewReasonModal">
    x
    <div class="modal-dialog">
        <div class="modal-content panel-info">

            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 class="modal-title">  Rejection Reason </h4>
            </div>
            <div class="modal-body">
                <div id="registration-form">
                    @Html.TextArea("RejectionReason", null, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

        </div>
    </div>
</div>



@section pagespecific {
    <script type="text/javascript">
        debugger;
        function addNewItem() {
            $('#newItemModal').modal('show');
        }


        $("#AuditableAreaId").change(function () {
            debugger
            var auditableareaname = $("#AuditableAreaId option:selected").text();
            $("#auditableAreaName").val(auditableareaname);
        });


        $(document).ready(function () {

            /* // DOM Position key index //

            l - Length changing (dropdown)
            f - Filtering input (search)
            t - The Table! (datatable)
            i - Information (records)
            p - Pagination (paging)
            r - pRocessing
            < and > - div elements
            <"#id" and > - div with an id
            <"class" and > - div with a class
            <"#id.class" and > - div with an id and class

            Also see: http://legacy.datatables.net/usage/features
            */

            /* BASIC ;*/
            var responsiveHelper_dt_basic = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            $('#dt_basic').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_dt_basic) {
                        responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#dt_basic'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_dt_basic.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_dt_basic.respond();
                }
            });

            /* END BASIC */

            /* COLUMN FILTER  */
            var otable = $('#datatable_fixed_column').DataTable({
                //"bFilter": false,
                //"bInfo": false,
                //"bLengthChange": false
                //"bAutoWidth": false,
                //"bPaginate": false,
                //"bStateSave": true // saves sort state using localStorage
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_fixed_column) {
                        responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_fixed_column.respond();
                }

            });

            // custom toolbar
            $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });
            /* END COLUMN FILTER */

            /* COLUMN SHOW - HIDE */
            $('#datatable_col_reorder').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_col_reorder) {
                        responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_col_reorder.respond();
                }
            });

            /* END COLUMN SHOW - HIDE */

            /* TABLETOOLS */
            $('#datatable_tabletools').dataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                        {
                            "sExtends": "pdf",
                            "sTitle": "SmartAdmin_PDF",
                            "sPdfMessage": "SmartAdmin PDF Export",
                            "sPdfSize": "letter"
                        },
                        {
                            "sExtends": "print",
                            "sMessage": "List of Recurrent Componet Details <i>(press Esc to close)</i>"
                        }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            /* END TABLETOOLS */

        });


        $("#FundingSource").change(function () {
            debugger
            var fundingSourceId = $(this).val();
            var url = "GetFundType/?fundingSourceId=" + fundingSourceId;
            $.ajax({
                type: "POST",
                url: url,
                contentType: "html",
                success: function (response) {
                    $("#FundingType").empty();
                    $("#FundingType").append(response);
                },
            });
        })

         $("#FundingSource2").change(function () {
            debugger
            var fundingSourceId = $(this).val();
            var url = "GetFundType/?fundingSourceId=" + fundingSourceId;
            $.ajax({
                type: "POST",
                url: url,
                contentType: "html",
                success: function (response) {
                    $("#FundingType2").empty();
                    $("#FundingType2").append(response);
                },
            });
        })



        function Delete(i, id) {
            debugger;
            if (i == 'x') i = id;
            swal({
                title: "Are you sure?",
                text: "Once Cancelled, you will not be able to recover this Item ",
                buttons: [
                  'Yes',
                  'No'
                ],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (isConfirm) {
                    swal("Cancelled", "No change was made");
                } else {

                    deleteprogram(i)
                }
            });
        }


        var deleteprogram = function (auditableareaId) {
            debugger;

            if (auditableareaId != "") {
                var url = '@Url.Action("DeleteAuditProgram", "LookupSetups")';
                $.ajax({
                    url: url,
                    data: { auditableAreaId: auditableareaId },
                    type: "POST",
                    success: function (response) {
                        if (response) {
                            if (response == "Success") {
                                swal("Program Cancelled Successfully!", { icon: "success" })
                       .then((value) => {
                           window.location.reload();
                       });
                            }
                        }
                    }, error: function (err) {
                        swal(response, { icon: "success" })
                       .then((value) => {
                           window.location.reload();
                       });
                    }

                });
            }
        }

        @*var details = function (auditablearea) {
            debugger;
            var url = '@Url.Action("DeleteAuditProgram", "LookupSetups")/?auditableArea=' + auditablearea;
            window.location.href = url;

        }*@

        var details = function (auditablearea) {
            debugger;
            $("#divLoader").show();
            var url = '@Url.Action("GetAuditableAreaProgram", "LookupSetups")?auditableArea=' + auditablearea;
            $.ajax({
                type: "GET",
                url: url,
                data: { "auditableArea": auditablearea },
                success: function (response) {
                    if (response.status == "Success") {
                        var auditableareaId = response.auditableareaId;
                        var url = '@Url.Action("AuditProgramDetails", "LookupSetups")/?auditableAreaId=' + auditableareaId;
                        window.location.href = url;
                    }
                    else {

                    }
                },
                failure: function (response) {
                    $("#divLoader").hide();
                    alert(response.responseText);
                },
                error: function (response) {
                    $("#divLoader").hide();
                    alert(response.responseText);
                }
            });

        }


        var removeprogram = function (auditablearea) {
            $("#divLoader").show();
            debugger;

            var url = '@Url.Action("GetAuditableAreaProgram", "LookupSetups")?auditableArea=' + auditablearea;
            $.ajax({
                type: "GET",
                url: url,
                data: { "auditableArea": auditablearea },
                success: function (response) {
                    $("#divLoader").hide();
                    if (response.status == "Success") {

                        var auditableareaId = response.auditableareaId;
                        Delete(auditableareaId);
                        //var url = '@Url.Action("AuditProgramDetails", "LookupSetups")/?auditableAreaId=' + auditableareaId;
                       // window.location.href = url;
                    }
                    else {

                    }
                },
                failure: function (response) {
                    $("#divLoader").hide();
                    alert(response.responseText);
                },
                error: function (response) {
                    $("#divLoader").hide();
                    alert(response.responseText);
                }
            });

        }



        function getUrlVars() {
            debugger;
            var vars = {};
            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                vars[key] = value;
            });
            return vars;
        }


        var urlvalue = getUrlVars()["response"];

        if (urlvalue == "Success") {

           swal("Programs Imported Successfully!", { icon: 'success' })
                .then(Ok => {
                    window.location.href = '@Url.Action("AuditPrograms", "LookupSetups")';
                });
        }
        else if (urlvalue == "Exist") {
           $('#newItemModal').modal('show');
           swal("Program for Selected Auditable Area Already Exist", { icon: 'warning' })
                .then(Ok => {
                    //window.location.href = '@Url.Action("AuditPrograms", "LookupSetups")';
                });
        }
        else {
             swal(response, { icon: 'warning' })
                .then(Ok => {
                    window.location.href = '@Url.Action("AuditPrograms", "LookupSetups")';
                });
        }





    </script>
}
