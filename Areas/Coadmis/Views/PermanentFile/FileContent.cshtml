@model IFMIS.Areas.Coadmis.Models.PermanentFileVM
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .loadingImg {
        display: none;
    }
</style>
<div id="divLoader">
</div>

<div id="content" style="margin: 5px; padding-top: 50px">
    <div class="row"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <div class="row">
            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-folder-o"></i> </span>
                        <h2> File Contents for @Model.Client</h2>
                    </header>

                    <div class="widget-body">
                        <div class="row">
                            <div class="tabs-left">
                                <ul class="nav nav-tabs tabs-left" id="demo-pill-nav">
                                    <li class="active">
                                        <a href="#tab-r1" data-toggle="tab"><i class="fa fa-university" aria-hidden="true"></i> Bank Details </a>
                                    </li>
                                    <li>
                                        <a href="#tab-r2" data-toggle="tab" onclick="getAdvisors()"><i class="glyphicon glyphicon-user" aria-hidden="true" style="color: #808080"></i> Proffessional Advisors</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r3" data-toggle="tab" onclick="getPersonnels()"><i class="fa fa-users" aria-hidden="true"></i> Key Personnels</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r4" data-toggle="tab" onclick="getRegulations()"><i class="fa fa-legal" aria-hidden="true"></i> Laws and Regulations</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r5" data-toggle="tab" onclick="getRelated()"><i class="fa fa-sitemap" aria-hidden="true"></i> Related Parts</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r6" data-toggle="tab" onclick="getPolicies()"><i class="fa fa-list-alt" aria-hidden="true"></i> Significant Accounting Policies</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r7" data-toggle="tab" onclick="getEstimates()"><i class="fa fa-barcode" aria-hidden="true"></i> Significant Accounting Estimates</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r8" data-toggle="tab" onclick="getService()"><i class="fa fa-wrench" aria-hidden="true"></i> Non-Audit Services</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r9" data-toggle="tab" onclick="getControl()"><i class="fa fa-sliders" aria-hidden="true"></i> Design of Internal Controls</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r10" data-toggle="tab" onclick="getAssets()"><i class="fa fa-building" aria-hidden="true"></i> Assets</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r11" data-toggle="tab" onclick="getContracts()"><i class="fa fa-clipboard" aria-hidden="true"></i> Contracts and Agreements</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r12" data-toggle="tab" onclick="getAttachments()"><i class="fa fa-paperclip" aria-hidden="true"></i> Attachments</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r13" data-toggle="tab"><i class="fa fa-question" aria-hidden="true"></i> Know Your Client Checklist</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r14" data-toggle="tab"><i class="fa fa-question" aria-hidden="true"></i> New Client Checklist</a>
                                    </li>
                                    <li>
                                        <a href="#tab-r15" data-toggle="tab"><i class="fa fa-question" aria-hidden="true"></i> System Overview </a>
                                    </li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane active" id="tab-r1">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateBankerForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="bankerList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Name</th>
                                                            <th style="text-align:left;">Branch</th>
                                                            <th style="text-align:left;">Account Name</th>
                                                            <th style="text-align:left;">Account No</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r2">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateAdvisorForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="advisorList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Name</th>
                                                            <th style="text-align:left;">Type of Service</th>
                                                            <th style="text-align:left;">Physical Address</th>
                                                            <th style="text-align:left;">Phone No</th>
                                                            <th style="text-align:left;">Email</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r3">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a href="@Url.Action("CreateKeyPersonnel", "KeyPersonnel")/?fileId=@Model.PermanentFileId" class="btn btn-info">
                                                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                                                    Add Personnel
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-striped table-bordered table-hover table-condensed" id="tblPersonnel">
                                                    <thead>
                                                        <tr>
                                                            <th>#</th>
                                                            <th>Full Name</th>
                                                            <th>Category</th>
                                                            <th>Position</th>
                                                            <th>Status</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r4">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateLawForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                                @if (ViewBag.ConclusionLaw == null)
                                                {
                                                    <a class="btn btn-info" onclick="showConfirmRegulationForm()" style="margin-left:10px;">
                                                        Add Conclusion
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a class="btn btn-info" onclick="showEditConfirmRegulationForm('@ViewBag.ConclusionLaw.Remarks', @ViewBag.ConclusionLaw.ClientInformationId)" style="margin-left:10px;">
                                                        Edit Conclusion
                                                    </a>
                                                }
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="lawList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align: left; width: 15%">Legal Framework</th>
                                                            <th style="text-align:left;width: 25%">Compliance Procedure</th>
                                                            <th style="text-align: left; width: 25%">Audit Approach</th>
                                                            <th style="text-align:left;">File</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r5">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateRelatedForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="relatedList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Name</th>
                                                            <th style="text-align:left;">Nature of Relationship</th>
                                                            <th style="text-align:left;">Nature of Transaction</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r6">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreatePolicyForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="policyList">
                                                    <thead>
                                                        <tr>
                                                            <th>#</th>
                                                            <th>Area of Accounts</th>
                                                            <th>Policy Description</th>
                                                            <th>Auditor Comments</th>
                                                            <th>Status</th>
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r7">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateEstimateForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                                @if (ViewBag.ConclusionEstimate == null)
                                                {
                                                    <a class="btn btn-info" onclick="showConfirmEstimateForm()" style="margin-left:10px;">
                                                        Add Conclusion
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a class="btn btn-info" onclick="showEditConfirmEstimateForm('@ViewBag.ConclusionEstimate.Remarks', @ViewBag.ConclusionEstimate.ClientInformationId)" style="margin-left:10px;">
                                                        Edit Conclusion
                                                    </a>
                                                }

                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="estimateList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Account Estimate</th>
                                                            <th style="text-align:left;">Basis for estimate</th>
                                                            <th style="text-align:left;">Audit approach</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r8">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">

                                                <a class="btn btn-info" onclick="showCreateNonAuditService()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>


                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="serviceList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Type of Service</th>
                                                            <th style="text-align:left;">Safeguard Required</th>
                                                            <th style="text-align:left;">Safeguard Opinion</th>
                                                            <th style="text-align:left;">Fee</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r9">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateControlForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="controlList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Business Area</th>
                                                            <th style="text-align:left;">Description of Control</th>
                                                            <th style="text-align:left;">Comment on Design of Control</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r10">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateAssetForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="assetList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Name</th>
                                                            <th style="text-align:left;">Category</th>
                                                            <th style="text-align:left;">Title</th>
                                                            <th style="text-align:left;">Location</th>
                                                            <th style="text-align:left;">Is Insured?</th>
                                                            <th style="text-align:left;">Has Morgage & Charges?</th>
                                                            <th style="text-align:left;">Cost of an Asset</th>
                                                            <th style="text-align:left;">Valuation Date</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r11">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateContractForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                                @*<a class="btn btn-success" href="#">
                                                        <i class="fa fa-print"></i> Print Contract
                                                    </a>*@
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="contractList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;">#</th>
                                                            <th style="text-align:left; width: 30%">Name</th>
                                                            <th style="text-align:left;">Duration (Months)</th>
                                                            <th style="text-align:left;">Parties of Contract</th>
                                                            <th style="text-align:left;">Value</th>
                                                            <th style="width:10%">File</th>
                                                            <th style="text-align:left;">Status</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r12">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-md-6" style="margin-bottom: 10px">
                                                <a class="btn btn-info" onclick="showCreateAttachmentForm()">
                                                    <i class="glyphicon glyphicon-plus"></i> Add New
                                                </a>
                                            </div>

                                            <div class="col-md-10">
                                                <table class="table table-bordered table-hover table-condensed" id="attachmentList">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:right;width:4%">#</th>
                                                            <th style="text-align:left;">Attachment Type</th>
                                                            <th style="text-align:left;">Preview</th>
                                                            <th style="text-align:center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r13">
                                        <div class="row">
                                            @if (ViewBag.KnowYourClientQns.Count == 0)
                                            {
                                                <div class="col-md-10">

                                                    <div class="alert alert-block alert-info">
                                                        <a class="close" data-dismiss="alert" href="#">×</a>
                                                        <center><span>The know your client checklist is not assigned for this Year</span></center>
                                                    </div>
                                                </div>
                                            }

                                            @if (ViewBag.KnowYourClientQns.Count > 0 && ViewBag.GetKycAnswers.Count == 0)
                                            {
                                                <div class="col-md-12">
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt><strong>Client Name:</strong></dt>
                                                            <dd>@ViewBag.kyc_ClientName</dd>
                                                            <dt><strong>File No.:</strong></dt>
                                                            <dd>@ViewBag.kyc_FileNo</dd>
                                                            <dt> <strong>Working Paper Ref:</strong></dt>
                                                            <dd> @ViewBag.kyc_WorkPaper</dd>
                                                        </dl>
                                                    </div>
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt>Questionnaire Title</dt>
                                                            <dd>Know Your Client Checklist</dd>
                                                            <dt><strong>Prepared By:</strong></dt>
                                                            <dd>@ViewBag.kyc_PreparedBy</dd>
                                                            <dt><strong>Prepared At:</strong></dt>
                                                            <dd>@ViewBag.kyc_PreparedAt</dd>
                                                        </dl>
                                                    </div>
                                                </div>

                                                <div style="" class="col-md-10">
                                                    @*BEGIN ADDING QUESTIONNAIRE ANSWERS*@
                                                    @using (Html.BeginForm("SaveQuestionnaire", "PermanentFile", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return validateForm(this);" }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="ModuleId" id="ModuleId" value="@Model.PermanentFileId" />
                                                        <input type="hidden" name="Category" id="Category" value="Know Your Client Checklist" />
                                                        <table id="example" class="table table-striped table-bordered table-hover">
                                                            <thead>
                                                                <tr>
                                                                </tr>
                                                            </thead>
                                                            @{
                                                                var n = 0;
                                                            }
                                                            <tbody>
                                                                <tr>
                                                                    <td colspan="3" style="">@ViewBag.kyc_Description</td>
                                                                </tr>
                                                                @foreach (var group in ((IEnumerable<IFMIS.Areas.Coadmis.Models.QuestionnairToAnswer>)ViewBag.KnowYourClientQns).GroupBy(a => a.QuestionnairTitleName))
                                                                {
                                                                    n++;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td colspan="13">
                                                                            <strong>
                                                                                <span class="sign"></span>
                                                                                @n.  @group.Key
                                                                            </strong>
                                                                        </td>
                                                                    </tr>

                                                                    int y = 0;
                                                                    int num = 0;

                                                                    foreach (var item in group.GroupBy(a => a.QuestionnairSubTitleName))
                                                                    {
                                                                        if (item.Key != null)
                                                                        {
                                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000;">
                                                                                <td colspan="13">
                                                                                    <strong>
                                                                                        <span class="sign"></span>
                                                                                        <i>@item.Key</i>
                                                                                    </strong>
                                                                                </td>
                                                                            </tr>
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;
                                                                                            if (data.Lebal == "Radio Button")
                                                                                            {
                                                                                                <td style="width: 15%">
                                                                                                    <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                </td>
                                                                                            }
                                                                                            else if (itemx.Key == "Text")
                                                                                            {
                                                                                                <td colspan="5">
                                                                                                    <label>@data.Value</label>
                                                                                                    <input type="hidden" id="QuestionIdForTextAreas-@y" name="QuestionIdForTextAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()" />
                                                                                                    <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required></textarea>
                                                                                                </td>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <td>
                                                                                                    <input type="checkbox" id="@data.Value" name="@data.Value" />
                                                                                                    <label>@data.Value</label>
                                                                                                </td>
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;
                                                                                            if (data.Lebal == "Radio Button")
                                                                                            {
                                                                                                <td style="width: 15%">
                                                                                                    <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                </td>
                                                                                            }
                                                                                            else if (itemx.Key == "Text")
                                                                                            {
                                                                                                <td colspan="5">
                                                                                                    <label>@data.Value</label>
                                                                                                    <input type="hidden" id="QuestionIdForTextAreas-@y" name="QuestionIdForTextAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()" />
                                                                                                    <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required></textarea>
                                                                                                </td>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <td>
                                                                                                    <input type="checkbox" id="@data.Value" name="@data.Value" />
                                                                                                    <label>@data.Value</label>
                                                                                                </td>
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="form-group" style="text-align: right">
                                                            <button type="submit" name="submit" class="btn btn-info" id="saveQuestionnaireForm">
                                                                <i class="fa fa-save"></i> Save
                                                                <img src="~/Content/img/loading.gif" class="loadingImg" />
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }

                                            @if (ViewBag.KnowYourClientQns.Count > 0 && ViewBag.GetKycAnswers.Count > 0)
                                            {
                                                <div class="col-md-12">
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt><strong>Client Name:</strong></dt>
                                                            <dd>@ViewBag.kyc_ClientName</dd>
                                                            <dt><strong>File No.:</strong></dt>
                                                            <dd>@ViewBag.kyc_FileNo</dd>
                                                            <dt> <strong>Working Paper Ref:</strong></dt>
                                                            <dd> @ViewBag.kyc_WorkPaper</dd>
                                                        </dl>
                                                    </div>
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt>Questionnaire Title</dt>
                                                            <dd>Know Your Client Checklist</dd>
                                                            <dt><strong>Prepared By:</strong></dt>
                                                            <dd>@ViewBag.kyc_PreparedBy</dd>
                                                            <dt><strong>Prepared At:</strong></dt>
                                                            <dd>@ViewBag.kyc_PreparedAt</dd>
                                                        </dl>
                                                    </div>
                                                </div>

                                                <div style="" class="col-md-10">
                                                    @*BEGIN ADDING QUESTIONNAIRE ANSWERS*@
                                                    @using (Html.BeginForm("EditQuestionnaire", "PermanentFile", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return validateForm(this);" }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="ModuleId" id="ModuleId" value="@Model.PermanentFileId" />
                                                        <input type="hidden" name="Category" id="Category" value="Know Your Client Checklist" />
                                                        <table id="example" class="table table-striped table-bordered table-hover">
                                                            <thead>
                                                                <tr>
                                                                </tr>
                                                            </thead>
                                                            @{
                                                                var n = 0;
                                                            }
                                                            <tbody>
                                                                <tr>
                                                                    <td colspan="3">@ViewBag.kyc_Description</td>
                                                                </tr>
                                                                @foreach (var group in ((IEnumerable<IFMIS.Areas.Coadmis.Models.QuestionnairToAnswer>)ViewBag.KnowYourClientQns).GroupBy(a => a.QuestionnairTitleName))
                                                                {
                                                                    n++;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td colspan="13">
                                                                            <strong>
                                                                                <span class="sign"></span>
                                                                                @n.  @group.Key
                                                                            </strong>
                                                                        </td>
                                                                    </tr>

                                                                    int y = 0;
                                                                    int num = 0;

                                                                    foreach (var item in group.GroupBy(a => a.QuestionnairSubTitleName))
                                                                    {
                                                                        if (item.Key != null)
                                                                        {
                                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000;">
                                                                                <td colspan="13">
                                                                                    <strong>
                                                                                        <span class="sign"></span>
                                                                                        <i>@item.Key</i>
                                                                                    </strong>
                                                                                </td>
                                                                            </tr>
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;

                                                                                            for (var nm = 0; nm < ViewBag.GetKycAnswers.Count; nm++)
                                                                                            {
                                                                                                if (ViewBag.GetKycAnswers[nm].QuestionId == itemData.Select(a => a.QuestionId).FirstOrDefault())
                                                                                                {
                                                                                                    if (itemx.Key == "Radio Button")
                                                                                                    {

                                                                                                        if (ViewBag.GetKycAnswers[nm].Answer == data.Value)
                                                                                                        {
                                                                                                            <td style="width: 15%">
                                                                                                                <input type="checkbox" class="answers" checked value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetKycAnswers[nm].Answer-@ViewBag.GetKycAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                        else if (ViewBag.GetKycAnswers[nm].Answer != data.Value)
                                                                                                        {
                                                                                                            <td style="width: 15%">
                                                                                                                <input type="checkbox" class="answers" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@data.Value-@ViewBag.GetKycAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                    }
                                                                                                    if (itemx.Key == "Text")
                                                                                                    {
                                                                                                        <td colspan="5">
                                                                                                            <label>@data.Value</label>
                                                                                                            <input type="hidden" id="QuestionIdForTxtAreas-@y" name="QuestionIdForTxtAreas[]" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetKycAnswers[nm].QuestionnaireAnswerDetailId" />
                                                                                                            <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required>@ViewBag.GetKycAnswers[nm].Answer</textarea>
                                                                                                        </td>
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;

                                                                                            for (var nm = 0; nm < ViewBag.GetKycAnswers.Count; nm++)
                                                                                            {
                                                                                                if (ViewBag.GetKycAnswers[nm].QuestionId == itemData.Select(a => a.QuestionId).FirstOrDefault())
                                                                                                {
                                                                                                    if (itemx.Key == "Radio Button")
                                                                                                    {

                                                                                                        if (ViewBag.GetKycAnswers[nm].Answer == data.Value)
                                                                                                        {
                                                                                                            <td style="width: 15%">
                                                                                                                <input type="checkbox" class="answers" checked value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetKycAnswers[nm].Answer-@ViewBag.GetKycAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                        else if (ViewBag.GetKycAnswers[nm].Answer != data.Value)
                                                                                                        {
                                                                                                            <td style="width: 15%">
                                                                                                                <input type="checkbox" class="answers" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@data.Value-@ViewBag.GetKycAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                    }
                                                                                                    if (itemx.Key == "Text")
                                                                                                    {
                                                                                                        <td colspan="5">
                                                                                                            <label>@data.Value</label>
                                                                                                            <input type="hidden" id="QuestionIdForTxtAreas-@y" name="QuestionIdForTxtAreas[]" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetKycAnswers[nm].QuestionnaireAnswerDetailId" />
                                                                                                            <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required>@ViewBag.GetKycAnswers[nm].Answer</textarea>
                                                                                                        </td>
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="form-group" style="text-align: right">
                                                            <button type="submit" name="submit" class="btn btn-info" id="saveQuestionnaireForm">
                                                                <i class="fa fa-save"></i> Save
                                                                <img src="~/Content/img/loading.gif" class="loadingImg" />
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r14">
                                        <div class="row">
                                            @if (ViewBag.NewClientQns.Count == 0)
                                            {
                                                <div class="col-md-10">

                                                    <div class="alert alert-block alert-info">
                                                        <a class="close" data-dismiss="alert" href="#">×</a>
                                                        <center><span>The new client checklist is not assigned for this Year</span></center>
                                                    </div>
                                                </div>
                                            }

                                            @if (ViewBag.NewClientQns.Count > 0 && ViewBag.GetNcAnswers.Count == 0)
                                            {
                                                <div class="col-md-12">
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt><strong>Client Name:</strong></dt>
                                                            <dd>@ViewBag.nc_ClientName</dd>
                                                            <dt><strong>File No.:</strong></dt>
                                                            <dd>@ViewBag.nc_FileNo</dd>
                                                            <dt> <strong>Working Paper Ref:</strong></dt>
                                                            <dd> @ViewBag.nc_WorkPaper</dd>
                                                        </dl>
                                                    </div>
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt>Questionnaire Title</dt>
                                                            <dd>New Client Checklist</dd>
                                                            <dt><strong>Prepared By:</strong></dt>
                                                            <dd>@ViewBag.nc_PreparedBy</dd>
                                                            <dt><strong>Prepared At:</strong></dt>
                                                            <dd>@ViewBag.nc_PreparedAt</dd>
                                                        </dl>
                                                    </div>
                                                </div>

                                                <div style="" class="col-md-10">
                                                    @*BEGIN ADDING QUESTIONNAIRE ANSWERS*@
                                                    @using (Html.BeginForm("SaveQuestionnaire", "PermanentFile", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return validateForm(this);" }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="ModuleId" id="ModuleId" value="@Model.PermanentFileId" />
                                                        <input type="hidden" name="Category" id="Category" value="New Client Checklist" />
                                                        <table id="example" class="table table-striped table-bordered table-hover">
                                                            <thead>
                                                                <tr>
                                                                </tr>
                                                            </thead>
                                                            @{
                                                                var n = 0;
                                                            }
                                                            <tbody>
                                                                <tr>
                                                                    <td colspan="3">@ViewBag.nc_Description</td>
                                                                </tr>
                                                                @foreach (var group in ((IEnumerable<IFMIS.Areas.Coadmis.Models.QuestionnairToAnswer>)ViewBag.NewClientQns).GroupBy(a => a.QuestionnairTitleName))
                                                                {
                                                                    n++;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td colspan="13">
                                                                            <strong>
                                                                                <span class="sign"></span>
                                                                                @n.  @group.Key
                                                                            </strong>
                                                                        </td>
                                                                    </tr>

                                                                    int y = 0;
                                                                    int num = 0;

                                                                    foreach (var item in group.GroupBy(a => a.QuestionnairSubTitleName))
                                                                    {
                                                                        if (item.Key != null)
                                                                        {
                                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000;">
                                                                                <td colspan="13">
                                                                                    <strong>
                                                                                        <span class="sign"></span>
                                                                                        <i>@item.Key</i>
                                                                                    </strong>
                                                                                </td>
                                                                            </tr>
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;
                                                                                            if (data.Lebal == "Radio Button")
                                                                                            {
                                                                                                <td style="width: 10%">
                                                                                                    <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                </td>
                                                                                            }
                                                                                            else if (itemx.Key == "Text")
                                                                                            {
                                                                                                <td colspan="5">
                                                                                                    <label>@data.Value</label>
                                                                                                    <input type="hidden" id="QuestionIdForTextAreas-@y" name="QuestionIdForTextAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()" />
                                                                                                    <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required></textarea>
                                                                                                </td>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <td>
                                                                                                    <input type="checkbox" id="@data.Value" name="@data.Value" />
                                                                                                    <label>@data.Value</label>
                                                                                                </td>
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;
                                                                                            if (data.Lebal == "Radio Button")
                                                                                            {
                                                                                                <td style="width: 10%">
                                                                                                    <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                </td>
                                                                                            }
                                                                                            else if (itemx.Key == "Text")
                                                                                            {
                                                                                                <td colspan="5">
                                                                                                    <label>@data.Value</label>
                                                                                                    <input type="hidden" id="QuestionIdForTextAreas-@y" name="QuestionIdForTextAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()" />
                                                                                                    <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required></textarea>
                                                                                                </td>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <td>
                                                                                                    <input type="checkbox" id="@data.Value" name="@data.Value" />
                                                                                                    <label>@data.Value</label>
                                                                                                </td>
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="form-group" style="text-align: right">
                                                            <button type="submit" name="submit" class="btn btn-info" id="saveQuestionnaireForm">
                                                                <i class="fa fa-save"></i> Save
                                                                <img src="~/Content/img/loading.gif" class="loadingImg" />
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }

                                            @if (ViewBag.NewClientQns.Count > 0 && ViewBag.GetNcAnswers.Count > 0)
                                            {
                                                <div class="col-md-12">
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt><strong>Client Name:</strong></dt>
                                                            <dd>@ViewBag.nc_ClientName</dd>
                                                            <dt><strong>File No.:</strong></dt>
                                                            <dd>@ViewBag.nc_FileNo</dd>
                                                            <dt> <strong>Working Paper Ref:</strong></dt>
                                                            <dd> @ViewBag.nc_WorkPaper</dd>
                                                        </dl>
                                                    </div>
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt>Questionnaire Title</dt>
                                                            <dd>New Client Checklist</dd>
                                                            <dt><strong>Prepared By:</strong></dt>
                                                            <dd>@ViewBag.nc_PreparedBy</dd>
                                                            <dt><strong>Prepared At:</strong></dt>
                                                            <dd>@ViewBag.nc_PreparedAt</dd>
                                                        </dl>
                                                    </div>
                                                </div>

                                                <div style="" class="col-md-10">
                                                    @*BEGIN ADDING QUESTIONNAIRE ANSWERS*@
                                                    @using (Html.BeginForm("EditQuestionnaire", "PermanentFile", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return validateForm(this);" }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="ModuleId" id="ModuleId" value="@Model.PermanentFileId" />
                                                        <input type="hidden" name="Category" id="Category" value="New Client Checklist" />
                                                        <table id="example" class="table table-striped table-bordered table-hover">
                                                            <thead>
                                                                <tr>
                                                                </tr>
                                                            </thead>
                                                            @{
                                                                var n = 0;
                                                            }
                                                            <tbody>
                                                                <tr>
                                                                    <td colspan="3">@ViewBag.nc_Description</td>
                                                                </tr>
                                                                @foreach (var group in ((IEnumerable<IFMIS.Areas.Coadmis.Models.QuestionnairToAnswer>)ViewBag.NewClientQns).GroupBy(a => a.QuestionnairTitleName))
                                                                {
                                                                    n++;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td colspan="13">
                                                                            <strong>
                                                                                <span class="sign"></span>
                                                                                @n.  @group.Key
                                                                            </strong>
                                                                        </td>
                                                                    </tr>

                                                                    int y = 0;
                                                                    int num = 0;

                                                                    foreach (var item in group.GroupBy(a => a.QuestionnairSubTitleName))
                                                                    {
                                                                        if (item.Key != null)
                                                                        {
                                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000;">
                                                                                <td colspan="13">
                                                                                    <strong>
                                                                                        <span class="sign"></span>
                                                                                        <i>@item.Key</i>
                                                                                    </strong>
                                                                                </td>
                                                                            </tr>
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;

                                                                                            for (var nm = 0; nm < ViewBag.GetNcAnswers.Count; nm++)
                                                                                            {
                                                                                                if (ViewBag.GetNcAnswers[nm].QuestionId == itemData.Select(a => a.QuestionId).FirstOrDefault())
                                                                                                {
                                                                                                    if (itemx.Key == "Radio Button")
                                                                                                    {

                                                                                                        if (ViewBag.GetNcAnswers[nm].Answer == data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" checked value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetNcAnswers[nm].Answer-@ViewBag.GetNcAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                        else if (ViewBag.GetNcAnswers[nm].Answer != data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@data.Value-@ViewBag.GetNcAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                    }
                                                                                                    if (itemx.Key == "Text")
                                                                                                    {
                                                                                                        <td colspan="5">
                                                                                                            <label>@data.Value</label>
                                                                                                            <input type="hidden" id="QuestionIdForTxtAreas-@y" name="QuestionIdForTxtAreas[]" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetNcAnswers[nm].QuestionnaireAnswerDetailId" />
                                                                                                            <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required>@ViewBag.GetNcAnswers[nm].Answer</textarea>
                                                                                                        </td>
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;

                                                                                            for (var nm = 0; nm < ViewBag.GetNcAnswers.Count; nm++)
                                                                                            {
                                                                                                if (ViewBag.GetNcAnswers[nm].QuestionId == itemData.Select(a => a.QuestionId).FirstOrDefault())
                                                                                                {
                                                                                                    if (itemx.Key == "Radio Button")
                                                                                                    {

                                                                                                        if (ViewBag.GetNcAnswers[nm].Answer == data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" checked value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetNcAnswers[nm].Answer-@ViewBag.GetNcAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                        else if (ViewBag.GetNcAnswers[nm].Answer != data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@data.Value-@ViewBag.GetNcAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                    }
                                                                                                    if (itemx.Key == "Text")
                                                                                                    {
                                                                                                        <td colspan="5">
                                                                                                            <label>@data.Value</label>
                                                                                                            <input type="hidden" id="QuestionIdForTxtAreas-@y" name="QuestionIdForTxtAreas[]" value="@itemData.Select(a=>a.QuestionId).FirstOrDefault()_@ViewBag.GetNcAnswers[nm].QuestionnaireAnswerDetailId" />
                                                                                                            <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required>@ViewBag.GetNcAnswers[nm].Answer</textarea>
                                                                                                        </td>
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="form-group" style="text-align: right">
                                                            <button type="submit" name="submit" class="btn btn-info" id="saveQuestionnaireForm">
                                                                <i class="fa fa-save"></i> Save
                                                                <img src="~/Content/img/loading.gif" class="loadingImg" />
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab-r15">
                                        @if (ViewBag.SystemOverviewQns.Count == 0)
                                        {
                                            <div class="col-md-10">

                                                <div class="alert alert-block alert-info">
                                                    <a class="close" data-dismiss="alert" href="#">×</a>
                                                    <center><span>Systems overview is not assigned for this Year</span></center>
                                                </div>
                                            </div>
                                        }
                                        <div class="row">
                                            @if (ViewBag.SystemOverviewQns.Count != 0 && ViewBag.GetSoAnswers.Count == 0)
                                            {
                                                <div class="col-md-12">
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt><strong>Client Name:</strong></dt>
                                                            <dd>@ViewBag.so_ClientName</dd>
                                                            <dt><strong>File No.:</strong></dt>
                                                            <dd>@ViewBag.so_FileNo</dd>
                                                            <dt> <strong>Working Paper Ref:</strong></dt>
                                                            <dd> @ViewBag.so_WorkPaper</dd>
                                                        </dl>
                                                    </div>
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt>Questionnaire Title</dt>
                                                            <dd>Systems Overview</dd>
                                                            <dt><strong>Prepared By:</strong></dt>
                                                            <dd>@ViewBag.so_PreparedBy</dd>
                                                            <dt><strong>Prepared At:</strong></dt>
                                                            <dd>@ViewBag.so_PreparedAt</dd>
                                                        </dl>
                                                    </div>
                                                </div>

                                                <div style="" class="col-md-10">
                                                    @*BEGIN ADDING QUESTIONNAIRE ANSWERS*@
                                                    @using (Html.BeginForm("SaveQuestionnaire", "PermanentFile", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return validateForm(this);" }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="ModuleId" id="ModuleId" value="@Model.PermanentFileId" />
                                                        <input type="hidden" name="Category" id="Category" value="Systems Overview" />
                                                        <table id="example" class="table table-striped table-bordered table-hover">
                                                            <thead>
                                                                <tr>
                                                                </tr>
                                                            </thead>
                                                            @{
                                                                var n = 0;
                                                            }
                                                            <tbody>
                                                                <tr>
                                                                    <td colspan="3">@ViewBag.so_Description</td>
                                                                </tr>
                                                                @foreach (var group in ((IEnumerable<IFMIS.Areas.Coadmis.Models.QuestionnairToAnswer>)ViewBag.SystemOverviewQns).GroupBy(a => a.QuestionnairTitleName))
                                                                {
                                                                    n++;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td colspan="13">
                                                                            <strong>
                                                                                <span class="sign"></span>
                                                                                @n.  @group.Key
                                                                            </strong>
                                                                        </td>
                                                                    </tr>

                                                                    int y = 0;
                                                                    int num = 0;

                                                                    foreach (var item in group.GroupBy(a => a.QuestionnairSubTitleName))
                                                                    {
                                                                        if (item.Key != null)
                                                                        {
                                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000;">
                                                                                <td colspan="13">
                                                                                    <strong>
                                                                                        <span class="sign"></span>
                                                                                        <i>@item.Key</i>
                                                                                    </strong>
                                                                                </td>
                                                                            </tr>
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;
                                                                                            if (data.Lebal == "Radio Button")
                                                                                            {
                                                                                                <td style="width: 10%">
                                                                                                    <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                </td>
                                                                                            }
                                                                                            else if (itemx.Key == "Text")
                                                                                            {
                                                                                                <td colspan="5">
                                                                                                    <label>@data.Value</label>
                                                                                                    <input type="hidden" id="QuestionIdForTextAreas-@y" name="QuestionIdForTextAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()" />
                                                                                                    <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required></textarea>
                                                                                                </td>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <td>
                                                                                                    <input type="checkbox" id="@data.Value" name="@data.Value" />
                                                                                                    <label>@data.Value</label>
                                                                                                </td>
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;
                                                                                            if (data.Lebal == "Radio Button")
                                                                                            {
                                                                                                <td style="width: 10%">
                                                                                                    <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                </td>
                                                                                            }
                                                                                            else if (itemx.Key == "Text")
                                                                                            {
                                                                                                <td colspan="5">
                                                                                                    <label>@data.Value</label>
                                                                                                    <input type="hidden" id="QuestionIdForTextAreas-@y" name="QuestionIdForTextAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()" />
                                                                                                    <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required></textarea>
                                                                                                </td>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <td>
                                                                                                    <input type="checkbox" id="@data.Value" name="@data.Value" />
                                                                                                    <label>@data.Value</label>
                                                                                                </td>
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="form-group" style="text-align: right">
                                                            <button type="submit" name="submit" class="btn btn-info" id="saveQuestionnaireForm">
                                                                <i class="fa fa-save"></i> Save
                                                                <img src="~/Content/img/loading.gif" class="loadingImg" />
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }

                                            @if (ViewBag.SystemOverviewQns.Count > 0 && ViewBag.GetSoAnswers.Count > 0)
                                            {
                                                <div class="col-md-12">
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt><strong>Client Name:</strong></dt>
                                                            <dd>@ViewBag.so_ClientName</dd>
                                                            <dt><strong>File No.:</strong></dt>
                                                            <dd>@ViewBag.so_FileNo</dd>
                                                            <dt> <strong>Working Paper Ref:</strong></dt>
                                                            <dd> @ViewBag.so_WorkPaper</dd>
                                                        </dl>
                                                    </div>
                                                    <div class="col-md-5" style="padding-top:20px">
                                                        <dl class="dl-horizontal">
                                                            <dt>Questionnaire Title</dt>
                                                            <dd>Systems Overview</dd>
                                                            <dt><strong>Prepared By:</strong></dt>
                                                            <dd>@ViewBag.so_PreparedBy</dd>
                                                            <dt><strong>Prepared At:</strong></dt>
                                                            <dd>@ViewBag.so_PreparedAt</dd>
                                                        </dl>
                                                    </div>
                                                </div>

                                                <div style="" class="col-md-10">
                                                    @*BEGIN ADDING QUESTIONNAIRE ANSWERS*@
                                                    @using (Html.BeginForm("EditQuestionnaire", "PermanentFile", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return validateForm(this);" }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="ModuleId" id="ModuleId" value="@Model.PermanentFileId" />
                                                        <input type="hidden" name="Category" id="Category" value="Systems Overview" />
                                                        <table id="example" class="table table-striped table-bordered table-hover">
                                                            <thead>
                                                                <tr>
                                                                </tr>
                                                            </thead>
                                                            @{
                                                                var n = 0;
                                                            }
                                                            <tbody>
                                                                <tr>
                                                                    <td colspan="3">@ViewBag.so_Description</td>
                                                                </tr>
                                                                @foreach (var group in ((IEnumerable<IFMIS.Areas.Coadmis.Models.QuestionnairToAnswer>)ViewBag.SystemOverviewQns).GroupBy(a => a.QuestionnairTitleName))
                                                                {
                                                                    n++;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td colspan="13">
                                                                            <strong>
                                                                                <span class="sign"></span>
                                                                                @n.  @group.Key
                                                                            </strong>
                                                                        </td>
                                                                    </tr>

                                                                    int y = 0;
                                                                    int num = 0;

                                                                    foreach (var item in group.GroupBy(a => a.QuestionnairSubTitleName))
                                                                    {
                                                                        if (item.Key != null)
                                                                        {
                                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000;">
                                                                                <td colspan="13">
                                                                                    <strong>
                                                                                        <span class="sign"></span>
                                                                                        <i>@item.Key</i>
                                                                                    </strong>
                                                                                </td>
                                                                            </tr>
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;

                                                                                            for (var nm = 0; nm < ViewBag.GetSoAnswers.Count; nm++)
                                                                                            {
                                                                                                if (ViewBag.GetSoAnswers[nm].QuestionId == itemData.Select(a => a.QuestionId).FirstOrDefault())
                                                                                                {
                                                                                                    if (itemx.Key == "Radio Button")
                                                                                                    {

                                                                                                        if (ViewBag.GetSoAnswers[nm].Answer == data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" checked value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@ViewBag.GetSoAnswers[nm].Answer-@ViewBag.GetSoAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                        else if (ViewBag.GetSoAnswers[nm].Answer != data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value-@ViewBag.GetSoAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                    }
                                                                                                    if (itemx.Key == "Text")
                                                                                                    {
                                                                                                        <td colspan="5">
                                                                                                            <label>@data.Value</label>
                                                                                                            <input type="hidden" id="QuestionIdForTxtAreas-@y" name="QuestionIdForTxtAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@ViewBag.GetSoAnswers[nm].QuestionnaireAnswerDetailId" />
                                                                                                            <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required>@ViewBag.GetSoAnswers[nm].Answer</textarea>
                                                                                                        </td>
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var itemData in item.GroupBy(a => a.Question))
                                                                            {
                                                                                num++;
                                                                                <tr>
                                                                                    <td>@itemData.Key</td>
                                                                                    @foreach (var itemx in itemData.GroupBy(a => a.Lebal))
                                                                                    {
                                                                                        foreach (var data in itemx)
                                                                                        {
                                                                                            y++;

                                                                                            for (var nm = 0; nm < ViewBag.GetSoAnswers.Count; nm++)
                                                                                            {
                                                                                                if (ViewBag.GetSoAnswers[nm].QuestionId == itemData.Select(a => a.QuestionId).FirstOrDefault())
                                                                                                {
                                                                                                    if (itemx.Key == "Radio Button")
                                                                                                    {

                                                                                                        if (ViewBag.GetSoAnswers[nm].Answer == data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" checked value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@ViewBag.GetSoAnswers[nm].Answer-@ViewBag.GetSoAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                        else if (ViewBag.GetSoAnswers[nm].Answer != data.Value)
                                                                                                        {
                                                                                                            <td style="width: 10%">
                                                                                                                <input type="checkbox" class="answers" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@data.Value-@ViewBag.GetSoAnswers[nm].QuestionnaireAnswerDetailId" name="Answers[]" id="Answers-@num" onclick="AllowSingleSelection(this);" /> @data.Value
                                                                                                            </td>
                                                                                                        }
                                                                                                    }
                                                                                                    if (itemx.Key == "Text")
                                                                                                    {
                                                                                                        <td colspan="5">
                                                                                                            <label>@data.Value</label>
                                                                                                            <input type="hidden" id="QuestionIdForTxtAreas-@y" name="QuestionIdForTxtAreas[]" value="@itemData.Select(a => a.QuestionId).FirstOrDefault()_@ViewBag.GetSoAnswers[nm].QuestionnaireAnswerDetailId" />
                                                                                                            <textarea class="form-control answers" id="Answers-@y" rows="4" cols="150" name="Answers[]" required>@ViewBag.GetSoAnswers[nm].Answer</textarea>
                                                                                                        </td>
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="form-group" style="text-align: right">
                                                            <button type="submit" name="submit" class="btn btn-info" id="saveQuestionnaireForm">
                                                                <i class="fa fa-save"></i> Save
                                                                <img src="~/Content/img/loading.gif" class="loadingImg" />
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="form-actions row" style="margin: 10px">
                                    <div class="col-md-1">
                                        <a class="btn btn-default" href='@Url.Action("PermanentFileList", "PermanentFile")'><i class="glyphicon glyphicon-arrow-left"></i> Back</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@* Banker Model *@
<div class="modal fade" id="divBankerModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 650px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Bank Detail</h4>
            </div>
            <div class="modal-body" id="divBankerModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveBanker()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveBankerLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditBankerModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 650px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Bank Detail</h4>
            </div>
            <div class="modal-body" id="divEditBankerModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateBanker()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditBankerLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Banker Model *@

@* Advisor Model *@
<div class="modal fade" id="divAdvisorModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Proffessional Advisor</h4>
            </div>
            <div class="modal-body" id="divAdvisorModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveAdvisor()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveAdvisorLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditAdvisorModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Proffessional Advisor</h4>
            </div>
            <div class="modal-body" id="divEditAdvisorModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateAdvisor()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditAdvisorLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Advisor Model *@

@* Laws Model *@
<div class="modal fade" id="divLawModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Law</h4>
            </div>
            <div class="modal-body" id="divLawModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveLaw()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveLawLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditLawModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Law</h4>
            </div>
            <div class="modal-body" id="divEditLawModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateLaw()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditLawLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Laws Model *@

@* Related parts Model *@
<div class="modal fade" id="divRelatedModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Related Part Details</h4>
            </div>
            <div class="modal-body" id="divRelatedModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveRelated()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveRelatedLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditRelatedModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Related Part Details</h4>
            </div>
            <div class="modal-body" id="divEditRelatedModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateRelated()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditRelatedLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Related Parts Model *@

@* Accounting policy Model *@
<div class="modal fade" id="divPolicyModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Accounting Policy</h4>
            </div>
            <div class="modal-body" id="divPolicyModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="savePolicy()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="savePolicyLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@* Non Audit Service Model *@
<div class="modal fade" id="divNonAuditModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Non Audit Service</h4>
            </div>
            <div class="modal-body" id="divNonAuditModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveNonService()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveNonAuditService" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditPolicyModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Accounting Policy</h4>
            </div>
            <div class="modal-body" id="divEditPolicyModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updatePolicy()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditPolicyLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Accounting policy Modal *@

@* Accounting estimate Model *@
<div class="modal fade" id="divEstimateModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Accounting Estimate</h4>
            </div>
            <div class="modal-body" id="divEstimateModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveEstimate()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEstimateLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditEstimateModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Accounting Estimate</h4>
            </div>
            <div class="modal-body" id="divEditEstimateModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateEstimate()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditEstimateLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Accounting policy Modal *@

@* Non-audit service Model *@
<div class="modal fade" id="divServiceModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Service</h4>
            </div>
            <div class="modal-body" id="divServiceModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveService()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveServiceLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="AddThreat" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Threat</h4>
            </div>
            <div class="modal-body" id="AddThreatBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveThreatList()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveThreatInfor" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@**Add Threat*@
<div class="modal fade" id="divEditServiceModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Service</h4>
            </div>
            <div class="modal-body" id="divEditServiceModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateService()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditServiceLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Non-audit service Modal *@

@* Add conclusion Modal*@
<div class="modal fade" id="AddConclusion" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width:750px;">
        @Html.AntiForgeryToken()
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Conclusion</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <label id="Conclusion_i" class="col-md-2"> Conclusion</label>
                    <div class="col-md-10">
                        <textarea id="Conclusion" name="Conclusion" class="form-control" rows="15" required></textarea>
                    </div>
                    <input id="ModuleName" name="ModuleName" type="hidden" />
                    <input id="clientId" name="clientId" type="hidden" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveConclusion()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveConclusionLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Add conclusion Modal *@

@* Internal control Model *@
<div class="modal fade" id="divControlModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Internal Control Design</h4>
            </div>
            <div class="modal-body" id="divControlModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveControl()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveControlLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditControlModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Internal Control</h4>
            </div>
            <div class="modal-body" id="divEditControlModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateControl()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditControlLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Internal control Modal *@

@* Asset Model *@
<div class="modal fade" id="divAssetModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Asset</h4>
            </div>
            <div class="modal-body" id="divAssetModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveAsset()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveAssetLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditAssetModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Asset</h4>
            </div>
            <div class="modal-body" id="divEditAssetModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateAsset()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditAssetLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Asset Modal *@

@* Contract Model *@
<div class="modal fade" id="divContractModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Contract and Agreement</h4>
            </div>
            <div class="modal-body" id="divContractModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveContract()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveContractLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="divEditContractModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Update Contract and Agreement</h4>
            </div>
            <div class="modal-body" id="divEditContractModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="updateContract()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveEditContractLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* Contract Modal *@

@* Attachment Model *@
<div class="modal fade" id="divAttachmentModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 750px">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add Attachment</h4>
            </div>
            <div class="modal-body" id="divAttachmentModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-info role-save" onclick="saveAttachment()">
                    <i class="fa fa-save"></i>
                    <img src="~/Content/img/loading.gif" id="saveAttachmentLoader" />
                    Save
                </button>
                <button class="btn btn-default role-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="attachmentModal" style="left:4%">
    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">
            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
            </div>
            <div class="modal-body">
                <div>
                    <div class="widget-body" id="attachment_body" style="height:auto">
                        <div id="detailId"><iframe height="700" id="attachmentImage" width="100%" src=""></iframe></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@* Attachment Modal *@

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->
    <script type="text/javascript">
        $(document).ready(function () {
            $("select").select2();
            $("#saveThreatInfor").hide();
            $('#hide-menu > span > a').trigger('click');
        });

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            localStorage.setItem('lastTab', $(this).attr('href'));
        });
        var lastTab = localStorage.getItem('lastTab');

        if (lastTab) {
            $('[href="' + lastTab + '"]').tab('show');
            if (lastTab == "#tab-r2") {
                $("#divLoader").show();
                getAdvisors();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r3") {
                $("#divLoader").show();
                getPersonnels()
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r4") {
                $("#divLoader").show();
                getRegulations();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r5") {
                $("#divLoader").show();
                getRelated();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r6") {
                $("#divLoader").show();
                getPolicies();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r7") {
                $("#divLoader").show();
                getEstimates();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r8") {
                $("#divLoader").show();
                getService();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r9") {
                $("#divLoader").show();
                getControl();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r10") {
                $("#divLoader").show();
                getAssets();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r11") {
                $("#divLoader").show();
                getContracts();
                $("#divLoader").hide();
            }

            if (lastTab == "#tab-r12") {
                $("#divLoader").show();
                getAttachments();
                $("#divLoader").hide();
            }
        }

        //**** Starting Banker process ****
        var datatableBanker = $("#bankerList").dataTable();

        $.ajax({
            type: "get",
            url: '@Url.Action("GetBankers", "Banker")/?fileId='+@Model.PermanentFileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatableBanker.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                    datatableBanker.fnAddData([i + 1,
                        data[i]["BankName"],
                        data[i]["BranchName"],
                            data[i]["AccountName"],
                            data[i]["AccountNo"],
                            data[i]["Status"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                    <span class="caret"></span\
                                        <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="#" onclick="showEditBankerForm('+ data[i]["BankerId"]+')">Edit</a></li>\
                                    <li><a href="#" onclick="deleteBanker('+ data[i]["BankerId"] + ')">Cancel</a></li>\
                                </ul>\
                            </div>\ '
                        ]);
                }
            },
            failure: function (error)
            {
                swal(error, { icon: "error" });
            }
        });

        function showCreateBankerForm() {
            $("#divLoader").show();
            $("#saveBankerLoader").hide();
            var url = '@Url.Action("Create", "Banker")';
            $("#divLoader").show();

            $("#divBankerModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divBankerModalBody").html("Error on creating banker, contact system support");
                }
                $("#divBankerModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditBankerForm(id) {
            $("#divLoader").show();
            $("#saveEditBankerLoader").hide();
            var url = '@Url.Action("Edit", "Banker")?id='+id;
            $("#divLoader").show();

            $("#divEditBankerModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditBankerModalBody").html("Error on updating banker, contact system support");
                }
                $("#divEditBankerModal").modal("show");
                $("#divLoader").hide();
            });
        }

        $("#divBankerModal").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass("alert-danger").addClass("alert-info");
            $(".role-save").css("display", "inline-block");
            $("#divBankerModalBody").html("");
        });

        $("#divEditBankerModal").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass("alert-danger").addClass("alert-info");
            $(".role-save").css("display", "inline-block");
            $("#divEditBankerModalBody").html("");
        });

        function saveBanker(){
            debugger;
            var BankID = $("#BankID").val();
            var BranchName = $("#BranchName").val();
            var AccountName = $("#AccountName").val();
            var AccountNo = $("#AccountNo").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Status = $("#Status").val();

            if (BankID == '') {
                swal("Please select bank", { icon: "warning" });
                return false;
            }

            if (AccountName == '') {
                swal("Please add account name", { icon: "warning" });
                return false;
            }

            if (AccountNo == '') {
                swal("Please add account number", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('BankID', BankID);
            formData.append('BranchName', BranchName);
            formData.append('AccountName', AccountName);
            formData.append('AccountNo', AccountNo);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postBankerFormData(formData);
        }

        function postBankerFormData(formData) {
            $("#saveBankerLoader").show();
            $("#saveBankerLoader").toggle(true);
            var url = '@Url.Action("create", "Banker")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divModal').modal('hide');
                    $("#saveBankerLoader").toggle(true);
                    if (response == "Success") {
                        swal("Bank detail added successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Bank detail already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveBankerLoader").toggle(false);
                        swal("Failed to add bank detail", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function updateBanker() {
            debugger;
            var Id = $("#BankerId").val();
            var BankID = $("#BankID").val();
            var BranchName = $("#BranchName").val();
            var AccountName = $("#AccountName").val();
            var AccountNo = $("#AccountNo").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Status = $("#Status").val();

            if (BankID == '') {
                swal("Please select bank", { icon: "warning" });
                return false;
            }

            if (AccountName == '') {
                swal("Please add account name", { icon: "warning" });
                return false;
            }

            if (AccountNo == '') {
                swal("Please add account number", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('BankID', BankID);
            formData.append('BranchName', BranchName);
            formData.append('AccountName', AccountName);
            formData.append('AccountNo', AccountNo);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('BankerId', Id);

            putBankerFormData(formData);
        }

        function putBankerFormData(formData) {
            $("#saveEditBankerLoader").show();
            $("#saveEditBankerLoader").toggle(true);
            var url = '@Url.Action("Edit", "Banker")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditBankerModalBody').modal('hide');
                    $("#saveEditBankerLoader").toggle(true);
                    if (response == "Success") {
                        swal("Bank detail updated successfully", { icon: "success" })
                            .then((m) => {
                                window.location.reload();
                            });
                    } else if (response == "Duplicate") {
                        swal("Bank detail already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Bank detail not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditBankerLoader").toggle(false);
                        swal("Failed to update bank detail", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function deleteBanker(id) {
            swal({
                text: "Are you Sure you want to delete this bank detail",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteBankerData(id);
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });

        }

        function deleteBankerData(id) {
            $("#divLoader").show();
            var url = '@Url.Action("Delete", "Banker")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Bank detail deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    }
                    else {
                        swal(response);
                    }
                    $("#divLoader").hide();
                },
                failure: function (error) {
                    $("#divLoader").hide();
                    swal(error, { icon: "error" });
                }
            });
        }
        //**** End Banker process ****


        //**** Start Proffessional Advisor process ****
        function getAdvisors() {
            var datatableAdvisor = $("#advisorList").dataTable();

            $.ajax({
                type: "get",
                url: '@Url.Action("GetProffessionalAdvisor", "ProffessionalAdvisor")/?fileId='+@Model.PermanentFileId,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    datatableAdvisor.fnClearTable();
                    for (var i = 0; i < data.length; i++)
                        {
                        datatableAdvisor.fnAddData([i + 1,
                                data[i]["Name"],
                                data[i]["TypeOfService"],
                                data[i]["PhysicalAddress"],
                                data[i]["PhoneNumber"],
                                data[i]["Email"],
                                data[i]["Status"],
                                '<div class="btn-group" id="drop-' + i + '">\
                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                        <span class="caret"></span\
                                            <span class="sr-only"></span>\
                                    </button>\
                                    <ul class="dropdown-menu">\
                                        <li><a href="#" onclick="showEditAdvisorForm('+ data[i]["ProffessionalAdvisorId"] + ')">Edit</a></li>\
                                        <li><a href="#" onclick="deleteAdvisor('+ data[i]["ProffessionalAdvisorId"] + ')">Cancel</a></li>\
                                    </ul>\
                                </div>\ '
                            ]);
                    }
                },
                failure: function (error)
                {
                    swal(error, { icon: "error" });
                }
            });
        }

        function showCreateAdvisorForm() {
            $("#saveAdvisorLoader").hide();
            $("#divLoader").show();
            var url = '@Url.Action("Create", "ProffessionalAdvisor")';
            $("#divLoader").show();

            $("#divAdvisorModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divAdvisorModalBody").html("Error on creating proffessional advisor, contact system support");
                }
                $("#divAdvisorModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditAdvisorForm(id) {
            $("#saveEditAdvisorLoader").hide();
            var url = '@Url.Action("Edit", "ProffessionalAdvisor")?id='+id;
            $("#divLoader").show();

            $("#divEditAdvisorModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditAdvisorModalBody").html("Error on updating proffessional advisor, contact system support");
                }
                $("#divEditAdvisorModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveAdvisor() {
            debugger;
            var Name = $("#Name").val();
            var PhysicalAddress = $("#PhysicalAddress").val();
            var TypeOfService = $("#TypeofServiceId").val();
            var PhoneNumber = $("#PhoneNumber").val();
            var Email = $("#Email").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (Name == '') {
                swal("Please add name", { icon: "warning" });
                return false;
            }

            if (PhysicalAddress == '') {
                swal("Please add physical address", { icon: "warning" });
                return false;
            }

            if (TypeOfService == '') {
                swal("Please select type of service", { icon: "warning" });
                return false;
            }

            if (PhoneNumber == '') {
                swal("Please add phone number", { icon: "warning" });
                return false;
            }

            if (Email == '') {
                swal("Please add email", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('TypeofServiceId', TypeOfService);
            formData.append('PhysicalAddress', PhysicalAddress);
            formData.append('PhoneNumber', PhoneNumber);
            formData.append('Email', Email);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postAdvisorFormData(formData);
        }

        function postAdvisorFormData(formData) {
            $("#saveAdvisorLoader").show();
            $("#saveAdvisorLoader").toggle(true);
            var url = '@Url.Action("create", "ProffessionalAdvisor")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divAdvisorModal').modal('hide');
                    $("#saveAdvisorLoader").toggle(true);
                    if (response == "Success") {
                        swal("Advisor created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Advisor already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveAdvisorLoader").toggle(false);
                        swal("Failed to create advisor", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function updateAdvisor() {
            var Name = $("#Name").val();
            var PhysicalAddress = $("#PhysicalAddress").val();
            var TypeOfService = $("#TypeofServiceId").val();
            var PhoneNumber = $("#PhoneNumber").val();
            var Email = $("#Email").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Status = $("#Status").val();
            var Id = $("#ProffessionalAdvisorId").val();

            if (Name == '') {
                swal("Please add name", { icon: "warning" });
                return false;
            }

            if (PhysicalAddress == '') {
                swal("Please add physical address", { icon: "warning" });
                return false;
            }

            if (TypeOfService == '') {
                swal("Please select type of service", { icon: "warning" });
                return false;
            }

            if (PhoneNumber == '') {
                swal("Please add phone number", { icon: "warning" });
                return false;
            }

            if (Email == '') {
                swal("Please add email", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('TypeofServiceId', TypeOfService);
            formData.append('PhysicalAddress', PhysicalAddress);
            formData.append('PhoneNumber', PhoneNumber);
            formData.append('Email', Email);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('ProffessionalAdvisorId', Id);

            putAdvisorFormData(formData);
        }

        function putAdvisorFormData(formData) {
            $("#saveEditAdvisorLoader").show();
            $("#saveEditAdvisorLoader").toggle(true);
            var url = '@Url.Action("Edit", "ProffessionalAdvisor")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditAdvisorModalBody').modal('hide');
                    $("#saveEditAdvisorLoader").toggle(true);
                    if (response == "Success") {
                        swal("Advisor updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Advisor already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Advisor not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditAdvisorLoader").toggle(false);
                        swal("Failed to update advisor", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function deleteAdvisor(id) {
            swal({
                text: "Are you Sure you want to delete this advisor",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteAdvisorData(id);
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });

        }

        function deleteAdvisorData(id) {
            var url = '@Url.Action("Delete", "ProffessionalAdvisor")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Advisor deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    }
                    else {
                        swal(response);
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }
        //****End Proffessional Advisor process****

        //***** Start Key Personnel process *********
        function getPersonnels(){
            var datatable = $("#tblPersonnel").dataTable();

            $.ajax({
            type: "get",
                url: '@Url.Action("GetKeyPersonnel", "KeyPersonnel")/?fileId=@Model.PermanentFileId',
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatable.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                        datatable.fnAddData([i + 1,
                            data[i]["FirstName"] + " " + data[i]["LastName"],
                            data[i]["CategoryType"],
                            data[i]["Position"],
                            data[i]["OperationalStatus"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                 <span class="caret"></span\
                                     <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="@Url.Action("Details", "KeyPersonnel")?id='+ data[i]["KeyPersonId"] + '">Details</a></li>\
                                    <li><a href="@Url.Action("Edit", "KeyPersonnel")?id='+ data[i]["KeyPersonId"] + '">Edit</a></li>\
                                    <li><a href="#" onclick="deletePersonnel('+ data[i]["KeyPersonId"] + ')">Cancel</a></li>\
                                </ul>\
                            </div>\ '
                        ]);
                }
            },
            failure: function (error)
            {
                swal(error);
            }
        });
        }

        function deletePersonnel(id) {
            swal({
                text: "Are you Sure you want to delete this personnel",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteKeyPersonnel(id);
                } else {
                    swal("Cancelled", "No changes was made");
                }
            });

        }

        function deleteKeyPersonnel(id) {
             var url = '@Url.Action("Delete", "KeyPersonnel")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Key Personnel deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").show();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        //***** end Key Personnel process ***********

        //****Start Laws and regulations  process****.
        function getRegulations() {
            var datatableLaw = $("#lawList").dataTable();
            $.ajax({
                type: "get",
                url: '@Url.Action("GetLawsRegulationList", "LawRegulation")/?fileId='+@Model.PermanentFileId,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    datatableLaw.fnClearTable();
                    for (var i = 0; i < data.length; i++)
                        {
                        datatableLaw.fnAddData([i + 1,
                            data[i]["LegalFramework"],
                            data[i]["ProcedureCompliance"],
                            data[i]["AuditApproach"],
                            '<a onclick="preview(\'' + data[i]["FilePath"] + '\')" style="text-decoration: none; cursor: pointer;"><i class="fa fa-paperclip" aria-hidden="true"></i> Preview</a>',
                            data[i]["Status"],
                                '<div class="btn-group" id="drop-' + i + '">\
                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                        <span class="caret"></span\
                                            <span class="sr-only"></span>\
                                    </button>\
                                    <ul class="dropdown-menu">\
                                        <li><a href="#" onclick="showEditLawForm('+ data[i]["LawsRegulationId"] + ')">Edit</a></li>\
                                        <li><a href="#" onclick="deleteLaw('+ data[i]["LawsRegulationId"] + ')">Cancel</a></li>\
                                    </ul>\
                                </div>\ '
                            ]);
                    }
                },
                failure: function (error)
                {
                    swal(error, { icon: "error" });
                }
            });
        }

        function showCreateLawForm() {
            $("#saveLawLoader").hide();
            var url = '@Url.Action("Create", "LawRegulation")';
            $("#divLoader").show();

            $("#divLawModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divLawModalBody").html("Error on creating law, contact system support");
                }
                $("#divLawModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showConfirmRegulationForm() {
            $("#divLoader").show();
            $("#AddConclusion").modal("show");
            $("#saveConclusionLoader").hide();
            $("#ModuleName").val("Laws and Regulations");
            $("#clientId").val(null);
            $("#divLoader").hide();
        }

        function showEditConfirmRegulationForm(conclusion, clientId) {
            $("#divLoader").show();
            $("#AddConclusion").modal("show");
            $("#saveConclusionLoader").hide();
            $("#ModuleName").val("Laws and Regulations");
            $("#Conclusion").val(conclusion);
            $("#clientId").val(clientId);
            $("#divLoader").hide();
        }

        $("#AddConclusion").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass("alert-danger").addClass("alert-info");
            $(".role-save").css("display", "inline-block");
            $("#Conclusion").val("");
        });

        function saveConclusion() {
            var conclusion = $("#Conclusion").val();
            var moduleName = $("#ModuleName").val();
            var clientId = $("#clientId").val();

            if (conclusion == null || conclusion == "") {
                swal("Please add conclusion", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Conclusion', conclusion);
            formData.append('ModuleName', moduleName);

            formData.append('ClientInformationId', clientId);
            formData.append('PermanentFileId', @Model.PermanentFileId);

            $("#saveConclusionLoader").show();
            var url = '@Url.Action("SaveConclusion", "PermanentFile")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#AddConclusion').modal('hide');
                    $("#saveConclusionLoader").toggle(true);
                    if (response == "Success") {
                        swal("Conclusion added successfully", { icon: "success" })
                            .then((m) => {
                                window.location.reload();
                            });
                    } else if (response == "No regulation") {
                        swal("Please add atleast one regulation before concluding", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "No estimate") {
                        swal("Please add atleast one estimate before concluding", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if(response == "Duplicate") {
                        swal("Conclusion already added for this module", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveConclusionLoader").toggle(false);
                        swal("Failed to create conclusion", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function showEditLawForm(id) {
            $("#saveEditLawLoader").hide();
            var url = '@Url.Action("Edit", "LawRegulation")?id='+id;
            $("#divLoader").show();

            $("#divEditLawModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditLawModalBody").html("Error on updating law, contact system support");
                }
                $("#divEditLawModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveLaw() {
            debugger;
            var LegalFrameworkId = $("#LegalFrameworkId").val();
            var ProcedureCompliance = $("#ProcedureCompliance").val();
            var AuditApproach = $("#AuditApproach").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var FileName = $("#FileName").val();

            if (LegalFrameworkId == '') {
                swal("Please select legal framework", { icon: "warning" });
                return false;
            }

           if (FileName == '' || FileName == null) {
                swal("Please attach legal framework", { icon: "warning" });
                return false;
            }

            var file = document.querySelector("#FileName");
            if (/\.(pdf)$/i.test(file.files[0].name) === false) {
                swal({
                    text: "Please Upload File (Only PDF is Required)",
                    icon: "warning"
                })
                return false;
            }

            if ((file.Length == 0 || file.Length > 2048)) {
                swal({
                    text: "Invalid file size, file size should be less than 2MB",
                    icon: "warning"
                })
                return false;
            }

            if (ProcedureCompliance == '') {
                swal("Please add procedure compliance", { icon: "warning" });
                return false;
            }

            if (AuditApproach == '') {
                swal("Please add audit approach", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('LegalFrameworkId', LegalFrameworkId);
            formData.append('ProcedureCompliance', ProcedureCompliance);
            formData.append('AuditApproach', AuditApproach);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('FileName', $('#FileName')[0].files[0]);
            formData.append('Status', Status);

            postLawFormData(formData);
        }

        function postLawFormData(formData) {
            $("#saveLawLoader").show();
            $("#saveLawLoader").toggle(true);
            var url = '@Url.Action("create", "LawRegulation")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divLawModal').modal('hide');
                    $("#saveLawLoader").toggle(true);
                    if (response == "Success") {
                        swal("Law created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Law already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveLawLoader").toggle(false);
                        swal("Failed to create law", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function updateLaw() {
            debugger;
            var LegalFrameworkId = $("#LegalFrameworkId").val();
            var ProcedureCompliance = $("#ProcedureCompliance").val();
            var AuditApproach = $("#AuditApproach").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var LawsRegulationId = $("#LawsRegulationId").val();

            if (LegalFrameworkId == '') {
                swal("Please select legal framework", { icon: "warning" });
                return false;
            }

            if (ProcedureCompliance == '') {
                swal("Please add procedure compliance", { icon: "warning" });
                return false;
            }

            if (AuditApproach == '') {
                swal("Please add audit approach", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('LegalFrameworkId', LegalFrameworkId);
            formData.append('ProcedureCompliance', ProcedureCompliance);
            formData.append('AuditApproach', AuditApproach);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('LawsRegulationId', LawsRegulationId);
            formData.append('Status', Status);

            putLawFormData(formData);
        }

        function putLawFormData(formData) {
            $("#saveEditLawLoader").show();
            $("#saveEditLawLoader").toggle(true);
            var url = '@Url.Action("Edit", "LawRegulation")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditLawModalBody').modal('hide');
                    $("#saveEditLawLoader").toggle(true);
                    if (response == "Success") {
                        swal("Law updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Law already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Law not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditLawLoader").toggle(false);
                        swal("Failed to update law", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function deleteLaw(id) {
            swal({
                text: "Are you Sure you want to delete this law",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteLawData(id);
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });

        }

        function deleteLawData(id) {
                var url = '@Url.Action("Delete", "LawRegulation")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Law deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }
        //****Ending Laws and regulations  process****


        //**** Start Related Parts process ****
        function getRelated() {
            var datatableRelated = $("#relatedList").dataTable();

            $.ajax({
            type: "get",
            url: '@Url.Action("GetRelatedParts", "RelatedPartDetail")/?fileId='+@Model.PermanentFileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatableRelated.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                    datatableRelated.fnAddData([i + 1,
                        data[i]["Name"],
                        data[i]["Relationship"],
                        data[i]["Transaction"],
                        data[i]["Status"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                    <span class="caret"></span\
                                        <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="#" onclick="showEditRelatedForm('+ data[i]["RelatedPartId"] + ')">Edit</a></li>\
                                    <li><a href="#" onclick="deleteRelatedPart('+ data[i]["RelatedPartId"] + ')">Cancel</a></li>\
                                </ul>\
                            </div>\ '
                        ]);
                }
            },
            failure: function (error)
            {
                swal(error, { icon: "error" });
            }
        });
        }

        function showCreateRelatedForm() {
            $("#saveRelatedLoader").hide();
            var url = '@Url.Action("Create", "RelatedPartDetail")';
            $("#divLoader").show();

            $("#divRelatedModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divRelatedModalBody").html("Error on creating related part, contact system support");
                }
                $("#divRelatedModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditRelatedForm(id) {
            $("#saveEditRelatedLoader").hide();
            var url = '@Url.Action("Edit", "RelatedPartDetail")?id='+id;
            $("#divLoader").show();

            $("#divEditRelatedModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditRelatedModalBody").html("Error on updating related part, contact system support");
                }
                $("#divEditRelatedModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveRelated() {
            var RelationshipId = $("#RelationshipId").val();
            var Name = $("#Name").val();
            var Transaction = $("#RelatedTransaction").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (RelationshipId == '') {
                swal("Please select relationship", { icon: "warning" });
                return false;
            }

            if (Name == '') {
                swal("Please add name", { icon: "warning" });
                return false;
            }

            if (Transaction == '') {
                swal("Please add transaction", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('RelationshipId', RelationshipId);
            formData.append('RelatedTransaction', Transaction);
            formData.append('Name', Name);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postRelatedFormData(formData);
        }

        function postRelatedFormData(formData) {
            $("#saveRelatedLoader").show();
            $("#saveRelatedLoader").toggle(true);
            var url = '@Url.Action("create", "RelatedPartDetail")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divRelatedModal').modal('hide');
                    $("#saveRelatedLoader").toggle(true);
                    if (response == "Success") {
                        swal("Related part created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Related part already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveRelatedLoader").toggle(false);
                        swal("Failed to create related part", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function updateRelated() {
            var RelationshipId = $("#RelationshipId").val();
            var RelatedPartId = $("#RelatedPartId").val();
            var Name = $("#Name").val();
            var Transaction = $("#RelatedTransaction").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (RelationshipId == '') {
                swal("Please select relationship", { icon: "warning" });
                return false;
            }

            if (Name == '') {
                swal("Please add name", { icon: "warning" });
                return false;
            }

            if (Transaction == '') {
                swal("Please add transaction", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('RelationshipId', RelationshipId);
            formData.append('RelatedTransaction', Transaction);
            formData.append('Name', Name);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('RelatedPartId', RelatedPartId);

            putRelatedFormData(formData);
        }

        function putRelatedFormData(formData) {
            $("#saveEditRelatedLoader").show();
            $("#saveEditRelatedLoader").toggle(true);
            var url = '@Url.Action("Edit", "RelatedPartDetail")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditRelatedModal').modal('hide');
                    $("#saveEditRelatedLoader").toggle(true);
                    if (response == "Success") {
                        swal("Related part updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Related part already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Related part not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditRelatedLoader").toggle(false);
                        swal("Failed to update related part", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function deleteRelatedPart(id) {
            swal({
                text: "Are you Sure you want to delete this related part",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteRelatedData(id);
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });

        }

        function deleteRelatedData(id) {
                var url = '@Url.Action("Delete", "RelatedPartDetail")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Related part deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }
        //**** Ending Related Parts process ****


        //****Start Accounting policy process****
        function getPolicies() {
            var datatablePolicy = $("#policyList").dataTable();
            $.ajax({
            type: "get",
            url: '@Url.Action("GetAccountingPolicy", "AccountingPolicy")/?fileId='+@Model.PermanentFileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatablePolicy.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                    datatablePolicy.fnAddData([i + 1,
                        data[i]["AreaOfAccount"],
                        data[i]["AccountingPolicyName"],
                        data[i]["AuditorComment"],
                        data[i]["Status"],
                        '<div class="btn-group" id="drop-' + i + '">\
                            <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                <span class="caret"></span\
                                    <span class="sr-only"></span>\
                            </button>\
                            <ul class="dropdown-menu">\
                                <li><a href="#" onclick="showEditPolicyModel('+ data[i]["AccountingPolicyId"] +')">Edit</a></li>\
                                <li><a href="#" onclick="deletePolicy('+ data[i]["AccountingPolicyId"] + ')">Cancel</a></li>\
                            </ul>\
                        </div>\ '
                    ]);
                }
            },
            failure: function (error)
            {
                swal(error);
            }
        });
        }

        function showCreatePolicyForm() {
            $("#savePolicyLoader").hide();
            var url = '@Url.Action("Create", "AccountingPolicy")';
            $("#divLoader").show();

            $("#divPolicyModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divPolicyModalBody").html("Error on creating policy, contact system support");
                }
                $("#divPolicyModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditPolicyModel(id) {
            $("#saveEditPolicyLoader").hide();
            var url = '@Url.Action("Edit", "AccountingPolicy")?id='+id;
            $("#divLoader").show();

            $("#divEditPolicyModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditPolicyModalBody").html("Error on updating policy, contact system support");
                }
                $("#divEditPolicyModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function savePolicy() {
            var AreaOfAccountId = $("#AreaOfAccountId").val();
            var AccountingPolicyName = $("#AccountingPolicyName").val();
            var AuditorComment = $("#AuditorComment").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (AreaOfAccountId == '') {
                swal("Please select area of account", { icon: "warning" });
                return false;
            }

            if (AccountingPolicyName == '') {
                swal("Please enter name", { icon: "warning" });
                return false;
            }


            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('AreaOfAccountId', AreaOfAccountId);
            formData.append('AccountingPolicyName', AccountingPolicyName);
            formData.append('AuditorComment', AuditorComment);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postPolicyFormData(formData);
        }




        function postPolicyFormData(formData) {
            $("#savePolicyLoader").show();
            $("#savePolicyLoader").toggle(true);
            var url = '@Url.Action("create", "AccountingPolicy")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divPolicyModal').modal('hide');
                    $("#savePolicyLoader").toggle(true);
                    if (response == "Success") {
                        swal("Accounting policy created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Accounting policy already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#savePolicyLoader").toggle(false);
                        swal("Failed to create accounting policy", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function updatePolicy() {
            debugger;
            var AreaOfAccountId = $("#AreaOfAccountId").val();
            var AccountingPolicyName = $("#AccountingPolicyName").val();
            var AuditorComment = $("#AuditorComment").val();
            var AccountingPolicyId = $("#AccountingPolicyId").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (AreaOfAccountId == '') {
                swal("Please select area of account", { icon: "warning" });
                return false;
            }

            if (AccountingPolicyName == '') {
                swal("Please enter name", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('AreaOfAccountId', AreaOfAccountId);
            formData.append('AccountingPolicyName', AccountingPolicyName);
            formData.append('AuditorComment', AuditorComment);
            formData.append('AccountingPolicyId', AccountingPolicyId);
            formData.append('Status', Status);
            formData.append('PermanentFileId', PermanentFileId);

            putPolicyFormData(formData);
        }

        function putPolicyFormData(formData) {
            $("#saveEditPolicyLoader").show();
            $("#saveEditPolicyLoader").toggle(true);
            var url = '@Url.Action("Edit", "AccountingPolicy")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditPolicyModal').modal('hide');
                    $("#saveEditPolicyLoader").toggle(true);
                    if (response == "Success") {
                        swal("Accounting policy updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Accounting policy already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Accounting policy not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditPolicyLoader").toggle(false);
                        swal("Failed to update accounting policy", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function deletePolicyData(id) {
                var url = '@Url.Action("Delete", "AccountingPolicy")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Accounting policy deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }
        //****Ending Accounting  process****


         ///Non Audit Service start here
        function showCreateNonAuditService() {
            $("#saveNonAuditService").hide();
            var url = '@Url.Action("Create", "NonAuditService")';
            $("#divLoader").show();

            $("#divNonAuditModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divNonAuditModalBody").html("Error on creating policy, contact system support");
                }
                $("#divNonAuditModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditPolicyModel(id) {
            $("#saveEditPolicyLoader").hide();
            var url = '@Url.Action("Edit", "AccountingPolicy")?id='+id;
            $("#divLoader").show();

            $("#divEditPolicyModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditPolicyModalBody").html("Error on updating policy, contact system support");
                }
                $("#divEditPolicyModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveNonService() {
            var TypeOfServiceId = $("#TypeOfServiceId").val();
            var SafeguardRequired = $("#SafeguardRequired").val();
            var Opinion = $("#Opinion").val();
            var ThreatApplied = $("#ThreatApplied").val();
            var Fee = $("#Fee").val();
            var Status = "Active";
            var PermanentFileId = @Model.PermanentFileId;

            if (TypeOfServiceId == '') {
                swal("Please select Service Type", { icon: "warning" });
                return false;
            }

            if (SafeguardRequired == '') {
                swal("Please enter Safe guard ", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('TypeOfServiceId', TypeOfServiceId);
            formData.append('SafeguardRequired', SafeguardRequired);
            formData.append('Opinion', Opinion);
            formData.append('ThreatApplied', ThreatApplied);
            formData.append('Fee', Fee);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postNonAuditServiceFormData(formData);
        }


        function postNonAuditServiceFormData(formData) {
            $("#savePolicyLoader").show();
            $("#savePolicyLoader").toggle(true);
            var url = '@Url.Action("create", "NonAuditService")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divPolicyModal').modal('hide');
                    $("#savePolicyLoader").toggle(true);
                    if (response == "Success") {
                        swal("Non Audit Service created successfully", { icon: "success" })
                            .then((m) => {
                                //$("#divLoader").show();
                                $("#divLoader").hide();
                                $("#divNonAuditModal").modal("hide");
                                window.location.reload();
                            });
                    } else if (response == "Duplicate") {
                        swal("Non Audit Service already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#savePolicyLoader").toggle(false);
                        swal("Failed to create Non Audit Service", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function deletePolicy(id) {
            swal({
                text: "Are you Sure you want to delete this policy",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deletePolicyData(id);
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });

        }

        //****Start Accounting estimate process****

        function getEstimates(){
            var datatableEstimate = $("#estimateList").dataTable();
            $.ajax({
            type: "get",
            url: '@Url.Action("GetAccountingEstimates", "AccountingEstimate")/?fileId='+@Model.PermanentFileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatableEstimate.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                    datatableEstimate.fnAddData([i + 1,
                        data[i]["Name"],
                        data[i]["BasisEstimate"],
                        data[i]["AuditApproach"],
                        data[i]["Status"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                    <span class="caret"></span\
                                        <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="#" onclick="showEditEstimateForm('+ data[i]["AccountingEstimateId"] + ')">Edit</a></li>\
                                    <li><a href="#" onclick="deleteEstimate('+ data[i]["AccountingEstimateId"] + ')">Cancel</a></li>\
                                </ul>\
                            </div>\ '
                        ]);
                }
            },
            failure: function (error)
            {
                swal(error, { icon: "error" });
            }
        });
        }

        function showCreateEstimateForm() {
            $("#saveEstimateLoader").hide();
            var url = '@Url.Action("Create", "AccountingEstimate")';
            $("#divLoader").show();

            $("#divEstimateModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEstimateModalBody").html("Error on creating accounting estimate, contact system support");
                }
                $("#divEstimateModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditEstimateForm(id) {
            $("#saveEditEstimateLoader").hide();
            var url = '@Url.Action("Edit", "AccountingEstimate")?id='+id;
            $("#divLoader").show();

            $("#divEditEstimateModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditEstimateModalBody").html("Error on updating accounting estimate, contact system support");
                }
                $("#divEditEstimateModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showConfirmEstimateForm() {
            $("#AddConclusion").modal("show");
            $("#saveConclusionLoader").hide();
            $("#ModuleName").val("Significant Accounting Estimates");
            $("#clientId").val(null);
        }

        function showEditConfirmEstimateForm(conclusion, clientId) {
            $("#AddConclusion").modal("show");
            $("#saveConclusionLoader").hide();
            $("#ModuleName").val("Significant Accounting Estimates");
            $("#Conclusion").val(conclusion);
            $("#clientId").val(clientId);
        }

        function saveEstimate() {
            var Name = $("#Name").val();
            var BasisEstimate = $("#BasisEstimate").val();
            var AuditApproach = $("#AuditApproach").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (Name == '') {
                swal("Please add name", { icon: "warning" });
                return false;
            }

            if (BasisEstimate == '') {
                swal("Please enter basis of estimate", { icon: "warning" });
                return false;
            }

            if (AuditApproach == '') {
                swal("Please enter audit approach", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('BasisEstimate', BasisEstimate);
            formData.append('AuditApproach', AuditApproach);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postEstimateFormData(formData);
        }

        function postEstimateFormData(formData) {
            $("#saveEstimateLoader").show();
            $("#saveEstimateLoader").toggle(true);
            var url = '@Url.Action("create", "AccountingEstimate")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEstimateModal').modal('hide');
                    $("#saveEstimateLoader").toggle(true);
                    if (response == "Success") {
                        swal("Accounting estimate created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Accounting estimate already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEstimateLoader").toggle(false);
                        swal("Failed to create accounting estimate", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function updateEstimate() {
            var Name = $("#Name").val();
            var BasisEstimate = $("#BasisEstimate").val();
            var AuditApproach = $("#AuditApproach").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var AccountingEstimateId = $("#AccountingEstimateId").val();

            if (Name == '') {
                swal("Please add name", { icon: "warning" });
                return false;
            }

            if (BasisEstimate == '') {
                swal("Please enter basis of estimate", { icon: "warning" });
                return false;
            }

            if (AuditApproach == '') {
                swal("Please enter audit approach", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('BasisEstimate', BasisEstimate);
            formData.append('AuditApproach', AuditApproach);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('AccountingEstimateId', AccountingEstimateId);

            putEstimateFormData(formData);
        }

        function putEstimateFormData(formData) {
            $("#saveEditEstimateLoader").show();
            $("#saveEditEstimateLoader").toggle(true);
            var url = '@Url.Action("Edit", "AccountingEstimate")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditEstimateModal').modal('hide');
                    $("#saveEditEstimateLoader").toggle(true);
                    if (response == "Success") {
                        swal("Accounting estimate updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Accounting estimate already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Accounting estimate not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditEstimateLoader").toggle(false);
                        swal("Failed to update accounting estimate", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, { icon: "error" });
                }
            });
        }

        function deleteEstimate(id) {
            swal({
                text: "Are you Sure you want to delete this estimate",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteEstimateData(id);
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });

        }

        function deleteEstimateData(id) {
                var url = '@Url.Action("Delete", "AccountingEstimate")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Accounting estimate deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.reload();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        //****ending Accounting estimate process****


        //****Start nod-audit service process****
        function getService(){
            var datatableService = $("#serviceList").dataTable();
            $.ajax({
            type: "get",
            url: '@Url.Action("GetNonAuditServices", "NonAuditService")/?fileId='+@Model.PermanentFileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatableService.fnClearTable();
                for (var i = 0; i < data.length; i++)
                    {
                    datatableService.fnAddData([i + 1,
                        data[i]["TypeOfService"],
                        data[i]["SafeguardRequired"],
                        data[i]["Opinion"],
                        data[i]["Fee"].toLocaleString(),
                        data[i]["Status"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                    <span class="caret"></span\
                                        <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="#" onclick="showEditServiceForm('+ data[i]["NonAuditServiceId"] + ')">Edit</a></li>\
                                    <li><a href="#" onclick="showAddThreatForm('+ data[i]["NonAuditServiceId"] + ')">Add Threats</a></li>\
                                    <li><a href="@Url.Action("Details", "NonAuditService")/?id=' + data[i]["NonAuditServiceId"] + '">Details</a></li>\
                                    <li><a href="#" onclick="deleteService('+ data[i]["NonAuditServiceId"] + ')">Cancel</a></li>\
                                </ul>\
                            </div>\ '
                        ]);
                }
            },
            failure: function (error)
            {
                swal(error);
            }
        });
        }

        function showCreateServiceForm() {
            $("#saveServiceLoader").hide();
            var url = '@Url.Action("Create", "NonAuditService")';
            $("#divLoader").show();

            $("#divServiceModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divServiceModalBody").html("Error on creating service, contact system support");
                }
                $("#divServiceModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showAddThreatForm(id) {
            $("#AddThreat").modal("show");
            $("#saveThreatLoader").hide();
            $("#NonAuditServiceId").val(id);
            updateThreatsTable(id);
        }

        function showEditServiceForm(id) {
            $("#saveEditServiceLoader").hide();
            var url = '@Url.Action("Edit", "NonAuditService")?id='+id;
            $("#divLoader").show();

            $("#divEditServiceModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditServiceModalBody").html("Error on updating service, contact system support");
                }
                $("#divEditServiceModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveService() {
            debugger;
            var TypeOfServiceId = $("#TypeOfServiceId").val();
            var ThreatApplied = $("#ThreatApplied").val();
            var SafeguardRequired = $("#SafeguardRequired").val();
            var Opinion = $("#Opinion").val();
            var Fee = $("#Fee").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (TypeOfServiceId == '') {
                swal("Please select service", { icon: "warning" });
                return false;
            }

            if (ThreatApplied == '') {
                swal("Please select threats", { icon: "warning" });
                return false;
            }

            if (SafeguardRequired == '') {
                swal("Please enter safeguard required", { icon: "warning" });
                return false;
            }

            if (Opinion == '') {
                swal("Please enter safeguard opinion", { icon: "warning" });
                return false;
            }

            if (Fee == '') {
                swal("Please enter fee", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = {
                'TypeOfServiceId': TypeOfServiceId,
                'ThreatApplied': ThreatApplied,
                'SafeguardRequired': SafeguardRequired,
                'Opinion': Opinion,
                'Fee': Fee,
                'PermanentFileId': PermanentFileId,
                'Status': Status
            };

            //formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());

            postServiceFormData(formData);
        }

        function postServiceFormData(formData) {
            debugger;
            $("#saveServiceLoader").show();
            $("#saveServiceLoader").toggle(true);
            var url = '@Url.Action("create", "NonAuditService")';
            $.ajax({
                url: url,
                data: JSON.stringify(formData),
                type: 'POST',
                dataType: 'JSON',
                contentType: 'application/json',
                processData: false,
                success: function (response) {
                    $('#divServiceModal').modal('hide');
                    $("#saveServiceLoader").toggle(true);
                    if (response == "Success") {
                        swal("Service created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Service already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveServiceLoader").toggle(false);
                        swal("Failed to create service", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function updateService() {
            debugger;
            var TypeOfServiceId = $("#TypeOfServiceId").val();
            var ThreatApplied = $("#ThreatApplied").val();
            var SafeguardRequired = $("#SafeguardRequired").val();
            var Opinion = $("#Opinion").val();
            var Fee = $("#Fee2").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Id = $("#NonAuditServiceId").val();

            if (TypeOfServiceId == '') {
                swal("Please select service", { icon: "warning" });
                return false;
            }

            if (ThreatApplied == '') {
                swal("Please select threats", { icon: "warning" });
                return false;
            }

            if (SafeguardRequired == '') {
                swal("Please enter safeguard required", { icon: "warning" });
                return false;
            }

            if (Opinion == '') {
                swal("Please enter safeguard opinion", { icon: "warning" });
                return false;
            }

            if (Fee == '' || Fee == null) {
                swal("Please enter fee", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('TypeOfServiceId', TypeOfServiceId);
            formData.append('ThreatApplied', ThreatApplied);
            formData.append('SafeguardRequired', SafeguardRequired);
            formData.append('Opinion', Opinion);
            formData.append('Fee', Fee);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('NonAuditServiceId', Id);

            putServiceFormData(formData);
        }

        function putServiceFormData(formData) {
        $("#saveEditServiceLoader").show();
        $("#saveEditServiceLoader").toggle(true);
        var url = '@Url.Action("Edit", "NonAuditService")';
        $.ajax({
            url: url,
            data: formData,
            type: 'POST',
            contentType: false,
            processData: false,
            success: function (response) {
                $('#divEditServiceModal').modal('hide');
                $("#saveEditServiceLoader").toggle(true);
                if (response == "Success") {
                    swal("Service updated successfully", { icon: "success" })
                        .then((m) => {
                            $("#divLoader").show();
                            window.location.reload();
                            $("#divLoader").hide();
                        });
                } else if (response == "Duplicate") {
                    swal("Service already exist", { icon: "warning" })
                        .then((m) => {
                            return;
                        });
                } else if (response == "Invalid") {
                    swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                        .then((m) => {
                            return;
                        });
                } else if (response == "Not Found") {
                    swal("Service not found", { icon: "warning" })
                        .then((m) => {
                            return;
                        });
                } else {
                    $("#saveEditServiceLoader").toggle(false);
                    swal("Failed to update service", { icon: "warning" });
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }

        allThreats = [];
        threats = [];
        var saveThreats = function () {
            debugger;
            $("#saveThreatLoader").show();
            var Name = $("#ThreatApplied").val();
            var NonAuditServiceId = $("#NonAuditServiceId").val();

            if (Name == null || Name == "") {
                swal("Please select threat", { icon: "warning" });
                return false;
            }

            var formData = new FormData();
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name)
            formData.append('NonAuditServiceId', NonAuditServiceId);

            var url = '@Url.Action("SaveThreat", "NonAuditService")';
            $.ajax({
                type: "POST",
                url: url,
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    $("#saveThreatLoader").hide();
                    switch (response) {
                        case "Success":
                            swal("Threat added successfully", { icon: "success" });

                            allThreats.push({
                                Name: $("#ThreatApplied").text()
                            })
                            threats.push($("#ThreatApplied").val());
                            updateThreatsTable(NonAuditServiceId);
                            document.getElementById("ThreatApplied").value = "Select threats applied";
                            break;

                        case "Duplicate":
                            swal("Threat Already Exists", { icon: "warning" });
                            break;

                        default:
                            swal("An error Occur while adding threat, Please Contact Administrator", { icon: "error" });
                            break;
                    }
                },
                failure: function (response) {
                    swal({
                        text: response.d,
                        icon: "error"
                    });
                }
            });
            }

        var dataTableList = $('#add_threat').dataTable({ searching: false, paging: false, info: false });

        function updateThreatsTable(id) {
            debugger;
            var url = '@Url.Action("GetServiceThreat", "NonAuditService")?id=' + id;
            $("#divLoader").show();
            $("#AddThreatBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#AddThreatBody").html("Error on updating service, contact system support");
                }
                $("#AddThreat").modal("show");
                $("#divLoader").hide();
            });
            
        }

        function threatRemove(index, id, serviceId) {
            var ServiceId = serviceId;
            var url = '@Url.Action("RemoveThreats", "NonAuditService")';
            swal({
                text: "Are you Sure you want to delete this service",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        type: "post",
                        url: url,
                        data: { "id": id },
                        contenttype: "application/json; charset=utf-8",
                        datatype: "json",
                        success: function (response) {
                            if (response = "Success") {
                                swal("Threat deleted Successfully", { icon: "success" });

                                allThreats.splice(index, 1);
                                threats.splice(index, 1);
                                updateThreatsTable(ServiceId);
                            }
                        },
                        failure: function (response) {
                            swal({
                                text: response.d,
                                icon: "error"
                            });
                        }
                    });
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });
        }

        function deleteService(id) {
        swal({
            text: "Are you Sure you want to delete this service",
            icon: "warning",
            buttons: [
                'No',
                'Yes'
            ],
        }).then(function (isConfirm) {
            if (isConfirm) {
                deleteServiceData(id);
            } else {
                swal("Cancelled", "No changes was made", {icon: "info"});
            }
        });
    }

        function deleteServiceData(id) {
            var url = '@Url.Action("Delete", "NonAuditService")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Service deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Reviewed") {
                        swal("Reviewed Service cannot be deleted", { icon: "warning" });
                    }
                    else {
                        swal(response);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        //****ending Accounting estimate process****


        //**** Start internal control process ****
        function getControl() {
        var datatableControl = $("#controlList").dataTable();

        $.ajax({
            type: "get",
            url: '@Url.Action("GetInternalControl", "InternalControl")/?fileId=' +@Model.PermanentFileId,
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                datatableControl.fnClearTable();
                for (var i = 0; i < data.length; i++) {
                    datatableControl.fnAddData([i + 1,
                        data[i]["BusinessArea"],
                        data[i]["Description"],
                        data[i]["Comment"],
                        data[i]["Status"],
                        '<div class="btn-group" id="drop-' + i + '">\
                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                    <span class="caret"></span\
                                        <span class="sr-only"></span>\
                                </button>\
                                <ul class="dropdown-menu">\
                                    <li><a href="#" onclick="showEditControlForm('+ data[i]["InternalControlId"] + ')">Edit</a></li>\
                                    <li><a href="#" onclick="deleteControl('+ data[i]["InternalControlId"] + ')">Cancel</a></li>\
                                </ul>\
                            </div>\ '
                    ]);
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }

        function showCreateControlForm() {
            $("#saveControlLoader").hide();
            var url = '@Url.Action("Create", "InternalControl")';
            $("#divLoader").show();

            $("#divControlModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divControlModalBody").html("Error on creating internal control, contact system support");
                }
                $("#divControlModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditControlForm(id) {
            $("#saveEditControlLoader").hide();
            var url = '@Url.Action("Edit", "InternalControl")?id='+id;
            $("#divLoader").show();

            $("#divEditControlModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditControlModalBody").html("Error on updating internal control, contact system support");
                }
                $("#divEditControlModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveControl() {
            var BusinessAreaId = $("#BusinessAreaId").val();
            var ControlName = $("#ControlName").val();
            var CommentOnDesignControl = $("#CommentOnDesignControl").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (BusinessAreaId == '') {
                swal("Please select business area", { icon: "warning" });
                return false;
            }

            if (ControlName == '') {
                swal("Please enter internal control name", { icon: "warning" });
                return false;
            }

            if (CommentOnDesignControl == '') {
                swal("Please enter comment on design of control", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('BusinessAreaId', BusinessAreaId);
            formData.append('ControlName', ControlName);
            formData.append('CommentOnDesignControl', CommentOnDesignControl);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postControlFormData(formData);
        }

        function postControlFormData(formData) {
            $("#saveControlLoader").show();
            $("#saveControlLoader").toggle(true);
            var url = '@Url.Action("create", "InternalControl")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divControlModal').modal('hide');
                    $("#saveControlLoader").toggle(true);
                    if (response == "Success") {
                        swal("Internal control created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Internal control already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveControlLoader").toggle(false);
                        swal("Failed to create internal control", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon : "error"});
                }
            });
        }

        function updateControl() {
            var BusinessAreaId = $("#BusinessAreaId").val();
            var ControlName = $("#ControlName").val();
            var CommentOnDesignControl = $("#CommentOnDesignControl").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Id = $("#InternalControlId").val();

            if (BusinessAreaId == '') {
                swal("Please select business area", { icon: "warning" });
                return false;
            }

            if (ControlName == '') {
                swal("Please enter internal control name", { icon: "warning" });
                return false;
            }

            if (CommentOnDesignControl == '') {
                swal("Please enter comment on design of control", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('BusinessAreaId', BusinessAreaId);
            formData.append('ControlName', ControlName);
            formData.append('CommentOnDesignControl', CommentOnDesignControl);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('InternalControlId', Id);

            putControlFormData(formData);
        }

        function putControlFormData(formData) {
            $("#saveEditControlLoader").show();
            $("#saveEditControlLoader").toggle(true);
            var url = '@Url.Action("Edit", "InternalControl")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditControlModal').modal('hide');
                    $("#saveEditControlLoader").toggle(true);
                    if (response == "Success") {
                        swal("Internal control updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Internal control already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Internal control not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditControlLoader").toggle(false);
                        swal("Failed to update internal control", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon: "error"});
                }
            });
        }

        function deleteControl(id) {
            swal({
                text: "Are you Sure you want to delete this control",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteControlData(id);
                } else {
                    swal("Cancelled", "No changes was made", {icon: "info"});
                }
            });

        }

        function deleteControlData(id) {
            var url = '@Url.Action("Delete", "InternalControl")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Internal control deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Reviewed") {
                        swal("Reviewed internal control cannot be deleted!", { icon: "warning" })
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        //**** ending internal control process ****


        //****start asset process ****
        function getAssets() {
            var datatableControl = $("#assetList").dataTable();

            $.ajax({
                type: "get",
                url: '@Url.Action("GetAssets", "Asset")/?fileId=' +@Model.PermanentFileId,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    datatableControl.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        datatableControl.fnAddData([i + 1,
                            data[i]["Name"],
                            data[i]["AssetCategory"],
                            data[i]["Title"],
                            data[i]["Location"],
                            data[i]["InsuranceCover"],
                            data[i]["MorgageCharges"],
                            data[i]["CostofAsset"],
                            data[i]["ValuationDate"] != null ? ToJavaScriptDate(data[i]["ValuationDate"]) : data[i]["ValuationDate"],
                            data[i]["Status"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                        <span class="caret"></span\
                                            <span class="sr-only"></span>\
                                    </button>\
                                    <ul class="dropdown-menu">\
                                        <li><a href="#" onclick="showEditAssetForm('+ data[i]["AssetId"] + ')">Edit</a></li>\
                                        <li><a href="@Url.Action("Details", "Asset")/?id=' + data[i]["AssetId"] + '">Details</a></li>\
                                        <li><a href="#" onclick="deleteAsset('+ data[i]["AssetId"] + ')">Cancel</a></li>\
                                    </ul>\
                                </div>\ '
                        ]);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function showCreateAssetForm() {
            $("#saveAssetLoader").hide();
            var url = '@Url.Action("Create", "Asset")';
            $("#divLoader").show();

            $("#divAssetModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divAssetModalBody").html("Error on creating asset, contact system support");
                }
                $("#divAssetModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditAssetForm(id) {
            $("#saveEditAssetLoader").hide();
            var url = '@Url.Action("Edit", "Asset")?id='+id;
            $("#divLoader").show();

            $("#divEditAssetModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditAssetModalBody").html("Error on updating asset, contact system support");
                }
                $("#divEditAssetModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveAsset() {
            debugger;
            var Name = $("#Name").val();
            var Category = $("#AssetCategory").val();
            var Title = $("#Title").val();
            var Location = $("#Location").val();
            var InsuranceCover = $("#InsuranceCover").val();
            var MorgageCharges = $("#MorgageCharges").val();
            var ValuationDate = $("#ValuationDate").val();
            var CostofAsset = $("#CostofAsset").val();
            var Status = "Active";
            var PermanentFileId = @Model.PermanentFileId;

            if (Name == '') {
                swal("Please enter asset name", { icon: "warning" });
                return false;
            }

            if (Category == '') {
                swal("Please enter asset category", { icon: "warning" });
                return false;
            }

            if (Location == '') {
                swal("Please enter asset location", { icon: "warning" });
                return false;
            }

            if (InsuranceCover == '') {
                swal("Please select insurance option", { icon: "warning" });
                return false;
            }

            if (MorgageCharges == '') {
                swal("Please select morgage and charges option", { icon: "warning" });
                return false;
            }

            //if (ValuationDate == '') {
            //    swal("Please select valuation date", { icon: "warning" });
            //    return false;
            //}

            //if (Status == '') {
            //    swal("Please select status", { icon: "warning" });
            //    return false;
            //}

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('Title', Title);
            formData.append('Location', Location);
            formData.append('AssetCategory', Category);
            formData.append('InsuranceCover', InsuranceCover);
            formData.append('MorgageCharges', MorgageCharges);
            formData.append('ValuationDate', ValuationDate);
            formData.append('CostofAsset', CostofAsset);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);

            postAssetFormData(formData);
        }

        function postAssetFormData(formData) {
            $("#saveAssetLoader").show();
            $("#saveAssetLoader").toggle(true);
            var url = '@Url.Action("create", "Asset")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divAssetModal').modal('hide');
                    $("#saveAssetLoader").toggle(true);
                    if (response == "Success") {
                        swal("Asset created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").show();
                            });
                    } else if (response == "Duplicate") {
                        swal("Asset already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveAssetLoader").toggle(false);
                        swal("Failed to create asset", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon : "error"});
                }
            });
        }

        function updateAsset() {
            var Name = $("#Name").val();
            var Category = $("#AssetCategory").val();
            var Title = $("#Title").val();
            var Location = $("#Location").val();
            var InsuranceCover = $("#InsuranceCover").val();
            var MorgageCharges = $("#MorgageCharges").val();
            var ValuationDate = $("#ValuationDate").val();
            var CostofAsset = $("#CostofAsset").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var AssetId = $("#AssetId").val();

            if (Name == '') {
                swal("Please enter asset name", { icon: "warning" });
                return false;
            }

            if (Category == '') {
                swal("Please enter asset category", { icon: "warning" });
                return false;
            }

            if (Location == '') {
                swal("Please enter asset location", { icon: "warning" });
                return false;
            }

            if (InsuranceCover == '') {
                swal("Please select insurance option", { icon: "warning" });
                return false;
            }

            if (MorgageCharges == '') {
                swal("Please select morgage and charges option", { icon: "warning" });
                return false;
            }

            //if (ValuationDate == '') {
            //    swal("Please select valuation date", { icon: "warning" });
            //    return false;
            //}

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('Title', Title);
            formData.append('Location', Location);
            formData.append('AssetCategory', Category);
            formData.append('InsuranceCover', InsuranceCover);
            formData.append('MorgageCharges', MorgageCharges);
            formData.append('ValuationDate', ValuationDate);
            formData.append('CostofAsset', CostofAsset);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('AssetId', AssetId);

            putAssetFormData(formData);
        }

        function putAssetFormData(formData) {
            $("#saveEditAssetLoader").show();
            $("#saveEditAssetLoader").toggle(true);
            var url = '@Url.Action("Edit", "Asset")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditAssetModal').modal('hide');
                    $("#saveEditAssetLoader").toggle(true);
                    if (response == "Success") {
                        swal("Asset updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Asset already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Asset not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditAssetLoader").toggle(false);
                        swal("Failed to update asset", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon: "error"});
                }
            });
        }

        function deleteAsset(id) {
            swal({
                text: "Are you Sure you want to delete this asset",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteAssetData(id);
                } else {
                    swal("Cancelled", "No changes was made", {icon: "info"});
                }
            });

        }

        function deleteAssetData(id) {
            var url = '@Url.Action("Delete", "Asset")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Asset deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Reviewed") {
                        swal("Reviewed asset cannot be deleted!", { icon: "warning" })
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        //****end asset process ****

        function ToJavaScriptDate(value) {
            if (value != null && value != '') {
                var pattern = /Date\(([^)]+)\)/;
                var results = pattern.exec(value);
                var dt = new Date(parseFloat(results[1]));
                return dt.getDate() + "/" + (dt.getMonth() + 1) + "/" + dt.getFullYear();
            }
        }

        //***** Start Contract and agreement *****
        function getContracts() {
            var datatableControl = $("#contractList").dataTable();

            $.ajax({
                type: "get",
                url: '@Url.Action("GetContracts", "Contract")/?fileId=' +@Model.PermanentFileId,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    datatableControl.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        datatableControl.fnAddData([i + 1,
                            data[i]["Name"],
                            data[i]["Duration"],
                            data[i]["Party"],
                            data[i]["Value"].toLocaleString(),
                            '<a onclick="preview(\'' + data[i]["FilePath"] + '\')" style="text-decoration: none; cursor: pointer;"><i class="fa fa-paperclip" aria-hidden="true"></i> Preview</a>',
                            data[i]["Status"],
                            '<div class="btn-group" id="drop-' + i + '">\
                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                        <span class="caret"></span\
                                            <span class="sr-only"></span>\
                                    </button>\
                                    <ul class="dropdown-menu">\
                                        <li><a href="#" onclick="showEditContractForm('+ data[i]["ContractId"] + ')">Edit</a></li>\
                                        <li><a href="@Url.Action("Details", "Contract")/?id='+ data[i]["ContractId"] + '">Details</a></li>\
                                        <li><a href="#" onclick="deleteContract('+ data[i]["ContractId"] + ')">Cancel</a></li>\
                                    </ul>\
                                </div>\ '
                        ]);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        function showCreateContractForm() {
            $("#saveContractLoader").hide();
            var url = '@Url.Action("Create", "Contract")';
            $("#divLoader").show();

            $("#divContractModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divContractModalBody").html("Error on creating contract, contact system support");
                }
                $("#divContractModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function showEditContractForm(id) {
            $("#saveEditContractLoader").hide();
            var url = '@Url.Action("Edit", "Contract")?id='+id;
            $("#divLoader").show();

            $("#divEditContractModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divEditContractModalBody").html("Error on updating contract, contact system support");
                }
                $("#divEditContractModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveContract() {
            debugger;
            var Name = $("#Name").val();
            var Party = $("#Party").val();
            var Detail = $("#Detail").val();
            var Security = $("#Security").val();
            var Comment = $("#Comment").val();
            var StartDate = $("#StartDate").val();
            var EndDate = $("#EndDate").val();
            var Value = $("#Value").val();
            var Status = $("#Status").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Duration = monthDiff(StartDate, EndDate);
            var FileName = $("#FileName").val();

            function monthDiff(d1, d2) {
                var months;
                var startDate = new Date(d1);
                var endDate = new Date(d2);
                months = (endDate.getFullYear() - startDate.getFullYear()) * 12;
                months -= startDate.getMonth();
                months += endDate.getMonth();
                return months <= 0 ? 0 : months;
            }

            if ((Date.parse(EndDate) <= Date.parse(StartDate))) {
                swal("End date should be greater than Start date", { icon: "warning" });
                document.getElementById("EndDate").value = "";
                return false;
            }

            if (FileName == '' || FileName == null) {
                swal("Please attach legal framework", { icon: "warning" });
                return false;
            }

            var file = document.querySelector("#FileName");
            if (/\.(pdf)$/i.test(file.files[0].name) === false) {
                swal({
                    text: "Please Upload File (Only PDF is Required)",
                    icon: "warning"
                })
                return false;
            }

            if ((file.Length == 0 || file.Length > 2048)) {
                swal({
                    text: "Invalid file size, file size should be less than 2MB",
                    icon: "warning"
                })
                return false;
            }

            if (Name == '') {
                swal("Please enter asset name", { icon: "warning" });
                return false;
            }

            if (Party == '') {
                swal("Please enter parties of the contract", { icon: "warning" });
                return false;
            }

            if (Detail == '') {
                swal("Please enter contract details", { icon: "warning" });
                return false;
            }

            if (Security == '') {
                swal("Please enter contract securities and convenants", { icon: "warning" });
                return false;
            }

            if (StartDate == '') {
                swal("Please select start date", { icon: "warning" });
                return false;
            }

            if (EndDate == '') {
                swal("Please select end date", { icon: "warning" });
                return false;
            }

            if (Value == '') {
                swal("Please enter contract value", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('Detail', Detail);
            formData.append('Party', Party);
            formData.append('Comment', Comment);
            formData.append('StartDate', StartDate);
            formData.append('EndDate', EndDate);
            formData.append('Value', Value);
            formData.append('Security', Security);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('Duration', Duration);
            formData.append('FileName', $('#FileName')[0].files[0]);

            postContractFormData(formData);
        }

        function postContractFormData(formData) {
            $("#saveContractLoader").show();
            $("#saveContractLoader").toggle(true);
            var url = '@Url.Action("create", "Contract")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divContractModal').modal('hide');
                    $("#saveContractLoader").toggle(true);
                    if (response == "Success") {
                        swal("Contract created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Contract already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveContractLoader").toggle(false);
                        swal("Failed to create contract", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon : "error"});
                }
            });
        }

        function updateContract() {
            debugger;
            var Name = $("#Name").val();
            var Party = $("#Party").val();
            var Detail = $("#Detail").val();
            var Security = $("#Security").val();
            var Comment = $("#Comment").val();
            var StartDate = $("#StartDate").val();
            var EndDate = $("#EndDate").val();
            var Value = $("#Value").val();
            var Status = $("#Status").val();
            var ContractId = $("#ContractId").val();
            var PermanentFileId = @Model.PermanentFileId;
            var Duration = monthDiff(StartDate, EndDate);

            function monthDiff(d1, d2) {
                var months;
                var startDate = new Date(d1);
                var endDate = new Date(d2);
                months = (endDate.getFullYear() - startDate.getFullYear()) * 12;
                months -= startDate.getMonth();
                months += endDate.getMonth();
                return months <= 0 ? 0 : months;
            }

            if (Name == '') {
                swal("Please enter asset name", { icon: "warning" });
                return false;
            }

            if ((Date.parse(EndDate) <= Date.parse(StartDate))) {
                swal("End date should be greater than Start date", { icon: "warning" });
                document.getElementById("EndDate").value = "";
                return false;
            }

            if (Party == '') {
                swal("Please enter parties of the contract", { icon: "warning" });
                return false;
            }

            if (Detail == '') {
                swal("Please enter contract details", { icon: "warning" });
                return false;
            }

            if (Security == '') {
                swal("Please enter contract securities and convenants", { icon: "warning" });
                return false;
            }

            if (StartDate == '') {
                swal("Please select start date", { icon: "warning" });
                return false;
            }

            if (EndDate == '') {
                swal("Please select end date", { icon: "warning" });
                return false;
            }

            if (Value == '') {
                swal("Please enter contract value", { icon: "warning" });
                return false;
            }

            if (Status == '') {
                swal("Please select status", { icon: "warning" });
                return false;
            }

            var formData = new FormData()
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('Name', Name);
            formData.append('Detail', Detail);
            formData.append('Party', Party);
            formData.append('Comment', Comment);
            formData.append('StartDate', StartDate);
            formData.append('EndDate', EndDate);
            formData.append('Value', Value);
            formData.append('Security', Security);
            formData.append('PermanentFileId', PermanentFileId);
            formData.append('Status', Status);
            formData.append('ContractId', ContractId);
            formData.append('Duration', Duration);

            putContractFormData(formData);
        }

        function putContractFormData(formData) {
            $("#saveEditContractLoader").show();
            $("#saveEditContractLoader").toggle(true);
            var url = '@Url.Action("Edit", "Contract")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divEditContractModal').modal('hide');
                    $("#saveEditContractLoader").toggle(true);
                    if (response == "Success") {
                        swal("Contract updated successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Contract already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Not Found") {
                        swal("Contract not found", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveEditContractLoader").toggle(false);
                        swal("Failed to update contract", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon: "error"});
                }
            });
        }

        function deleteContract(id) {
            swal({
                text: "Are you Sure you want to delete this contract",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteContractData(id);
                } else {
                    swal("Cancelled", "No changes was made", {icon: "info"});
                }
            });
        }

        function deleteContractData(id) {
            var url = '@Url.Action("Delete", "Contract")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Contract deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Reviewed") {
                        swal("Reviewed contract cannot be deleted!", { icon: "warning" })
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        //***** ending Contract and agreement *****


        //**** starting attachment process *****
        function getAttachments() {
            var dataTableList = $("#attachmentList").dataTable();

            var url = '@Url.Action("GetAttachments", "PermanentFile")/?fileId='+@Model.PermanentFileId;
            $.ajax({
                type: "get",
                url: url,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response;
                    console.log(data);
                    dataTableList.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dataTableList.fnAddData([i + 1,
                            data[i]["AttachmentType"],
                            '<a onclick="preview(\'' + data[i]["FilePath"] + '\')" style="text-decoration: none; cursor: pointer;">\
                            <i class="fa fa-paperclip" aria-hidden="true"></i> Preview</a>',
                            '<a onclick="attachmentRemove(' + data[i]["AttachmentId"] + ', ' + data[i]["ModuleId"] +')">\
                            <i class="fa fa-trash-o" aria-hidden="true" style="cursor: pointer"></i></a>'
                        ]);
                    }
                },
                failure: function (error) {
                    swal({
                        text: error,
                        icon: "error"
                    });
                }
            });
        }

        function showCreateAttachmentForm() {
            $("#saveAttachmentLoader").hide();
            var url = '@Url.Action("CreateAttachment", "PermanentFile")';
            $("#divLoader").show();

            $("#divAttachmentModalBody").load(url, function (response, status, xhr) {
                if (status == "error") {
                    if (!$(".modal-header").hasClass("alert-danger")) {
                        $(".modal-header").removeClass("alert-info").addClass("alert-danger");
                        $(".role-save").css("display", "none");
                    }
                    $("#divAttachmentModalBody").html("Error on creating attachment, contact system support");
                }
                $("#divAttachmentModal").modal("show");
                $("#divLoader").hide();
            });
        }

        function saveAttachment() {
            var AttachmentTypeId = $("#AttachmentTypeId").val();
            var FileName = $("#FileName").val();
            var ModuleId = @Model.PermanentFileId;
            var ModuleName = "Permanent File";

            var file = document.querySelector("#FileName");
            if (/\.(pdf)$/i.test(file.files[0].name) === false) {
                swal({
                    text: "Please Upload File (Only PDF is Required)",
                    icon: "warning"
                })
                return false;
            } else if ((file.Length == 0 || file.Length > 2048)) {
                swal({
                    text: "Invalid file size, file size should be less than 2MB",
                    icon: "warning"
                })
                return false;
            }

            if (AttachmentTypeId == null || AttachmentTypeId == '') {
                swal({
                    text: "Please select attachment type",
                    icon: "warning"
                })
                return false;
            }

            if (FileName == null || FileName == '') {
                swal({
                    text: "Please attach file",
                    icon: "warning"
                })
                return false;
            }

            var formData = new FormData();
            formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
            formData.append('AttachmentTypeId', AttachmentTypeId);
            formData.append('ModuleId', ModuleId);
            formData.append('ModuleName', ModuleName);
            formData.append('FileName', $('#FileName')[0].files[0]);

            postAttachmentData(formData);
        }

        function postAttachmentData(formData) {
            $("#saveAttachmentLoader").show();
            $("#saveAttachmentLoader").toggle(true);
            var url = '@Url.Action("SaveAttachment", "PermanentFile")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#divAttachmentModal').modal('hide');
                    $("#saveAttachmentLoader").toggle(true);
                    if (response == "Success") {
                        swal("Attachment created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                window.location.reload();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Exists") {
                        swal("Attachment already exist", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                return;
                            });
                    } else {
                        $("#saveAttachmentLoader").toggle(false);
                        swal("Failed to create attachment", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error, {icon : "error"});
                }
            });
        }

        function preview(fileName) {
            $("#divLoader").show();
            var url = '@Url.Content("~/Media/PermanentFileAttachments/")'+ fileName;
            document.getElementById("attachmentImage").src = url;
            $('#detailId').dialog({
                autoOpen: true,
                width: 900,
                height: 700,
                position: 'center',
                resizable: true,
                draggable: true
            });
            $("#divLoader").hide();
        }

        function attachmentRemove(id, moduleId) {
            var url = '@Url.Action("RemoveAttachment", "PermanentFile")';
            swal({
                text: "Are you Sure you want to delete this attachment",
                icon: "warning",
                buttons: [
                    'No',
                    'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        type: "post",
                        url: url,
                        data: { "id": id },
                        contenttype: "application/json; charset=utf-8",
                        datatype: "json",
                        success: function (response) {
                            if (response = "Success") {
                                swal("Attachment deleted Successfully", { icon: "success" })
                                    .then((value) => {
                                        $("#divLoader").show();
                                        window.location.reload();
                                        $("#divLoader").hide();
                                    });
                            } else if (response == "Exists") {
                                swal("Attachment already exist", { icon: "warning" })
                            }
                        },
                        failure: function (response) {
                            swal({
                                text: response.d,
                                icon: "error"
                            });
                        }
                    });
                } else {
                    swal("Cancelled", "No changes was made", { icon: "info" });
                }
            });
        }
        //**** ending attachment process *****

        //**** starting questionnaire save *****
        function validateForm(formObj) {
            debugger;
            $(".loadingImg").show();
            formObj.submit.disabled = true;
            formObj.submit.value = 'Please Wait...';
            successMessage = true;
            console.log(formObj);
            $("#saveQuestionnaireForm").prop('disabled', true);
        }

        var response = '@TempData["Response"]';
        switch (response) {
            case "KYCSuccess":
                $("#saveQuestionnaireForm").prop('disabled', false);
                 swal("Know your client checklist saved successfully", { icon: "success" })
                     .then((value) => {
                         $("#divLoader").show();
                         window.location.reload();
                         $("#divLoader").hide();
                });
                break;
            case "KYCError":
                $("#saveQuestionnaireForm").prop('disabled', false);
                 swal("An error occurred during saving know your client checklist, Please Contact System Support", { icon: "warning" })
                     .then((value) => {
                         $("#divLoader").show();
                         window.location.reload();
                         $("#divLoader").hide();
                });
                break;

            case "NCSuccess":
                $("#saveQuestionnaireForm").prop('disabled', false);
                 swal("New client checklist saved successfully", { icon: "success" })
                .then((value) => {
                    $("#divLoader").show();
                    window.location.reload();
                    $("#divLoader").hide();
                });
                break;
            case "NCError":
                $("#saveQuestionnaireForm").prop('disabled', false);
                 swal("An error occurred during saving new client checklist, Please Contact System Support", { icon: "warning" })
                .then((value) => {
                    $("#divLoader").show();
                    window.location.reload();
                    $("#divLoader").hide();
                });
                break;
            case "SOSuccess":
                $("#saveQuestionnaireForm").prop('disabled', false);
                 swal("Systems overview saved successfully", { icon: "success" })
                .then((value) => {
                    $("#divLoader").show();
                    window.location.reload();
                    $("#divLoader").hide();
                });
                break;
            case "SOError":
                $("#saveQuestionnaireForm").prop('disabled', false);
                swal("An error occurred during saving systems overview, Please Contact System Support", { icon: "warning" })
                .then((value) => {
                    $("#divLoader").show();
                    window.location.reload();
                    $("#divLoader").hide();
                });
                break;
            case "Error":
                $("#saveQuestionnaireForm").prop('disabled', false);
                swal("An error occurred, Please Contact System Support", { icon: "warning" })
                .then((value) => {
                    $("#divLoader").show();
                    window.location.reload();
                    $("#divLoader").hide();
                });
                break;
        }

        function AllowSingleSelection(checkboxObject) {
            var getQuestion = checkboxObject.value;
            var question = getQuestion.substring(0, getQuestion.indexOf('_'));
            //Get the parent control of checkbox which is the checkbox list
            var checkboxObjectList = checkboxObject.parentNode.parentNode.parentNode;
            //Get the checkbox controls in checkboxlist
            var checkboxControls = checkboxObjectList.getElementsByTagName("input");
            //Loop through each check box controls
            for (var i = 0; i < checkboxControls.length; i++) {
                //Check the current checkbox is not the one user selected
                if (checkboxControls[i] != checkboxObject && checkboxObject.checked &&
                    question == checkboxControls[i].value.substring(0, checkboxControls[i].value.indexOf('_'))) {
                    //Uncheck all other checkboxes
                    checkboxControls[i].checked = false;
                }
            }
        }


        function RemoveSaveThreat(id) {
            swal({
                title: "Are you sure?",
                text: "Once Remove, You will not be able to recover",
                buttons: ["Yes", "No"],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (isConfirm) {
                    swal("Cancelled", "No change was made");
                } else {
                    RemoveSelectedThreat(id);
                }
            });
        }

        function RemoveSelectedThreat(id, index) {
            var params = { "id": id };
            var url = '@Url.Action("RemoveSelectedThreat", "NonAuditService")';
            $.ajax({
                type: "get",
                url: url,
                data: params,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    if (response = "success") {
                        swal("Selected Threat Removed Successfully", { icon: "success" })
                            .then((value) => {
                                window.location.reload();
                            });
                    }
                },
                failure: function (response) {
                    alert(response.d);
                }
            });
        }

         function saveThreatList() {
            debugger;
             var ThreatApplied = $("#SelectedThreatApplied").val();
             var NonAuditServiceId = $("#NonAuditServiceId").val();
            var PermanentFileId = @Model.PermanentFileId;

            if (ThreatApplied == '') {
                swal("Please select threats", { icon: "warning" });
                return false;
            }

             var formData = new FormData();
             formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
             formData.append('ThreatApplied', ThreatApplied);
             formData.append('NonAuditServiceId', NonAuditServiceId);
             formData.append('PermanentFileId', PermanentFileId);
            postThreatFormData(formData);
         }


        function postThreatFormData(formData) {
            debugger;
            $("#saveThreatInfor").show();
            $("#saveThreatInfor").toggle(true);
            var url = '@Url.Action("AddThreatList", "NonAuditService")';
            $.ajax({
                url: url,
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    $("#saveThreatInfor").toggle(true);
                    if (response == "Success") {
                        swal("Threat created successfully", { icon: "success" })
                            .then((m) => {
                                $("#divLoader").show();
                                $('#AddThreat').modal('hide');
                                $("#saveThreatInfor").hide();
                                $("#divLoader").hide();
                            });
                    } else if (response == "Duplicate") {
                        swal("Threat already exist", { icon: "warning" })
                            .then((m) => {
                                $("#saveThreatInfor").hide();
                                $("#divLoader").hide();
                                return;
                            });
                    } else if (response == "Invalid") {
                        swal("Operation Failed. Please contact System Administrator!", { icon: "warning" })
                            .then((m) => {
                                $("#saveThreatInfor").hide();
                                $("#divLoader").hide();
                                return;
                            });
                    } else {
                        $("#saveThreatInfor").toggle(false);
                        $("#saveThreatInfor").hide();
                        $("#divLoader").hide();
                        swal("Failed to create Threat", { icon: "warning" });
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
    </script>
}
