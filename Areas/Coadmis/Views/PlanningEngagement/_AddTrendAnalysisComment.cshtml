@model IFMIS.Areas.Coadmis.Models.AuditableAreaAssignmentVM
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "TrendAnalysis" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.HiddenFor(model => model.TrendAnalysisId)

        <div class="form-group">
            @Html.LabelFor(model => model.AuditableAreaName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.AuditableAreaName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.AuditableAreaName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AuditableItemName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.AuditableItemName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.AuditableItemName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PreviousYearAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.PreviousYearAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.PreviousYearAmount, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.CurrentYearAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.CurrentYearAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.CurrentYearAmount, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.PercategeChange, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.PercategeChange, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.PercategeChange, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.Movement, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Movement, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Movement, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2 required" })
            (<span style="font-weight:bold;" id="CommentCount">250</span>)
            <div class="col-md-8">
                @Html.TextAreaFor(model => model.Comment, new { maxlength = 250, @class = "form-control", @rows = 5, @cols = 30 })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>

        </div>

    </div>
}
<script>

    //Count input char
    $('#Comment').on("keyup", function () {
        var count = $('#Comment').val().split('');
        var numChars = 250 - parseInt(count.length);
        $('#CommentCount').text(parseInt(numChars));
    });



    $("#addCommentsToTrend").on('click', function () {
        debugger;
        var id = $("#TrendAnalysisId").val();
        var comment = $("#Comment").val();

        if (comment =='') {
            swal("Please Fill the required Fields", { icon: "warning" });
            return false;
        }

        var formdata = new FormData();
        formdata.append("__RequestVerificationToken", $('[name=__RequestVerificationToken]').val());
        formdata.append("TrendAnalysisId", id);
        formdata.append("Comment", comment);
       
        

        $("#divLoader").show();
        var url = '@Url.Action("UpdateCommentToTrendAnalysis", "PlanningEngagement")';
        $.ajax({
            url: url,
            data: formdata,
            type: 'POST',
            contentType: false,
            processData: false,
            success: function (response) {
                console.log('response', response)
                $("#addCommentsToTrend").prop('disabled', false);
                $("#divLoader").hide();
                if (response == "Success") {
                    swal("Comment Added Successfully!", { icon: "success" })
                        .then((value) => {
                            window.location.reload();
                        });
                } else if (response == "Dublicate") {
                    swal("Dublicate Comments!", { icon: "warning" })
                        .then((value) => {
                            return false;
                        });
                }
                else {
                    swal(response);
                }
            },
            failure: function (error) {
                $("#addCommentsToTrend").prop('disabled', false);
                $("#divLoader").hide();
                swal(error);
            }
        });
    });


</script>