@model IFMIS.Areas.Coadmis.Models.RiskAssessementVM
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "updateRiskAssertionForm" }))
{
    @Html.AntiForgeryToken()
<div class="form-horizontal">
    @Html.HiddenFor(model => model.FinancialStAssRiskPlanId)
    <div class="form-group">
        @Html.LabelFor(model => model.RiskName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.RiskName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
            @Html.ValidationMessageFor(model => model.RiskName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.RiskRanking, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.RiskRanking, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
            @Html.ValidationMessageFor(model => model.RiskRanking, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RiskDescription, htmlAttributes: new { @class = "control-label col-md-2 required" })
        <div class="col-md-8">
            @Html.TextAreaFor(model => model.RiskDescription, new { maxlength = 250, @class = "form-control", @rows = 3, @cols = 15, @readonly = true })
            @Html.ValidationMessageFor(model => model.RiskDescription, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ManagementResponse, htmlAttributes: new { @class = "control-label col-md-2 required" })
        (<span style="font-weight:bold;" id="ManagementResponseCount">250</span>)
        <div class="col-md-8">
            @Html.TextAreaFor(model => model.ManagementResponse, new { maxlength = 250, @class = "form-control", @rows = 3, @cols = 15 })
            @Html.ValidationMessageFor(model => model.ManagementResponse, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.AuditorApproachComment, htmlAttributes: new { @class = "control-label col-md-2 required" })
        (<span style="font-weight:bold;" id="AuditorApproachCommentCount">250</span>)
        <div class="col-md-8">
            @Html.TextAreaFor(model => model.AuditorApproachComment, new { maxlength = 250, @class = "form-control", @rows = 3, @cols = 15 })
            @Html.ValidationMessageFor(model => model.AuditorApproachComment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Assertion Area Affected<span class="redStar">*</span></label>
        <div class="col-md-3">
            @Html.DropDownList("AssertionAreaAffected", new List<SelectListItem>{
                                    new SelectListItem{ Text="--Select Area Affected ---", Value = "" },
                                    new SelectListItem{ Text="Accurancy", Value = "Accurancy" },
                                    new SelectListItem{ Text="Completeness", Value = "Completeness" },
                                    new SelectListItem{ Text="Occurancy", Value = "Occurancy" },
                                    new SelectListItem{ Text="Classification", Value = "Classification" },
                                    new SelectListItem{ Text="Existence", Value = "Existence" },
                                    new SelectListItem{ Text="Righ & Obligation", Value = "Righ & Obligation" },
                                    new SelectListItem{ Text="`Presentation", Value = "Presentation" },
                                    }, new { @class = "form-control select2",@multiple ="multiple", @required = "required" })
            @Html.ValidationMessageFor(model => model.AssertionAreaAffected, "", new { @class = "text-danger" })
        </div>

        <label class="control-label col-md-2">Assertion Risk Ranking<span class="redStar">*</span></label>
        <div class="col-md-3">
            @Html.DropDownList("AssertionRiskRanking", new List<SelectListItem>{
                                    new SelectListItem{ Text="--Select Ranking ---", Value = "" },
                                    new SelectListItem{ Text="High", Value = "H" },
                                    new SelectListItem{ Text="Medium", Value = "M" },
                                    new SelectListItem{ Text="Low", Value = "L" },
                                    }, new { @class = "form-control select2", @required = "required" })
            @Html.ValidationMessageFor(model => model.AssertionRiskRanking, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Status<span class="redStar">*</span></label>
        <div class="col-md-3">
            @Html.DropDownList("RiskStatus", new List<SelectListItem>{
                                    new SelectListItem{ Text="--Select Ranking ---", Value = "" },
                                    new SelectListItem{ Text="Minor", Value = "Minor" },
                                    new SelectListItem{ Text="Major", Value = "Major" },
                                    }, new { @class = "form-control select2", @required = "required"})
            @Html.ValidationMessageFor(model => model.RiskStatus, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.RefNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.RefNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RefNo, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
}
<script>

    $(document).ready(function () {
        $("#AssertionRiskRanking, #AssertionRiskRanking, #AssertionAreaAffected, #RiskStatus").select2({
            dropdownParent: $("#updateRiskAssertionForm")
        });
    });

    //Count input char
    $('#RiskDescription').on("keyup", function () {
        var count = $('#RiskDescription').val().split('');
        var numChars = 250 - parseInt(count.length);
        $('#RiskDescriptionCount').text(parseInt(numChars));
    });

    //Count input char
    $('#ManagementResponse').on("keyup", function () {
        var count = $('#ManagementResponse').val().split('');
        var numChars = 250 - parseInt(count.length);
        $('#ManagementResponseCount').text(parseInt(numChars));
    });

    $('#AuditorApproachComment').on("keyup", function () {
        var count = $('#AuditorApproachComment').val().split('');
        var numChars = 250 - parseInt(count.length);
        $('#AuditorApproachCommentCount').text(parseInt(numChars));
    });

  
    $("#addRiskAssertionData").on('click', function () {

        var fyRiskPlanId = $("#FinancialStAssRiskPlanId").val();
        var mgResponse = $("#ManagementResponse").val();
        var auditorComment = $("#AuditorApproachComment").val();
        var assertionAffected = $("#AssertionAreaAffected").val();
        var assertionRiskRanking = $("#AssertionRiskRanking").val();
        var status = $("#RiskStatus").val();
        var refNo = $("#RefNo").val();

        if (mgResponse == '' || auditorComment == '' || assertionAffected == '' || assertionRiskRanking == '' || refNo=='') {
            swal("Please Fill All the required Fields", { icon: "warning" });
            return false;
        }

        var formdata = new FormData();
        formdata.append("__RequestVerificationToken", $('[name=__RequestVerificationToken]').val());
        formdata.append("FinancialStAssRiskPlanId", fyRiskPlanId);
        formdata.append("ManagementResponse", mgResponse);
        formdata.append("AuditorApproachComment", auditorComment);
        formdata.append("AssertionAreaAffected", assertionAffected);
        formdata.append("AssertionRiskRanking", assertionRiskRanking);
        formdata.append("RiskStatus", status);
        formdata.append("RefNo", refNo);

        $("#saveLoader").toggle(true);
        var url = '@Url.Action("UpdateFinancialRiskAssertion", "PlanningEngagement")';
        $.ajax({
            url: url,
            data: formdata,
            type: 'POST',
            contentType: false,
            processData: false,
            success: function (response) {
                console.log('response', response)
                $("#addRiskAssertionData").prop('disabled', false);
                $("#saveLoader").toggle(false);
                if (response == "Success") {
                    swal("Saved Successfully!", { icon: "success" })
                        .then((value) => {
                            window.location.reload();
                        });
                } else if (response == "Dublicate") {
                    swal("Dublicate Estimate!", { icon: "warning" })
                        .then((value) => {
                            return false;
                        });
                }
                else {
                    swal(response);
                }
            },
            failure: function (error) {
                $("#addRiskAssertionData").prop('disabled', false);
                $("#saveLoader").toggle(false);
                swal(error);
            }
        });
    });


</script>