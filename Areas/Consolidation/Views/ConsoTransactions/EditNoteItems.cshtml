@model IFMIS.Areas.Consolidation.Models.ConsoDataEntryVM
@{
 var i=0;
ViewBag.Title="Editing Node Items";
}
<style>
    .search-container {
        background-color: white;
        color: black;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 3px;
        padding-right: 10px;
        padding-left: 10px;
    }

    input[type=number] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    input[type=text] {
        padding: 5px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }
    #TotalAmount {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }
</style>

<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <br />
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>@ViewBag.Title </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">
                            <p>
                                @Html.DisplayNameFor(model => model.FinancialYearDesc) :<strong>@Html.DisplayFor(model => model.FinancialYearDesc)</strong><br>
                                @Html.DisplayNameFor(model => model.Note) :<strong>@Html.DisplayFor(model => model.Note)</strong><br />
                                @Html.DisplayNameFor(model => model.NoteDesc) :<strong>@Html.DisplayFor(model => model.NoteDesc)</strong><br />
                                @Html.HiddenFor(model => model.ConsoTransactionSummaryId)
                                @Html.HiddenFor(model => model.SelectedFinancialYear)
                                @Html.HiddenFor(model => model.SelectedNoteId)
                            </p>
                            <div class="row">
                                <div class="col-md-2 col-md-offset-3" style="text-align:right">
                                    <strong>Total Amount</strong>
                                </div>
                                <div class="col-md-3">
                                    <div class="search-container" style="float:right">
                                        @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="search-container" style="float:right">
                                        <i class="fa fa-search"></i>
                                        <input type="search" name="search" placeholder="Search..." id="search-box">
                                    </div>
                                </div>
                            </div>
                            <table class="table table-bordered table-hover table-condensed" id="dt_items">

                                <thead>
                                    <tr>
                                        <th style="text-align:center;width:4%">#</th>
                                        <th style="text-align:center;width:15%">GFSCode</th>
                                        <th style="text-align:left;width:53%">Description</th>
                                        <th style="text-align:center;width:10%">Type</th>
                                        <th style="text-align:center;width:18%">Amount</th>

                                    </tr>
                                </thead>

                                <tbody>
                                    @foreach (var item in Model.ConsoItems)
                                    {
                                        i++;
                                        <tr>
                                            <td style="text-align:center">@i</td>
                                            <td style="text-align:center">
                                                @Html.DisplayFor(modelItem => item.GFSCode)
                                            </td>
                                            <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.GFSCodeDesc)
                                            </td>
                                            <td style="text-align:center">
                                                <a href="#" onclick="changeNature(@item.TrxID,'@item.TransactionType')">
                                                    @Html.DisplayFor(modelItem => item.TransactionType)
                                                </a>
                                            </td>
                                            <td style="text-align:center">
                                                @Html.EditorFor(modelItem => item.Amount, new { htmlAttributes = new { @class = "form-control amount", @id = item.ItemId, @onfocusout = "amountEntry(this)", @autocomplete = "off" } })
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-8 col-md-offset-1">
                                        <a href="@Url.Action("PendingNotes","ConsoTransactions",new {id=Model.ConsoTransactionSummaryId})" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        <a href="@Url.Action("PendingNotes","ConsoTransactions",new {id=Model.ConsoTransactionSummaryId})" class="btn btn-info" id="finish" style="float:left;margin-left:5px;">
                                            <i class="fa fa-save"></i>Finish
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>





                    </div>


                </div>
            </article>

        </div>
    </section>

</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">

     var dt_items_data = $('#dt_items').dataTable();
    $("#dt_items_wrapper .dt-toolbar").remove();
    $("#search-box").on("keyup search input paste cut", function () {
        $("#dt_items").DataTable().search(this.value).draw();
    });
        var totalAmount = 0;
        var enteredAmounts = [];

    function amountChanged(e) {
        var id = e.id;
        $input = $("#" + id);
        $input.autoNumeric('init');

        var typingTimer;                //timer identifier
        var doneTypingInterval = 1000;  //time in ms, 1 seconds for example

        clearTimeout(typingTimer);
        typingTimer = setTimeout(function () { doneTyping(id) }, doneTypingInterval);

        //on keydown, clear the countdown
        $input.on('keydown', function () {
            clearTimeout(typingTimer);
        });
    }
        function amountEntry(e) {
            var id = e.id;
            $input = $("#" + id);

            $input.autoNumeric('init');
            saveData(id);
        }

        function saveData(id) {
        var tbId = $("#ConsoTransactionSummaryId").val();
        var fy = $("#SelectedFinancialYear").val();
        var noteId = $("#SelectedNoteId").val();
        $input = $("#" + id);
        var amount = $input.val();
        var amountVal = parseFloat(amount.split(",").join(""));

            if (amountVal >= 0) {
                //Valid Amount
            }
            else {
                amountVal = 0;
            }


            if (amountVal >= 0) {
            var url = '@Url.Action("SaveTransaction", "ConsoTransactions")';
            $.ajax({
                type: "POST",
                url: url,
                data: { ConsoTransactionSummaryId: tbId, Fy: fy, NoteId: noteId, ItemId: id, Amount: amount },
                success: function (response) {
                    if (response == "Success") {
                        manageAmount(id, amountVal);
                    }
                    else {
                        swal(response);
                    }
                }
            });
        }
      }

        function manageAmount(id, amount) {
            var newAmount = 0;
            if (enteredAmounts.length > 0) {

                //CHECK IF EXIST IN THE ARRAY
                var found = false;
                for (var j = 0; j < enteredAmounts.length; j++) {
                    if (enteredAmounts[j].Id == id) {
                        newAmount = amount - enteredAmounts[j].Amount;
                        enteredAmounts[j].Amount = amount;
                        found = true;
                    }
                }

                if (!found) {
                    enteredAmounts.push({
                        "Id": id,
                        "Amount": amount
                    });

                    newAmount = amount;
                }


            }
            else {
                enteredAmounts.push({
                    "Id": id,
                    "Amount": amount
                });
                newAmount = amount;

            }
            totalAmount = totalAmount + newAmount;
            $("#TotalAmount").val(totalAmount.toLocaleString('en'));
        }


        $(".amount").autoNumeric('init');

            function changeNature(id, transType) {
        var message = "";
        if (transType == "CR") {
            message = "Do you change transaction type from Credit to Debit ?";
        }
        else {
            message = "Do you change transaction type from Debit to Credit ?";
        }
       swal({
                  title: 'Confirmation',
                  text: message,
                  buttons: [
                    'No',
                    'Yes'
                  ],
              }).then(function (isConfirm) {
                  if (isConfirm) {
                      var url = '@Url.Action("ChangeTransactionType", "ConsoTransactions")';
                      $.ajax(
          {
              type: "POST",
              url: url,
              data: { id: id, transType: transType },
              success: function (response) {
                  if (response == "Success") {
                      swal("Transaction type changed  successfully!", { icon: "success" })
                                   .then((value) => {
                                       location.reload();
                                   });
                  }
                  else {
                      swal(response);
                  }
              },
              error: function (xhr) {
                  //console.log(xhr.responseText);
                  swal("An error has occured, contact system support");

              },

          });
                  } else {
                      swal("Cancelled", "No change was made");
                  }
              });
    }


        ////SHOW LOADER ICON
        //$(document).ajaxStart(function () {
        //    $("#divLoader").show();
        //});
        ////HIDE LOADER ICON
        //$(document).ajaxStop(function () {
        //    $("#divLoader").hide();
        //});

    </script>
}
