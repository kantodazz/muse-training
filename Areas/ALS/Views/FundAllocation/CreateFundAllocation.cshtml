@model IFMIS.Areas.ALS.Models.ALS_CreateFundAllocationVM
@{
    ViewBag.Title = "Create Fund Allocation";
    Layout =  "~/Views/Shared/_Layout.cshtml";
    var i = 0;
}

    <style>
        .required::after {
            content: "*";
            font-weight: bold;
            font-size: 16px;
            color: red;
        }

        .search-btn {
             background: #538AC5;
            border: 0;
            color: white;
            padding: 8px;
            border-radius: 0;
        }

        .submit-btn {
            background-color: white;
            color: black;
            border: 1px solid #538AC5;
            border-radius: 12px;
            padding: 3px;
            padding-right: 10px;
        }

        .searchContainer {
            display: inline-flex;
            flex: 1 1 300px;
            position: relative;
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
            padding-left: 10px;
        }

        .searchIcon {
            padding: 0.5rem;
        }

        .searchBox {
            border: 0;
            /*padding: 0.5rem 0.5rem 0.5rem 0;*/
            padding: 8px;
            flex: 1;
        }
        
        .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }
        .searchButton {
            background: #538AC5;
            border: 0;
            color: white;
            /*padding: 0.5rem;*/
            padding: 8px;
            border-radius: 0;
        }

        input[type=text] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
        }

         select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

        input[type=search] {
            padding: 4px;
            border: hidden;
            border-radius: 4px;
        }

        .action-btn {
            width: 100px;
            border-radius: 10px;
        }

        .info-box {
            padding: 10px;
            background-color: #ECF3F8;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .info-box {
            padding: 10px;
            background-color: #ECF3F8;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        input {
        padding: 8px;
        border: 1px solid #ccc;
        }


        .alert-secondary {
            background-color: lightgrey;
            color: black;
        }
    </style>

<!--Main Content start Here-->
<div id="content">
    <section id="widget-grid" class="">
        <div class="row">
            <article  class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"><i class="fa fa-table"></i></span>
                        <h2>@ViewBag.Title</h2>
                    </header>
                    <!--Start of Widget Div here-->
                    <div>
                        <div class="widget-body">
                            @*@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formAddRequest" }))
                            {*@
                                @Html.AntiForgeryToken()
                                <div class="panel-body">
                                    <div class="form-horizontal">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.FundReceivingId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                                            <div class="col-md-8 name-input-container">
                                                @Html.DropDownListFor(model => model.FundReceivingId, Model.FundReceivingLists, "---Select Funding Receiving---", new { @class = "form-control select2", @required = "required" })
                                                @Html.ValidationMessageFor(model => model.FundReceivingId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.FundingSource, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.FundingSource, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.FundingSource, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BudgetClass, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.BudgetClass, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.BudgetClass, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.LabelFor(model => model.FundingDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.Editor("FundingDate2", new { htmlAttributes = new { @class = "form-control", @Disabled = true } })
                                                @Html.ValidationMessageFor(model => model.FundingDate, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ComponentDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.ComponentDesc, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.ComponentDesc, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.Label("Institution Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.VoteId, Model.InstitutionLists, "Select Institution", new { @class = "form-control select2 multiple ", @required = "required" })
                                                @Html.ValidationMessageFor(model => model.VoteId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>


                                            <div class="form-group" id="Is_Embassary">
                                                @Html.LabelFor(model => model.IsEmbassary, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.CheckBoxFor(m => m.IsEmbassary)
                                                    @Html.ValidationMessageFor(model => model.IsEmbassary, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group" id="Is_SublevelCode">

                                                @Html.Label("Sub level Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    @Html.DropDownListFor(model => model.SubLevelCode, Model.SubLevelCodeLists, "Select sub vote", new { @class = "form-control select2 multiple ", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.SubLevelCode, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        <div class="form-group">
                                            <label class="col-md-2 control-label" style="font-weight:normal;text-align:right">Allocation Description<i class="fa fa-times" style="color:white" id="AllocationDesc-1"></i>(<span style="font-weight:bold;" id="AllocationDescCount">250</span>)</label>
                                            <div class="col-md-3">
                                                <textarea class="form-control" id="AllocationDesc" name="AllocationDesc" maxlength="250"></textarea>
                                            </div>

                                            <div class="selectedTypeAllocation">
                                                @Html.LabelFor(model => model.AllocationAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-3">
                                                    <amount-input id="AllocationAmount" onkeyup="calcAmount()" style="width:265px" />
                                                    @* @Html.EditorFor(model => model.AllocationAmount, new { htmlAttributes = new { @class = "form-control", onkeypress = "return isNumberKey(event)", @onkeyup = "calcAmount()" } })*@
                                                    @Html.ValidationMessageFor(model => model.AllocationAmount, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                        </div>
                                        <!--Hide field -->
                                        <input id="FundingRefNo" type="hidden" value="" />
                                        <input id="SubBudgetClass" type="hidden" value="" />
                                        <!--End of Hide field-->
                                    </div>
                                </div>
                             @*}*@
                            <div class="modal-footer">
                                <div class="col-md-offset-2 col-md-6">
                                    <a class="btn btn-info" href="@Request.UrlReferrer"><i class="fa  fa-arrow-left"></i>Back</a>
                                    <button type="button" id="saveData" class="btn btn-info" style="margin-right:5px"><i class="fa fa-save"></i>Save</button>
                                </div>
                            </div>
                        </div>
                        <!--End of Widget content-->
                        <!--Modal start here-->
                        
                        <!--Modal  end here-->
                    </div>
                    <!--Widget Div end here-->
                    <br />
                </div>
            </article>
        </div>
    </section>
</div>
<!--End Main Content here -->
@section Scripts{
    <script>

        $('#Is_Embassary').toggle(false)
        $('#Is_SublevelCode').toggle(false)
        $('#IsEmbassary').change(function () {
            var isChecked = $(this).is(':checked');
            if ($(this).prop("checked")) {

                $('#Is_SublevelCode').toggle(true);
            } else {
                $('#Is_SublevelCode').toggle(false)
            }
        });

        $("#VoteId").change(function () {

            var vote = $(this).val();
            var voteCode = $('#VoteId').val();

            if (vote == "39") {

                $('#Is_Embassary').toggle(true);

            } else {
                $('#Is_Embassary').toggle(false);
            }
  
        });


        ///ON change of Funding Receiving ID
        $("#FundReceivingId").change(function () {
            var id = $(this).val();
            console.log('FirstId', id);
            var URL = '@Url.Action("GetFundReceivingDetails", "FundAllocation")';
            $.ajax({
                type: "POST",
                url: URL,
                data: { id: id },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                         $('#FundingSource').val(data.FundingSource);
                         $('#FundReceivingId').val(data.FRID);
                         $('#OperationalAmount').val(data.OperationalAmount);
                         $('#BudgetClass').val(data.BudgetClass);
                         $('#FundingDate2').val(data.FundingDate);
                         $("#FundingRefNo").val(data.FundRefNo);
                         $("#SubBudgetClass").val(data.SubBudgetClass);
                         $('#ComponentDesc').val(data.ComponentDesc);
                         $('#OperationalAmount').autoNumeric('init');
                    } else {
                        alert('This data does not exist!');
                        $('#FundingSource').val("");
                        $('#OperationalAmount').val("");
                        $('#BudgetClass').val("");
                        $('#FundingDate').val("");
                        $("#FundingRefNo").val("");
                        $("#SubBudgetClass").val("");
                        $('#ComponentDesc').val("");
                    }
                }

            });
        });

        //Count input char
          $('#AllocationDesc').on("keyup", function () {
            var count = $('#AllocationDesc').val().split('');
            var numChars = 250 - parseInt(count.length);
            $('#AllocationDescCount').text(parseInt(numChars));
          });

        ///Change when selected FundAllocationType
        var selectedType = ''
        $("#AllocationType1").change(function () {
            var type = $(this).val();
            selectedType = $(this).val();
            if (type == "Allocation")
            {
                $("#AllocationField").show();
                $("#WithdrawField").hide();

            }
            else if (type == "Withdraw")
            {
                 $("#WithdrawField").show();
                 $("#AllocationField").hide();
            }
            else
            {
                  $("#AllocationField").hide();
                  $("#WithdrawField").hide();
            }
        });

        ///Save Data
        $("#saveData").click(function () {
            //Checking if it has value
            debugger;
            var allocationDesc = $('#AllocationDesc').val();
            var allType = $('#AllocationType').val();
            var text = $('#FundReceivingId').val();
            var AllocationAmount = $('#AllocationAmount').val();
            var VoteId = $('#VoteId').val();
            
            if (text == '') {
                swal('Please Select Funding Receiving Detail', { icon: "warning" });
                return false;
            }
            else if (allocationDesc == '') {
                swal("Allocation Description Required!", { icon: "warning" });
                return false;
            }
            else if (VoteId == '') {
                swal("Please Select Institution Name", { icon: "warning" });
                return false;
            }
            else if (AllocationAmount == '') {
                swal("Please enter Allocation Amount", { icon: "warning" });
                return false;
            } else if (AllocationAmount < 1) {
                swal("Please enter Allocation Amount", { icon: "warning" });
                return false;
            }

            $("#saveData").prop('disabled', true);
            var token = $("[name='__RequestVerificationToken']").val();
            var formData = {
                   __RequestVerificationToken: token,
                   "FundReceivingId":   $('#FundReceivingId').val(),
                   "FundingSource":     $('#FundingSource').val(), 
                   "FundingRefNo":      $("#FundingRefNo").val(),
                   "SubBudgetClass" :   $("#SubBudgetClass").val(),
                   "BudgetClass":       $('#BudgetClass').val(),
                   "FundingDate":       $('#FundingDate2').val(),
                   "ComponentDesc" :    $('#ComponentDesc').val(),
                   "AllocationAmount" : $('#AllocationAmount').val(),
                   "AllocationDesc": $('#AllocationDesc').val(),
                   "VoteId": $("#VoteId").val(),
                   "SubLevelCode": $('#SubLevelCode').val(),
                   //"IsEmbassary": $('#IsEmbassary').val(),
                   "IsEmbassary": $('#IsEmbassary').prop("checked"),
                   //formData.append('IsEmbassary', $(this).is(':checked'));
            }

            console.log('FormData', formData);

            var urlList = '@Url.Action("FundAllocationList", "FundAllocation")';
            var url = '@Url.Action("SaveFundAllocationDetails", "FundAllocation")';
            var urlRedict = '@Url.Action("CreateFundAllocation", "FundAllocation")';

            $.ajax({
                url: url,
                type: "POST",
               // data: JSON.stringify(formData),
                data: formData,
                dataType: "JSON",
               // contentType: "application/json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (response) {
                    $("#savebtn").prop('disabled', false);
                    if (response == "Success") {
                        swal("Fund Allocation Saved Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.href = urlList;
                            });
                    }
                    else if (response == "Error") {
                        swal("Please Provide Vote Allocation Details!", { icon: "warning" })
                            .then((value) => {
                                window.location.href = urlRedict;
                            });
                    }
                    else if (response == "No Balance") {
                        swal("You don't have enough Balance!", { icon: "warning" })
                            .then((value) => {
                                window.location.href = urlRedict;
                            });
                    }
                    else {
                        swal(response);
                    }
                },
                error: function () {
                    alert('Error Please try again');
                    $('#btnSave').val('Save');
                }
            });

            getFundSummaryIdDetailFn();
        });

        //Allow on Number in input field
        function isNumberKey(evt)
        {
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

            return true;
        }

        ///Calcute Amount for different..
        function calcAmount() {
            $('#AllocationAmount').autoNumeric('init');
            var EnterAmount = parseFloat($('#AllocationAmount').val().toString().split(",").join(""));
            var balanceAmount = parseFloat($('#OperationalAmount').val().split(",").join(""));

            if (EnterAmount > balanceAmount) {
                swal("Allocated Amount Should not exceed Fund Receiving Amount", { icon: "warning" })
                    .then((value) => {
                        $("#AllocationAmount").val(0);
                    });
            }
            else if (EnterAmount == '') {
                $("#AmountRemain").val(0);
                $("#AllocationAmount").val(0);
                $("#AmountRemain").val(0);
                 $('#AmountRemain').autoNumeric('init');
            }
            //else {
            //    var newAmount = parseFloat(balanceAmount) - parseFloat(EnterAmount);
            //   // var newAmount = parseFloat(EnterAmount);
            //    console.log('NewAmount', newAmount);
            //    $("#AmountRemain").val(newAmount);
            //    $('#AmountRemain').autoNumeric('init');
            //    $("#AmountRemain").numeral($('#AmountRemain').val());
            //}
        }

        /// Get FundSummaryIdDetails to use for save in FundAllocationDetails: -- getFundSummaryIdDetailFn();
        debugger;
        function getFundSummaryIdDetailFn() {
            var id = $('#FundReceivingId').val();
            var URL = '@Url.Action("GetFundSammaryId","FundAllocation")';
            var params = { "id": id };

            $.ajax({
                type: "GET",
                url: URL,
                data: params,
                contentType: "application/json; charset=utf-8",
                dataType: function (response) {
                    data = response.data.AllocationSummaryId;
                    //datalength = data.datalength;
                }
            });
        }


        ///Add Allocation and open Dialog with name VoteAllocation
        function VoteAllocation() {
            var fRecid = $('#FundReceivingId').val();
            if (fRecid == '') {
                swal("Please Select Fund Receiving Details", { icon: "warning" });
                return false;
            }
            else {
                $('#VoteAllocation').modal('show');
                $("#BalanceAmount").val($("#OperationalAmount").val());
                $("#AllocationType").val($("#AllocationType1").val());
                if (selectedType == 'Allocation') {
                    $(".selectedTypeAllocation").toggle(true);
                    $(".selectedTypeWithdraw").toggle(false);
                } else {
                    $(".selectedTypeAllocation").toggle(false);
                    $(".selectedTypeWithdraw").toggle(true);
                }

                console.log("SelectedType",selectedType);
                $("#WithdrawAmount").val(0);
            }
        };

         var dt_voteAllocs = $('#dt_voteAllocs').dataTable();
         $("#dt_voteAllocs_wrapper .dt-toolbar").remove();
         $("#dt_voteAllocs_wrapper .dt-toolbar-footer").remove();


        var allFundAllocations = []
        var fundAllocation = []

        //Now Add Vote Allocation Data:---
        function addAllocationForm() {

            if ($("#AllocInstitutionName").val() == '') {
                swal("Please select Institution Details", { icon: "warning" });
                return false;
            }
            if ($("#AllocationAmount").val() == '') {
                swal("Please enter Amount to allocate", { icon: "warning" });
                return false;
            }

            //else if ($("#AllocationAmount").val() >($("#OperationalAmount").val())) {
            //    swal("Allocated Amount Exceed the budget Amount", { icon: "warning" });
            //    return false;
            //}
            var amountRemain = $("#AmountRemain").val();
            var code = $("#AllocInstitutionName").val();
            var amount = $("#AllocationAmount").val();

             if (!(fundAllocation.includes(code) && fundAllocation.includes(amount))) {
                allFundAllocations.push({
                    FundAllocSummaryId: $("#FundReceivingId :selected").text(),
                    AllocInstitutionName: $("#AllocInstitutionName :selected").text(),
                   // AllocInstitutionCode: $("#AllocInstitutionCode :selected").text(),
                    AllocationAmount: $("#AllocationAmount").val(),
                    OperationalAmount: amountRemain,
                    FundingRefNo: $("#FundingRefNo").val(),
                    WithdrawAmount: $("#WithdrawAmount").val(),
                    CurrentBalance: $("#CurrentBalance").val(),
                    BalanceDate: $("#BalanceDate").val(),
                })
                updateVoteAllocationTables();
                clearFormValues();
            } else {
                swal("Duplicate Fund Allocation");
            }

            function clearFormValues() {
                //$("#FundReceivingId").val('');
                document.getElementById("select2-chosen-3").innerText = '';
                $("#AllocInstitutionName").val('');
                $("#AllocationAmount").val('');
            }

        }

        ///var fId = $("#FundReceivingId").val();
        function updateVoteAllocationTables() {
            var totalCount = 0;
            dt_voteAllocs.fnClearTable();
            for (var i = 0; i < allFundAllocations.length; i++) {
                dt_voteAllocs.fnAddData([i + 1,
                allFundAllocations[i]["AllocInstitutionName"],
                allFundAllocations[i]["FundingRefNo"],
                allFundAllocations[i]["AllocationAmount"],
                //allFundAllocations[i]["WithdrawAmount"],
                //allFundAllocations[i]["CurrentBalance"],
                //allFundAllocations[i]["BalanceDate"],
                '<a href="#" onclick="removeVoteAlloc(' + i + ')">\
                    <i class="glyphicon glyphicon-trash"></i></a>'
                ]);

                totalCount = parseFloat(totalCount) + parseFloat(allFundAllocations[i]['AllocInstitutionName'].toString().split(",").join(""));
            }

            if (totalCount > 0) {
                $("#added_fundsLabel").text(" (" + totalCount + ")");
                $("#votes_added").text(" (" + allFundAllocations.length + ")");
            }
            else {
                $("#added_fundsLabel").text("Add Fund");
            }

        }


        ///REMOVE Added votes allocation details
        function removeVoteAlloc(index) {
            allFundAllocations.splice(index, 1);
            fundAllocation.splice(index, 1);
            updateVoteAllocationTables();
        }

    </script>    
}