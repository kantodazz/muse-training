@model IFMIS.Areas.ALS.Models.EditALSFundAllocationVM
@{
    ViewBag.Title = "Edit Fund Allocation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .search-btn {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 5px;
        padding-right: 10px;
    }

    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }

    .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }

    .search-icon {
        padding: 0.5rem;
    }

    .search-button {
        background: #538AC5;
        border: 0;
        color: white;
        padding: 8px;
        border-radius: 0;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        width: 205px;
    }

    input[type=text] {
        padding: 5px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
</style>
<div id="content">
    <section id="widget-grid" class="">
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                <header>
                    <span class="widget-icon"><i class="fa fa-table"></i></span>
                    <h2>@ViewBag.Title</h2>
                </header>
                <div>
                    <div class="form-horizontal">
                        @*//<input type="hidden" id="FundAllocDetailId" value="" />*@
                        <div class="form-group">
                            <div class="form-group">
                                @Html.LabelFor(model => model.FundReceivingId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                                <div class="col-md-8 name-input-container">
                                    @Html.DropDownListFor(model => model.FundReceivingId, Model.FundReceivingLists, "---Select Funding Receiving---", new { @class = "form-control select2" })
                                    @Html.ValidationMessageFor(model => model.FundReceivingId, "", new { @class = "text-danger" })
                                </div>
                                @Html.HiddenFor(model => model.FundingSource)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(model => model.FundAllocDetailId)
                            @Html.LabelFor(model => model.AllocInstitutionName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.AllocInstitutionName, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                                @Html.ValidationMessageFor(model => model.AllocInstitutionName, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.FundingRefNo, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.FundingRefNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                @Html.ValidationMessageFor(model => model.FundingRefNo, "", new { @class = "text-danger" })
                            </div>

                            @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                                @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="form-group" id="Is_Embassary">
                            @Html.LabelFor(model => model.IsEmbassary, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.CheckBoxFor(m => m.IsEmbassary)
                                @Html.ValidationMessageFor(model => model.IsEmbassary, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group" id="Is_SublevelCode">

                            @Html.Label("Sub level Name", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.SubLevelCode, Model.SubLevelCodeLists, "Select sub vote", new { @class = "form-control select2 multiple ", @required = "required" })
                                @Html.ValidationMessageFor(model => model.SubLevelCode, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="form-group">

                            @Html.LabelFor(model => model.AllocationAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.AllocationAmount, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                                @Html.ValidationMessageFor(model => model.AllocationAmount, "", new { @class = "text-danger" })
                            </div>

                            @Html.LabelFor(model => model.EditedAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.EditedAmount, new { htmlAttributes = new { @class = "form-control", onkeypress = "return isNumberKey(event)", @onkeyup = "validateAmount()" } })
                                @Html.ValidationMessageFor(model => model.EditedAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-info" id="updateVoteAllocation">
                            <i class="fa fa-save">Update</i>
                        </button>
                        <a href="@Request.UrlReferrer" class="btn btn-info btn-flat">
                            <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                            Back
                        </a>
                    </div>
                   
                </div>
            </div>
        </article>
    </section>

</div>
@section Scripts{
    <script>
        $(document).ready(function () {
            $("#AllocationAmount").autoNumeric('init');
            $("#OperationalAmount").autoNumeric('init');


           var voteCode = '@ViewBag.voteCode';
            console.log(voteCode);

            if (voteCode == "34") {

                $('#Is_Embassary').toggle(true);

            } else {
                $('#Is_Embassary').toggle(false);
            }


            var is_Embassary = '@ViewBag.IsEmbassary';
            console.log(is_Embassary);
            
            if (is_Embassary=="True") {
                $('#Is_SublevelCode').toggle(true);
            } else {
                $('#Is_SublevelCode').toggle(false)
            }


        });

        $('#Is_Embassary').toggle(false);
        $('#Is_SublevelCode').toggle(false);

        $('#IsEmbassary').change(function () {
            var isChecked = $(this).is(':checked');
            if ($(this).prop("checked")) {

                $('#Is_SublevelCode').toggle(true);

            } else {
                $('#Is_SublevelCode').toggle(false)

            }
        });

        $("#VoteId").change(function () {

            var vote = $(this).val();
            var voteCode = $('#VoteId').val();

            if (vote == "39") {

                $('#Is_Embassary').toggle(true);

            } else {
                $('#Is_Embassary').toggle(false);
            }


        });


        $("#FundReceivingId").change(function () {
            var Id = $(this).val();
            var URL = '@Url.Action("getEditedVoteDetail", "FundAllocation")';
            $.ajax({
                type: "POST",
                url: URL,
                data: { id: Id },
                success: function (response) {
                    if (response[0] == "Success") {
                       // $(".modal-body #FundAllocDetailId").val(voteId);
                       //// var arg = response[1];
                       // $(".modal-body #AllocationAmount").val(response[2]);
                        $("#FundingRefNo").val(response[1]);
                       // $(".modal-body #AllocInstitutionName").val(response[4]);
                        $("#OperationalAmount").val(response[2]);
                        $("#FundingSource").val(response[3]);
                        //$("#AllocationAmount").autoNumeric('init');
                        $("#OperationalAmount").autoNumeric('init');

                        //$("#editVote").modal("show"); ///Show the modal then pass the above values...
                    }
                    else if (response[0] == "DbException") {
                         swal("An error has occured, contact system support" + response[0]);
                        $("#divLoader").hide();
                    }
                },
                error: function (xhr) {
                      alert("An error has occured, contact system support");
                    $("#divLoader").hide();
                },
            });

        });


        //Allow on Number in input field
        function isNumberKey(evt)
        {
            $("#EditedAmount").autoNumeric('init');
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

            return true;
        }

        //Calculate Amount for validation
        function validateAmount() {
            ///console.log('Amount', $("#OperationalAmount").val());
            ///console.log('NewAmount', $("#EditedAmount").val());
            var operationAmount = parseFloat($("#OperationalAmount").val().split(",").join(""));
            var newAmount = parseFloat($("#EditedAmount").val().split(",").join(""));

            if (newAmount > operationAmount) {
                swal("Please Make Sure New Amount Should Not exceed Balance Amount", { icon: "warning" })
                    .then((value) => {
                        $("#EditedAmount").val(0);
                    });
            }
            else if (newAmount == '') {
                swal("Please Provide New Amount", { icon: "warning" });
                return false;
            }
        }


        //Save Updated Data
        $("#updateVoteAllocation").click(function () {
            debugger;
            var id = $("#FundAllocDetailId").val();
            var fId = $("#FundReceivingId").val();
            var frn = $("#FundingRefNo").val();
            var fSource = $("#FundingSource").val();
            var isEmbassary2 = $("#IsEmbassary").prop("checked");
            var subLevelCode = $("#SubLevelCode").val();
            //var newAmount = parseFloat($("#EditedAmount").val().split(",").join(""));
            var newAmount = $("#EditedAmount").val().split(",").join("");

            var token = $("[name='__RequestVerificationToken']").val();
            if (newAmount == '') {
                swal("Please Provide New Amount", { icon: "warning" });
                return false;
            }
            if (newAmount == 'NaN') {
                swal("Please Provide New Amount", { icon: "warning" });
                return false;
            }


            if (fId == '') {
                swal("Please Select Fund Receing Data", { icon: "warning" });
                return false;
            }

            var formData = {
                __RequestVerificationToken: token,
                "FundAllocDetailId": id,
                "FundReceivingId": fId,
                "FundingRefNo": frn,
                "FundingSource": fSource,
                "EditedAmount": parseFloat(newAmount),
                "IsEmbassary": isEmbassary2,
                "SubLevelCode": subLevelCode
            }
            console.log('formdata', formData);

            var urlList = '@Url.Action("UpdateFundAllocation", "FundAllocation")';
            var url = '@Url.Action("FundAllocationList", "FundAllocation")';

            $.ajax({
                url: urlList,
                type: "POST",
                //data: JSON.stringify(formData),
                data: formData,
                dataType: "JSON",
                //contentType: "application/json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (response) {
                    $("#updateVoteAllocation").prop('disabled', false);
                    if (response == "Success") {
                        swal("Allocation Update Successfully!", { icon: "success" })
                            .then((_) => window.location.href=url);
                    }
                    else {
                        swal("Please Make Sure All Updated information is Available" + response);
                    }
                },
                  error: function () {
                    alert('Error Please try again');
                    $('#btnSave').val('Save');
                }
            });
        });

        //Delete FundAllocation Record
        function RemoveAllocData(i) {
            var numberItem = $("#x").val();
            if (numberItem == 1) {
                swal({
                    title: "Cancel Entire Allocation?",
                    text: "Removing this will remove the entire Allocation,",
                    icon: "warning",
                    buttons: [
                        "Yes",
                        "No"
                    ],
                    closeOnClickOutside: false,
                }).then(function (isConfirm) {
                    if (isConfirm) {
                        swal("Cancelled", "No change was Made");
                    } else {
                        DeleteAllVoteAlloc(i);
                    }
                })
            }
            else {
                swal({
                    title: "Are you sure?",
                    text: "Once Remove, you will not be able",
                    icon: "warning",
                    buttons: [
                        "Yes",
                        "No"
                    ],
                    closeOnClickOutside: false,
                }).then(function (isConfirm) {
                    if (isConfirm) {
                        swal("Cancelled", "No changes was made");
                    } else {
                        DeleteOneVote(i);
                    }
                })
            }

        }

        ///Remove One Vote Item selected
        function DeleteOneVote(id) {
            var url = '@Url.Action("DeleteOneVoteData", "FundAllocation")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Cancel One Item Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.reload();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
         }

        ///Remove All Vote Details

         function DeleteAllVoteAlloc(id) {
             var url = '@Url.Action("DeleteAllVoteDatas", "FundAllocation")';
              var urlList = '@Url.Action("FundAllocationList", "FundAllocation")';
            $.ajax({
                type: "post",
                url: url,
                data: { "id": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    console.log('res', response);
                    if (response == "Success") {
                        swal("Deleted All Vote Details Successfully!", { icon: "success" })
                            .then((value) => {
                               window.location.href = urlList;
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

       /////On change of Funding Receiving Id
       // $("#FundReceivingId").change(function () {
       //     debugger
       //     var NewFid = $("#select2-chosen-1").text();
       //     console.log('FirstId', NewFid);
       // })

    </script>
}