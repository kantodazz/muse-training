@model IFMIS.Areas.ALS.Models.EditALSFundAllocationVM
@{
    ViewBag.Title = "Edit Fund Withdraw";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    <style>
        .search-btn {
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px;
            padding-right: 10px;
        }

        .search-container {
            display: inline-flex;
            flex: 1 1 300px;
            position: relative;
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
            padding-left: 10px;
        }

        .name-input-container {
            display: inline-flex;
            flex: 1 1 300px;
            position: relative;
            overflow: hidden;
        }

        .search-icon {
            padding: 0.5rem;
        }

        .search-button {
            background: #538AC5;
            border: 0;
            color: white;
            padding: 8px;
            border-radius: 0;
        }

        input[type=number] {
            padding: 8px;
            border: 1px solid #ccc;
            width: 205px;
        }

        input[type=text] {
            padding: 5px;
            border: 1px solid #ccc;
        }

        input[type=search] {
            padding: 4px;
            border: hidden;
            border-radius: 4px;
        }

        textarea {
            border: 1px solid #ccc;
        }

        select {
            padding: 8px;
            border: 1px solid #ccc;
            resize: vertical;
            width: 230px;
        }

        .action-btn {
            width: 100px;
            color: white;
        }

        .form-label {
            text-align: right;
        }

        td {
            padding: 5px;
        }

        .info-box {
            padding: 10px;
            background-color: #ECF3F8;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
    </style>
<div id="content">
    <section id="widget-grid">
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
           <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
            <header>
                <span class="widget-icon"><i class="fa fa-table"></i></span>
                <h2>@ViewBag.Title</h2>
            </header>
                <div>
                    <div class="widget-body">
                        <div class="form-horizontal">
                            @Html.HiddenFor(model=>model.FundAllocDetailId)
                            
                            <div class="form-group">
                                @Html.LabelFor(model => model.ComponentName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.ComponentName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.ComponentName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">

                                @Html.LabelFor(model => model.FundingRefNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.FundingRefNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.FundingRefNo, "", new { @class = "text-danger" })
                                </div>

                                @Html.LabelFor(model => model.OriginalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.OriginalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.OriginalAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
                                </div>

                                @Html.LabelFor(model => model.AllocationAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.AllocationAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.AllocationAmount, "", new { @class = "text-danger" })
                                </div>

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.WithdrawAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.WithdrawAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.WithdrawAmount, "", new { @class = "text-danger" })
                                </div>

                                @Html.LabelFor(model => model.EditedAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.EditedAmount, new { htmlAttributes = new { @class = "form-control", onkeypress = "return isNumberKey(event)", @onkeyup = "validateAmount()"} })
                                    @Html.ValidationMessageFor(model => model.EditedAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="modal-footer">
                            <div class="col-md-12">
                                <button class="btn btn-info" id="updateVoteWithdraw">
                                    <i class="fa fa-save">Update</i>
                                </button>
                                <a href="@Request.UrlReferrer" class="btn btn-info btn-flat">
                                    <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                    Back
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
           </div>
        </article>
    </section>

</div>
@section Scripts{
    <script>

           //Allow on Number in input field
        function isNumberKey(evt)
        {
            $("#EditedAmount").autoNumeric('init');
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

            return true;
        }

        //Calculate Amount for Withdraw
        function validateAmount() {
            var allocationalAmount = parseFloat($("#AllocationAmount").val().split(",").join(""));
            var newAmount = parseFloat($("#EditedAmount").val().split(",").join(""));

            if (newAmount > allocationalAmount) {
                swal("Please Make Sure New Amount Should Not exceed Allocated Amount", { icon: "warning" })
                    .then((value) => {
                        $("#EditedAmount").val(0);
                    });
            }
           
        }

        //Save Update Data of Withdraw
        $("#updateVoteWithdraw").click(function () {
            var id = $("#FundAllocDetailId").val();
            var newAmount = parseFloat($("#EditedAmount").val().split(",").join(""));

            console.log('ID', id);
            console.log('Edited Amount', newAmount);
            if (isNaN(newAmount) || newAmount == undefined || newAmount == '') {
                swal("Please Provide New Amount", { icon: "warning" });
                return false;
            }

            var formData = {
                "FundAllocDetailId": id,
                "EditedAmount" : newAmount,
            }
            console.log('formdata', formData);

            var urlList = '@Url.Action("UpdateFundWithdraw", "FundWithdraw")';
            var url = '@Url.Action("FundWithdrawList", "FundWithdraw")';

            $.ajax({
                url: urlList,
                type: "POST",
                data: JSON.stringify(formData),
                dataType: "JSON",
                contentType: "application/json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Withdraw Amount Updated Successfully!", { icon: "success" })
                            .then((_) => window.location.href=url);
                    }
                    else {
                        swal("Please Submit with Id", response);
                    }
                },
                  error: function () {
                    alert('Error Please try again');
                    $('#btnSave').val('Save');
                }
            });
        });
    </script>
}