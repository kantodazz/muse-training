@*@model IFMIS.Areas.ALS.Models.ALS_CreateFundAllocationVM*@
@*@model IFMIS.Areas.ALS.Models.ALS_CreateFundWithDrawVM*@
@model IFMIS.Areas.ALS.Models.ALS_CreateFundAllocationVM
@{
    ViewBag.Title = "Create Fund Withdraw";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var i = 0;
}

<style>
    .required::after {
        content: "*";
        font-weight: bold;
        font-size: 16px;
        color: red;
    }

    .search-btn {
        background: #538AC5;
        border: 0;
        color: white;
        padding: 8px;
        border-radius: 0;
    }

    .submit-btn {
        background-color: white;
        color: black;
        border: 1px solid #538AC5;
        border-radius: 12px;
        padding: 3px;
        padding-right: 10px;
    }

    .searchContainer {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }

    .searchIcon {
        padding: 0.5rem;
    }

    .searchBox {
        border: 0;
        /*padding: 0.5rem 0.5rem 0.5rem 0;*/
        padding: 8px;
        flex: 1;
    }

    .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }

    .searchButton {
        background: #538AC5;
        border: 0;
        color: white;
        /*padding: 0.5rem;*/
        padding: 8px;
        border-radius: 0;
    }

    input[type=text] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        resize: vertical;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    .action-btn {
        width: 100px;
        border-radius: 10px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }



    .alert-secondary {
        background-color: lightgrey;
        color: black;
    }
</style>

<div id="content">
    <section id="widget-grid">
        <div class="row">
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"><i class="fa fa-table"></i></span>
                        <h2>@ViewBag.Title</h2>
                    </header>
                    <div>
                        <div class="widget-body">
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "addWithdrawAmountForm" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="panel-body">
                                    <div class="form-horizontal">
                                        <!---This is the new part after remodified-->
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SearchBox, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-8">
                                                @Html.TextBoxFor(model => model.SearchBox, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.TransactionCtrlNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.TransactionCtrlNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.TransactionCtrlNo, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.LabelFor(model => model.AllocationAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.AllocationAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.AllocationAmount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.VoteBalance, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.VoteBalance, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.VoteBalance, "", new { @class = "text-danger" })
                                            </div>

                                            @Html.LabelFor(model => model.WithdrawAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.WithdrawAmount, new { htmlAttributes = new { @class = "form-control", onkeyup = "Validation()" } })
                                                @Html.ValidationMessageFor(model => model.WithdrawAmount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-2 control-label" style="font-weight:normal;text-align:right">
                                                Withdraw Description
                                                <i class="fa fa-times" style="color:white" id="AllocationDesc-1"></i>(<span style="font-weight:bold;" id="AllocationDescCount">250</span>)
                                            </label>
                                            <div class="col-md-8">
                                                <textarea class="form-control" id="AllocationDesc" name="AllocationDesc" maxlength="250"></textarea>
                                            </div>
                                        </div>

                                        <!--Hide field -->
                                        <input id="FundingRefNo" type="hidden" value="" />
                                        <input id="SubBudgetClass" type="hidden" value="" />
                                        @Html.HiddenFor(model => model.AllocationSummaryId)
                                        @Html.HiddenFor(model => model.FundAllocDetailId)
                                        @Html.HiddenFor(model => model.AllocInstitutionCode)
                                        @Html.HiddenFor(model => model.AllocInstitutionName)
                                        @Html.HiddenFor(model => model.FundReceivingId)
                                        @Html.HiddenFor(model => model.FundingSource)
                                        <!--End of Hide field-->

                                    </div>

                                </div>
                            }
                            <div>
                                <div class="col-md-offset-2 col-md-6">
                                    <a href='@Request.UrlReferrer' class="btn btn-info btn-flat">
                                        <span class="fa  fa-arrow-left" aria-hidden="true"></span> Back
                                    </a>
                                    <button type="button" id="saveWithdrawData" class="btn btn-info" style="margin-right:5px"><i class="fa fa-save"></i>Save</button>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </article>

        </div>
    </section>

</div>

@section pagespecific{
    <script>
        
        ///Select2DTO Start here
        $(document).ready(function () {
            $("#WithdrawAmount").autoNumeric('init');

            var url = '@Url.Action("GetVoteAllocDetails", "FundWithdraw")';

            $("#SearchBox").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                ajax: {
                    url: url, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "POST",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.voteAllocation }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $("#SearchBox").change(function () {
            var id = $("#SearchBox").val();
            var txtValue = $("#SearchBox").select2("data").text;

            var url = '@Url.Action("GetSelectedAllocationData", "FundWithdraw")';
            $.ajax({
                type: "post",
                url: url,
                data: { id: id, txtValue: txtValue },
                success: function (data) {
                    if (data.success) {
                        $('#AllocationSummaryId').val(data.AllocationSummaryId);
                        $('#FundAllocDetailId').val(data.FundAllocDetailId);
                        $('#FundReceivingId').val(data.FundReceivingId);
                        $('#FundingSource').val(data.FundingSource);
                        $('#AllocInstitutionCode').val(data.AllocInstitutionCode);
                        $('#AllocInstitutionName').val(data.AllocInstitutionName);
                        $("#FundingRefNo").val(data.FundRefNo);
                        $("#TransactionCtrlNo").val(data.TransactionCtrlNo);
                        $("#SubBudgetClass").val(data.SubBudgetClass);
                        $("#AllocationAmount").val(data.AllocationAmount.toLocaleString());
                        $("#VoteBalance").val(data.BalanceAmount.toLocaleString());
                    } else {
                        alert('This data does not exist!');
                        $('#FundReceivingId').val("");
                        $('#FundingSource').val("");
                        $('#FundAllocDetailId').val("");
                        $('#FundingRefNo').val("");
                        $('#SubBudgetClass').val("");
                        $('#AllocationAmount').val("");
                        $('#VoteBalance').val("");
                        $('#AllocInstitutionName').val("");
                        $('#AllocInstitutionCode').val("");
                        $('#TransactionCtrlNo').val("");
                        $('#AllocationSummaryId').val("");
                    }
                }
            });
        });

        function Validation() {
             var voteBalance = parseFloat($("#VoteBalance").val().toString().split(",").join(""));
            var withdrawAmount = parseFloat($("#WithdrawAmount").val().toString().split(",").join(""));

            var withdrawtext = document.getElementById("WithdrawAmount");

            if (withdrawAmount > voteBalance) {
                $("#WithdrawAmount").addClass("input-has-exceeded");
                withdrawtext.style.backgroundColor = "red";
                    //swal("You can't withdraw the Amount which is greater than Balance Amount", { icon: "warning" })
                    //return false;
                    $("#saveWithdrawData").attr('disabled', true);
            } else {
                $("#WithdrawAmount").removeClass("input-has-exceeded");
                withdrawtext.style.backgroundColor = "";
                $("#saveWithdrawData").attr('disabled', false);
            }
        }

         $("#saveWithdrawData").click(function () {

             $.validator.unobtrusive.parse("#addWithdrawAmountForm");
             if (!$("#addWithdrawAmountForm").valid()) {
                    return false;
             }

            var WithdrawDesc = $('#AllocationDesc').val();
            var allocAmount = $("#AllocationAmount").val();
            var TransactionCtrlNo = $("#TransactionCtrlNo").val();
            var voteBalance = $("#VoteBalance").val();
             var withdrawAmount = $("#WithdrawAmount").val();
             var FundAllocDetailId = $("#FundAllocDetailId").val();
             var AllocationSummaryId = $("#AllocationSummaryId").val();

            console.log('AllocatedAmount', allocAmount);
            console.log('withdrawAmount', withdrawAmount);

            if (withdrawAmount == '') {
                swal("Please Enter amount which you need to withdraw!", { icon: "warning" });
                return false;
                $("#saveWithdrawData").prop('disabled', false);
            }
            else if(WithdrawDesc == '') {
                 swal("Description Required", { icon: "warning" });
                return false;
                $("#saveWithdrawData").prop('disabled', false);
            }
            var formData = {
                "FundAllocDetailId": FundAllocDetailId,
                "AllocationSummaryId": AllocationSummaryId,
                "WithdrawAmount": withdrawAmount,

                "FundReceivingId": $("#FundReceivingId").val(),
                "FundingSource":     $('#FundingSource').val(),
                "WithdrawDesc": $('#AllocationDesc').val(),
                "FundingRefNo": $("#FundingRefNo").val(),
                "TransactionCtrlNo": $("#TransactionCtrlNo").val(),
                "AllocInstitutionCode": $('#AllocInstitutionCode').val(),
                "AllocInstitutionName": $('#AllocInstitutionName').val(),
                "AllocationAmount": $('#AllocationAmount').val(),
                "SubBudgetClass" :   $("#SubBudgetClass").val(),
                //"BudgetClass":       $('#BudgetClass').val(),
            }

             console.log('formdata', formData);

             var url = '@Url.Action("SaveFundWithdrawDetails","FundWithdraw")';
             @*//var urlList = '@Url.Action("FundWithdrawList","FundWithdraw")';*@
             var urlList = '@Url.Action("FundPendingWithdrawList","FundWithdraw")';
             $("#saveWithdrawData").prop('disabled', true);
                $.ajax({
                        url: url,
                        type: "POST",
                        data: JSON.stringify(formData),
                        dataType: "JSON",
                        contentType: "application/json",
                        success: function (response) {
                            if (response == "Success") {
                                swal("Fund Withdraw Successfully Save", { icon: "success" })
                                    .then((value) => {
                                        window.location.href = urlList;
                                    });
                            }
                            else if (response == "No Balance") {
                                swal("Withdraw Amount exceed balance Amount", { icon: "success" })
                                    .then((value) => {
                                        window.location.href = urlList;
                                    });
                            }
                            else {
                                swal(response);
                            }
                        },
                         error: function () {
                                alert("Error Please Try again");
                                $('#btnSave').val('save');
                            }
                });
         });

        //Correct Code End here

        //On change of FundReceiving ID
        @*$("#FundAllocSummaryId").change(function () {
            var id = $(this).val();

             var url = '@Url.Action("GetFundingWithdrawDetails", "FundWithdraw")';
            //document.getElementById('select2-chosen-2').innerText = '';
            //$("#AllocationAmount").val('');

            $.ajax({
               type: "post",
                url: url,
                data: { id: id },
                success: function (data) {
                    if (data.success) {
                        $('#AllocationSummaryId').val(data.FRID);
                        $("#FundingRefNo").val(data.FundRefNo);
                        $("#TransactionCtrlNo").val(data.TransactionCtrlNo);
                        $("#SubBudgetClass").val(data.SubBudgetClass);
                        $("#AllocationAmount").val(data.AllocationAmount.toLocaleString());
                    } else {
                        alert('This data does not exist!');
                        $('#FundReceivingId').val("");
                        $('#FundingRefNo').val("");
                        $('#SubBudgetClass').val("");
                        $('#AllocationAmount').val("");
                    }
                }
            });

            getFundVoteAllocated();
        });

        function getFundVoteAllocated() {

            //$("#AllocInstitutionCode").change();
             var option = [];
            var id = $("#FundReceivingId").val();
            var url = '@Url.Action("GetFundVoteDetails", "FundWithdraw")';
            $.ajax({
                    type: "GET",
                    url: url,
                    data: { id: id},
                success: function (data) {
                    console.log('data', data);
                        option.push('<option value="">Select Votes Allocated Details</option>');
                        data.data.forEach(d => {
                            option.push('<option value=' + d["AllocInstitutionCode"] + '>' + d["AllocInstitutionCode"] + '-' + d["AllocInstitutionName"] + '</option>');
                        });
                        option = option.toString().replace(",", "").replace("[", "").replace("]", "");
                        $("#AllocInstitutionCode").html(option);
                    }
                });
        }*@

         //Allow on Number in input field
        function isNumberKey(evt)
        {
            $('#WithdrawAmount').autoNumeric('init');
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

            return true;
        }

        //On change of AllocationCode
        @*var voteCode = '';
        $("#AllocInstitutionCode").change(function () {
            var code = $(this).val();
            console.log('code', code);
            voteCode = $(this).val();
            var URL = '@Url.Action("GetAllocAmount", "FundWithdraw")';
            $.ajax({
                 type: "GET",
                url: URL,
                data: { code: voteCode },
                success: function (data) {
                    if (data.success) {
                         $("#AllocationAmount").val(data.AllocationAmount.toLocaleString());
                    }
                    else {
                        $("#AllocationAmount").val("");
                    }
                }
            });

        });*@


         //Count input char
        $('#AllocationDesc').on("keyup", function () {
            var count = $('#AllocationDesc').val().split('');
            var numChars = 250 - parseInt(count.length);
            $('#AllocationDescCount').text(parseInt(numChars));
        });

        //Save WithdrawData Form
        @*$("#saveWithdrawData").click(function () {
             var WithdrawDesc = $('#AllocationDesc').val();
            var withdraw = $('#WithdrawAmount').val();

            var fid = $('#FundReceivingId').val();

            if (fid == '') {
                swal("Please Select Funding Source", { icon: "warning" });
                return false;
            }
            else if (withdraw == '') {
                swal("Please Enter amount which you need to withdraw!", { icon: "warning" });
                return false;
            }
            else if(WithdrawDesc == '') {
                swal("Description Required", { icon: "warning" });
                return false;
            }

            var formData = {
                "FundReceivingId": $("#FundReceivingId").val(),
                 "FundingSource":     $('#FundingSource').val(),
                "WithdrawDesc": $('#AllocationDesc').val(),
                "WithdrawAmount": $('#WithdrawAmount').val(),
                "FundingRefNo": $("#FundingRefNo").val(),
                "AllocInstitutionCode": $('#AllocInstitutionCode').val(),
                "AllocationAmount": $('#AllocationAmount').val(),
                 "SubBudgetClass" :   $("#SubBudgetClass").val(),
                   "BudgetClass":       $('#BudgetClass').val(),
            }

            var urlList = '@Url.Action("FundWithdrawList", "FundWithdraw")';
            var url = '@Url.Action("SaveFundWithdrawDetails", "FundWithdraw")';

            $.ajax({
                url: url,
                type: "POST",
                data: JSON.stringify(formData),
                dataType: "JSON",
                contentType: "application/json",
                success: function (response) {
                    if (response == "Success") {
                        swal("Fund Withdraw Successfully Save", { icon: "success" })
                            .then((value) => {
                                window.location.href = urlList;
                            });
                    }
                    else {
                        swal(response);
                    }
                },
                 error: function () {
                        alert("Error Please Try again");
                        $('#btnSave').val('save');
                    }
            });
        });*@
    </script>
}