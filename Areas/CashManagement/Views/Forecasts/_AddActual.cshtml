@model IFMIS.Areas.CashManagement.Models.AddActualVM

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formForecast" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ForecastId)
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.FundFlowCategory, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.FundFlowCategory, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.FundFlowCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FundFlowSubCategory, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.FundFlowSubCategory, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.FundFlowSubCategory, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Currency, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EstimatedAmount, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.EstimatedAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.EstimatedAmount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActualAmount, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.ActualAmount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ActualAmount, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>
}

<script>
    $("#btnSave").click(function () {
        $.validator.unobtrusive.parse("#formForecast");
        if (!$("#formForecast").valid()) {
                return false;
            }
            var url = '@Url.Action("AddActual", "Forecasts")';

            var model = $("#formForecast").serialize();

            $("#divLoader").show();
            $.ajax({
                type: "POST",
                url: url,
                data: model,
                success: function (response) {
                    if (response == "Success") {
                        swal("Actual saved successfully", { icon: "success" })
                                                 .then((value) => {
                                                     location.reload();
                                                 });
                    }
                },
                error: function (response) {
                    swal("An error occured while processing your request", { icon: "error" });
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            });
    });
</script>
