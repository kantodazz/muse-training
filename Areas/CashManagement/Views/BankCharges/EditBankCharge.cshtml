@model IFMIS.Areas.CashManagement.Models.EditBankChargeVM


@{
    ViewBag.Title = "Edit Bank Charge";
}

<div id="divLoader">
</div>
<div id="content">
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget jarviswidget-color-white" id="wid-id-0" data-widget-editbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                     usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                        -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2> Create Bank Charges </h2>
                    </header>
                    <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form method="post" id="form" class="form-horizontal" encytpe="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.BankchargesID)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SwiftCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.SwiftCode, Model.BankNameList, "Select Bank", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.SwiftCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FeeCategoryId, "Category Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        <select id="FeeCategoryId" class="form-control select2">
                                            <option value="@ViewBag.FeeCategoryId" selected="selected">@ViewBag.FeeCategoryName</option>
                                            @foreach (var catelist in ViewBag.categoryList)
                                            {
                                                <option value='@catelist.FeeCategoryId'>
                                                    @catelist.FeeCategoryName
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.FeeSubCategoryId, "Sub Category Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        <select id="FeeSubCategoryId" class="form-control select2">
                                            <option value="@ViewBag.FeeSubCategoryId" selected="selected">@ViewBag.FeeSubCategoryName </option>
                                            @foreach (var sublist in ViewBag.subCategoryList)
                                            {
                                                <option value='@sublist.FeeSubCategoryId'>
                                                    @sublist.FeeSubCategoryName
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.EffectiveStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.EffectiveStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EffectiveStartDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.EffectiveEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.EffectiveEndDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EffectiveEndDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-10">
                                            <button type="button" class="btn btn-info" id="btnSave" style="float: left">
                                                <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                                                Save
                                            </button>
                                            <a href="@Url.Action("BankChargesList")" class="btn btn-default" style="float: left; margin-left: 10px">
                                                <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>

                            </form>
                            <!-- end widget content -->
                        </div>
                        <!-- end widget div -->
                    </div>
                    <!-- end widget -->
                </div>
            </article>
        </div>
    </section>
</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">

        $(function () {

            $("#Rate").autoNumeric('init');

           $("#FeeCategoryId").change(function () {
            debugger
             var url = "@Url.Action("", "BankCharges")";
             var feeCategoryId = $("#FeeCategoryId").val();
             console.log(feeCategoryId);
            var option = [];
             $.ajax({
                 url: '@Url.Action("GetSubCategoryList", "BankCharges")/?feeCategoryId=' + feeCategoryId + '',
                type: "GET",
                 dataType: "json",
                 success: function (data) {
                     option.push('<option value="">--Select Name--</option>');
                     data.forEach(d => {
                         option.push('<option value=' + d["Value"] + '>' + d["Text"] + '</option>');
                     });
                     option = option.toString().replace(",", "").replace("[", "").replace("]", "");
                     $("#FeeSubCategoryId").html(option);

                }
            });
           });

            $("#btnSave").on("click", function () {
            $("#btnSave").attr("disabled", true);
            $.validator.unobtrusive.parse("#form");
            if (!$("#form").valid()) {
                    $("#btnSave").attr("disabled", false);
                    return false;
                }

                $("#divLoader").show();

                var token = $("[name='__RequestVerificationToken']").val();

                var formData = new FormData();

                formData.append("__RequestVerificationToken", token);
                formData.append("BankchargesID", $('#BankchargesID').val());
                formData.append("SwiftCode", $('#SwiftCode').val());
                formData.append("Rate", $('#Rate').val());
                formData.append("FeeCategoryId", $('#FeeCategoryId').val());
                formData.append("FeeSubCategoryId", $('#FeeSubCategoryId').val());
                formData.append("EffectiveStartDate", $('#EffectiveStartDate').val());
                formData.append("EffectiveEndDate", $('#EffectiveEndDate').val());


                var url = '@Url.Action("EditBankCharge","BankCharges")';
                $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(Object.fromEntries(formData)),
                data: formData,
                dataType: "JSON",
                //contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                //cache: false,
                processData: false,
                contentType: false,
                success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Bank Charge saved successfully!",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                    window.location = '@Url.Action("BankChargesList", "BankCharges")';
                                });
                            } else {
                                swal({
                                    text: response,
                                    icon: "warning",
                                    button: "OK",
                                })
                            }
                        },
                error: function () {
                            swal({
                                text: "An error occured while processing your request, please contact system support",
                                icon: "error",
                                button: "OK",
                        })
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
                });
            })

            // End of dynamic table
        });

        $('#Remarks').on("keyup", function () {
            var count = $('#Remarks').val().split('');
            var numChars = 500 - parseInt(count.length);
            $('#RemarkCount').text(parseInt(numChars) + " Characters Remaining");

            if (numChars == 0) {
                $("#Remarks").addClass("input-has-exceeded");
            } else {
                $("#Remarks").removeClass("input-has-exceeded");
            }
        });

        var previewFile = function (fileName) {
            //alert(fileName);
        }

    </script>
}