@model IFMIS.Areas.CashManagement.Models.AddStandingImprestRetirementVM

<div id="divLoader"></div>
<form method="post" id="form" class="form-horizontal" encytpe="multipart/form-data">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(a => a.StandingImprestId)
    @Html.HiddenFor(a => a.OperationalCurrency)

    <div class="form-group">
        @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            <div class='input-group'>
                @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                <span class="input-group-addon">
                    <span id="lblCurrency"></span>
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            (<span style="font-weight:bold;" id="RemarkCount">500 Characters Remaining</span>)
            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", maxlength = "500" })
            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
        </div>
    </div>
    <hr />
    <div id="divAttachments"></div>

    <fieldset class="scheduler-border">
        <legend class="scheduler-border"><b>Add Attachments</b></legend>
        <div class="form-group">
            @Html.Label("Attachment Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Editor("AttachmentName", new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            </div>

            @Html.Label("File Name", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-3">
                @Html.Editor("FileName", new { htmlAttributes = new { @class = "form-control", @type = "file" } })
            </div>
            <div class="col-md-offset-2">
                <button class="btn btn-info" type="button" style="float: left" id="btnAddAttachment">
                    <i class="fa fa-plus"></i>
                    Add
                </button>
            </div>
        </div>
    </fieldset>

</form>
<a href="~/Areas/CashManagement/Views/StandingImprests/_AddStandingImprestRetirement.cshtml">~/Areas/CashManagement/Views/StandingImprests/_AddStandingImprestRetirement.cshtml</a>
<!-- END MAIN CONTENT -->
<script>

        $(function () {
            $("#ApplyDate")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showOn: "both",
                buttonImage: '@Url.Content("~/Content/img/calendar.gif")',
                maxDate: "+0D"
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select Date",
                text: false
            })
            .addClass("btn btn-default")
            .wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });

            $("#lblCurrency").html('@Model.OperationalCurrency');

            $("#OperationalAmount").autoNumeric('init');

            // This for dynamic table. Don't know why on load but it works
            var attachments = [];

            $("#btnAddAttachment").click(function () {
                if ($("#AttachmentName").val() == "" || $("#FileName").val() == "") {
                    return false;
                }

                var attachmentName = $('#AttachmentName').val().trim();
                var fileName = $('#FileName').get(0).files[0];

                attachments.push({
                    AttachmentName: attachmentName,
                    FileName: fileName,
                });

                GenerateAttachmentsTable();
            });

            function GenerateAttachmentsTable() {
                    if (attachments.length > 0) {
                        var $table = $('<table class="table table-condensed table-stripped table-hover table-bordered"/>');
                        $table.append('<thead>' +
                            '<tr><th colspan="4">Attachments</th>' +
                            '<tr><th>#</th><th style="text-align: center">Attachment Name</th><th style="text-align: center">File Name</th><th style="text-align: center">Action</th></tr>' +
                            '</thead>');
                        var $tbody = $('<tbody/>');
                        var j = 0;
                        $.each(attachments, function (i, val) {
                            ++j;
                            var $row = $('<tr/>');
                            $row.append($('<td/>').html(j));
                            $row.append($('<td/>').html(val.AttachmentName));
                            $row.append($('<td/>').html('<a href="#" onclick=previewFile("'+ val.FileName +'")>Preview</a>'));
                            var $remove = $('<a href="#"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>');
                            $remove.click(function (e) {
                                e.preventDefault();
                                attachments.splice(i, 1);
                                GenerateAttachmentsTable();
                            });
                            $row.append($('<td/>').html($remove));
                            $tbody.append($row);
                        });
                        $table.append($tbody);
                        $('#divAttachments').html($table);
                        //Clear fields
                        $("#AttachmentName").val("");
                        $("#FileName").val("");
                    } else {
                        $('#divAttachments').html('');
                        $("#btnAddGlItem").attr("disabled", false);
                        $("#btnSave").attr("disabled", false);
                    }
            }

            $("#btnSave").on("click", function () {
            $("#btnSave").attr("disabled", true);
            $.validator.unobtrusive.parse("#form");
            if (!$("#form").valid()) {
                    $("#btnSave").attr("disabled", false);
                    return false;
                }

                if (attachments.length == 0) {
                    swal({
                         text: "Please attach atleast one document",
                         icon: "warning",
                         button: "OK",
                    })
                    $("#btnSave").attr("disabled", false);
                    return true;
                }

                $("#divLoader").show();

                var token = $("[name='__RequestVerificationToken']").val();

                var formData = new FormData();

                formData.append("__RequestVerificationToken", token);
                formData.append("StandingImprestId", $("#StandingImprestId").val());
                formData.append("ApplyDate", $('#ApplyDate').val());
                formData.append("OperationalAmount", $('#OperationalAmount').val());
                formData.append("OperationalCurrency", $('#OperationalCurrency').val());
                formData.append("Remarks", $('#Remarks').val());
                for (var i = 0; i < attachments.length; i++) {
                    formData.append("AddAttachmentVMs[" + i + "].AttachmentName", attachments[i].AttachmentName);
                    formData.append("AddAttachmentVMs[" + i + "].FileName", attachments[i].FileName);
                }

                var url = '@Url.Action("AddStandingImprestRetirement", "StandingImprests")';
                $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(Object.fromEntries(formData)),
                data: formData,
                dataType: "JSON",
                //contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                //cache: false,
                processData: false,
                contentType: false,
                success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Standing imprest retirement saved successfully!",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                    window.location = '@Url.Action("StandingImprestExpenses", "StandingImprests")';
                                });
                            } else {
                                swal({
                                    text: response,
                                    icon: "warning",
                                    button: "OK",
                                })
                            }
                        },
                error: function () {
                            swal({
                                text: "An error occured while processing your request, please contact system support",
                                icon: "error",
                                button: "OK",
                        })
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
                });
            })

            // End of dynamic table
        });

        $('#Remarks').on("keyup", function () {
            var count = $('#Remarks').val().split('');
            var numChars = 500 - parseInt(count.length);
            $('#RemarkCount').text(parseInt(numChars) + " Characters Remaining");

            if (numChars == 0) {
                $("#Remarks").addClass("input-has-exceeded");
            } else {
                $("#Remarks").removeClass("input-has-exceeded");
            }
        });

        var previewFile = function (fileName) {
            //alert(fileName);
        }

</script>
