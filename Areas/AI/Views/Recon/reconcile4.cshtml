@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<!-- Main Content -->
<div id="content" style="margin: 5px; margin-top: 30px">
    <section id="widget-grid">
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget" id="wid-id-0">
                    <header>
                        <span class="widget-icon"><i class="fa fa-edit"></i></span>
                    </header>
                    <div>
                        <div class="widget-body">

                            <!-- ✅ Reconcile Button, Account Selection & Timer -->
                            <div class="row" style="display: flex; align-items: center; justify-content: flex-start; gap: 15px; margin: 10px;">

                                <!-- ✅ Searchable Bank Account Dropdown -->
                                <select id="accountFilter" class="form-control select2" style="width: 50%;">
                                    <option value="">-- Select Bank Account --</option>
                                    @foreach (var item in ViewBag.InstitutionAccount)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>

                                <!-- ✅ Reconcile Button -->
                                <button class="btn btn-info" id="reconcileBtn" onclick="reconcileTransactions()">
                                    <span id="reconcileIcon">🔄</span> Reconcile Transactions
                                </button>

                                <!-- ✅ Search Box -->
                                <input type="text" id="customSearchBox" class="form-control" placeholder="🔍 Search transactions..." style="width: 300px;">

                                <!-- ✅ Filter Transactions -->
                                <select id="statusFilter" class="form-control" style="width: 200px;">
                                    <option value="All">All (Pending & Not Matched)</option>
                                    <option value="Pending">Pending</option>
                                    <option value="Not Matched">Not Matched</option>
                                </select>

                                <!-- ✅ Counter Timer -->
                                <div id="counterContainer" style="display:none;">
                                    <strong id="counterText">⏳ Running: 00:00...</strong>
                                </div>
                            </div>

                            <br />
                            <div id="status" class="status"></div>
                            <br />

                            <!-- 🔥 Two Side-by-Side Tables -->
                            <div class="row">
                                <div class="col-md-6">
                                    <h4>📒 Cashbook Transactions (<span id="totalCashbook">0</span> total)</h4>
                                    <table class="table table-striped table-bordered table-hover" id="cashbookTable">
                                        <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Amount</th>
                                                <th>Reference</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>

                                <div class="col-md-6">
                                    <h4>🏦 Statement Transactions (<span id="totalStatement">0</span> total)</h4>
                                    <table class="table table-striped table-bordered table-hover" id="statementTable">
                                        <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Amount</th>
                                                <th>Description</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>
                            </div>

                            <!-- ✅ Pagination with Total Records -->
                            <div id="paginationControls" style="margin-top: 10px; text-align: center;">
                                <button id="prevPage" class="btn btn-sm btn-secondary">⬅️ Previous</button>
                                <span id="pageInfo"></span>
                                <button id="nextPage" class="btn btn-sm btn-secondary">Next ➡️</button>
                            </div>

                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>

<!-- ✅ Add CSS for 🔄 Rotation Animation -->
<style>
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .spinning {
        display: inline-block;
        animation: spin 1s linear infinite;
    }
</style>

<script type="text/javascript">
    let counterInterval;
    let counterSeconds = 0;
    let currentPage = 1;
    let pageSize = 10;
    let totalPages = 1;
    let totalRecords = 0;
    let filterStatus = "All";
    let selectedAccount = "";

    $(document).ready(function () {

        // ✅ Initialize Select2 on the Bank Account Dropdown
        $("#accountFilter").select2({
            placeholder: "Search Bank Account...",
            allowClear: true
        });

        $("#accountFilter").change(function () {
            selectedAccount = $(this).val();
            if (selectedAccount) {
                loadPendingTransactions(1);
            }
        });

        $("#statusFilter").change(function () {
            filterStatus = $(this).val();
            if (selectedAccount) {
                loadPendingTransactions(1);
            }
        });

        $("#prevPage").click(function () {
            if (currentPage > 1) {
                currentPage--;
                loadPendingTransactions(currentPage);
            }
        });

        $("#nextPage").click(function () {
            if (currentPage < totalPages) {
                currentPage++;
                loadPendingTransactions(currentPage);
            }
        });
    });

    async function loadPendingTransactions(page) {
        if (!selectedAccount) {
            console.log("⚠️ No Account Selected!");
            return;
        }

        try {
            let url = `http://10.1.87.43:5001/pending-transactions?start=${(page - 1) * pageSize}&length=${pageSize}&bank_account=${selectedAccount}`;
            if (filterStatus !== "All") url += `&status=${filterStatus}`;

            console.log("🔄 Fetching Data: ", url);
            let response = await fetch(url);
            let data = await response.json();

            console.log("✅ API Response:", data);

            totalRecords = data.recordsTotal;
            totalPages = Math.ceil(totalRecords / pageSize);

            let cashbookBody = "";
            let statementBody = "";

            data.cashbook_data.forEach((tx, index) => {
                cashbookBody += `<tr>
                    <td>${index + 1}</td>
                    <td>${tx.OperationalAmount || "N/A"}</td>
                    <td>${tx.FundingRef || "N/A"}</td>
                    <td>${tx.OverallStatus || "N/A"}</td>
                </tr>`;
            });

            data.statement_data.forEach((tx, index) => {
                statementBody += `<tr>
                    <td>${index + 1}</td>
                    <td>${tx.TransactionAmount || "N/A"}</td>
                    <td>${tx.Description || "N/A"}</td>
                    <td>${tx.ReconciliationStatus || "N/A"}</td>
                </tr>`;
            });

            $("#cashbookTable tbody").html(cashbookBody);
            $("#statementTable tbody").html(statementBody);
            $("#pageInfo").html(`Page ${page} of ${totalPages} (${totalRecords} total transactions)`);

        } catch (error) {
            console.error("❌ Error fetching transactions:", error);
        }

 

    }
    async function reconcileTransactions() {
        if (!selectedAccount) {
            alert("Please select a bank account before reconciliation.");
            return;
        }

        let button = $("#reconcileBtn");
        let icon = $("#reconcileIcon");
        let counterContainer = $("#counterContainer");
        let counterText = $("#counterText");

        button.prop("disabled", true);
        icon.addClass("spinning");
        counterContainer.show();
        counterSeconds = 0;
        counterText.text(`⏳ Running: 00:00...`);
        startCounter(); // ✅ Start the counter

        try {
            let response = await fetch(`http://10.1.87.43:5001/reconcile?bank_account=${selectedAccount}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" }
            });

            let result = await response.json();
            console.log("✅ API Response:", result);

            $("#status").html(`✅ ${result.message} <br> Matched Transactions: ${result.matched_transactions}`);

            loadPendingTransactions(currentPage);
        } catch (error) {
            console.error("❌ Reconciliation Error:", error);
            $("#status").html("❌ Connection error. Please check your network or API server.");
        } finally {
            button.prop("disabled", false);
            icon.removeClass("spinning");
            clearInterval(counterInterval); // ✅ Stop counter
            setTimeout(() => { counterContainer.hide(); }, 2000);
        }
    }

    function startCounter() {
        clearInterval(counterInterval);
        counterSeconds = 0;
        counterInterval = setInterval(() => {
            let minutes = Math.floor(counterSeconds / 60);
            let seconds = counterSeconds % 60;
            $("#counterText").text(`⏳ Running: ${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`);
            counterSeconds++;
        }, 1000);
    }
</script>
