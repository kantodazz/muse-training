@model IFMIS.Areas.IFMISTZ.Models.CreateImprestRetirementVM

<div id="divLoader">
</div>
<div id="content">

    <div class="row">

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
        </div>
    </div>
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Update Imprest Retirement </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            <form class="form-horizontal" name="retirementForm" id="retirementForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ImprestId)
                                @Html.HiddenFor(model => model.TotalExpensedAmount)
                                @Html.HiddenFor(model => model.RequireDepositRefNo)
                                <fieldset>
                                    <legend><strong>Payee Details:</strong></legend>
                                    <div class="form-group">
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.PayeeName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                        @Html.LabelFor(model => model.ImprestNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-2">
                                            @Html.EditorFor(model => model.ImprestNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                            @Html.ValidationMessageFor(model => model.ImprestNo, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.IssuedAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-2">
                                            @Html.EditorFor(model => model.IssuedAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true, } })
                                            @Html.ValidationMessageFor(model => model.IssuedAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </fieldset>
                                <fieldset>
                                    <legend><strong>Retirement Details:</strong></legend>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ImprestRetirementType, "Retirement Type", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-8">
                                            @Html.DropDownListFor(model => model.ImprestRetirementType,
                                                     new SelectList(new List<SelectListItem> {
                                                     new SelectListItem { Text = "Full Retirement", Value = "Full Retirement"},
                                                     new SelectListItem { Text = "Partial Retirement", Value = "Partial Retirement"},
                                                     new SelectListItem { Text = "Cash Retirement", Value = "Cash Retirement"}}, "Value", "Text"), "Select Retirement Type", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ImprestRetirementType, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                    <div class="form-group">
                                        <div id="divDepositRef">
                                            @Html.LabelFor(model => model.DepositRef, "Receipt Reference", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.DepositRef, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.DepositRef, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div id="divCashReceiptAmount">
                                            @Html.LabelFor(model => model.CashReceiptAmount, "Cash Receipt Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.CashReceiptAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.CashReceiptAmount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div id="divCashReceiptBankAccount">
                                            @Html.LabelFor(model => model.CashReceiptBankAccount, "Cash Receipt Bank Account", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.CashReceiptBankAccount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.CashReceiptBankAccount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        @Html.LabelFor(model => model.RetirementDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.TextBoxFor(model => model.RetirementDate, new { @class = "form-control", @autocomplete = "off", Value = Model.RetirementDate.ToString("yyyy-MM-dd") })
                                            @Html.ValidationMessageFor(model => model.RetirementDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div id="divUnretiredAmount">
                                            @Html.LabelFor(model => model.UnretiredAmount, "Unretired Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.UnretiredAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.UnretiredAmount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                    <div id="divGlItems" style="display: none">
                                    </div>
                                </fieldset>
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-6">
                                        <a class="btn btn-info" style="margin-right:5px" onclick="window.history.back()">
                                            <i class="glyphicon glyphicon-arrow-left"></i> Back
                                        </a>
                                        <button type="button" class="btn btn-info" id="btnSave">
                                            <span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span> Save
                                            <img src="~/Content/img/loading.gif" id="saveLoader" style="display: none" />
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>

@section scripts{
    <script>
        $(function () {
            var issueAmount = toNumber($("#IssuedAmount").val())
            var retiredAmount = toNumber($("#TotalExpensedAmount").val())

            if (issueAmount == retiredAmount) {
                $("#ImprestRetirementType").val("Full Retirement");
            } else {
                $("#ImprestRetirementType").val("Partial Retirement");
            }

            $("#ImprestRetirementType").trigger('change');

            $(".input-type-no").autoNumeric("init");
            $("#RetirementDate")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showOn: "both",
                buttonImage: '@Url.Content("~/Content/img/calendar.gif")',
                maxDate: "+0D"
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select Date 1",
                text: false
            })
            .addClass("btn btn-default")
            .wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });

            var pendingImprestUrl = '@Url.Action("SearchPendingImprest", "ImprestRetirement")';

            var getReferenceNosUrl = '@Url.Action("GetReferenceNos", "ImprestRetirement")';

            $("#DepositRef").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Search Reference",
                allowClear: false,
                ajax: {
                    url: getReferenceNosUrl, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.refs }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $("#ImprestId").change(function () {
            $("#divLoader").show();
            var id = $(this).val();
            $("#ImprestRetirementType").val("");
            $("#DepositRef").select2('val', '');
            $("#CashReceiptAmount").val("");
            $("#CashReceiptBankAccount").val("");
            $("#RetirementDate").val("");
            $("#UnretiredAmount").val("");
            $("#divGlItems").hide();

            $.ajax({
                type: "get",
                url: '@Url.Action("GetRetirementDetails", "ImprestRetirement")',
                data: { id: id },
                success: function (response) {
                    $("#PayeeCode").val(response.PayeeCode);
                    $("#PayeeName").val(response.PayeeName);
                    $("#ImprestNo").val(response.ImprestNo);
                    $("#IssuedAmount").val(response.IssuedAmount);
                    $("#IssuedAmount").autoNumeric({ aNeg: "-" }).trigger("change");
                },
                error: function (response) {
                    swal(response);
                    return false;
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            });

        });

        @*$("#DepositRef").select2({
            minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
            width: 'resolve',   // to adjust proper width of select2 wrapped elements
            //placeholder: "Select Reference No",
            allowClear: false,
            initSelection: function (element, callback) {
                var id = $(element).val();
                if (id !== "") {
                    $.ajax('@Url.Action("GetReferenceNo", "ImprestRetirement")', {
                        data: { id: id },
                        dataType: "json"
                    }).done(function (data) {
                        callback(data);
                    });
                }
            },
            ajax: {
                url: '@Url.Action("GetReferenceNos", "ImprestRetirement")', // Controller - Select2Demo and Action -AccessRemoteData
                type: "GET",
                dataType: 'json',
                data: function (term) {
                    return {
                        term: term
                    };
                },
                results: function (data, page) {
                    return { results: data.refs }; // data.CountryList returning json data from Controlle
                }
            },
        });*@

        $("#ImprestRetirementType").on("change", function () {
            $("#divLoader").show();
            var id = $("#ImprestId").val();
            if (this.value == "Full Retirement") {
                $("#divCashReceiptBankAccount").hide();
                $("#divCashReceiptAmount").hide();
                $("#ExpenditureAmount").hide();
                $('#divDepositRef').hide();
                $('#divUnretiredAmount').hide();
                $('#RequireDepositRefNo').val(false);
            } else if (this.value == "Cash Retirement") {
                $("#divCashReceiptBankAccount").show();
                $("#divCashReceiptAmount").show();
                $("#ExpenditureAmount").show();
                $('#divDepositRef').show();
                $('#divUnretiredAmount').show();
                $('#RequireDepositRefNo').val(true);
            }
            else {
                $("#divCashReceiptBankAccount").show();
                $("#divCashReceiptAmount").show();
                $("#ExpenditureAmount").show();
                $('#divDepositRef').show();
                $('#divUnretiredAmount').show();
                $('#RequireDepositRefNo').val(true);
            }
            $.ajax({
                type: "get",
                url: '@Url.Action("GetGlItems", "ImprestRetirement")',
                data: { id: id },
                success: function (response) {
                    $("#divGlItems").show();
                    $("#divGlItems").html(response);
                    $("#tblExemptionItems").DataTable({
                        scrollX: true,
                        paging: false
                    });

                    if ($("#ImprestRetirementType").val() == "Full Retirement") {

                        var i = 1;
                        $("#tblExemptionItems tbody tr").each(function () {
                            issuedAmount = $(this).find('input[name="IssuedAmount' + i + '"]').val();
                            $(this).find('input[name="ExpenditureAmount' + i + '"]').val(issuedAmount);

                            i++;
                        })

                        $(".input-type-no").attr("disabled", true);

                    }
                    else if (($("#ImprestRetirementType").val() == "Cash Retirement")) {

                        $(".input-type-no").val(0);
                        $(".input-type-no").attr("disabled", true);
                    } else {
                        $(".input-type-no").attr("disabled", false)
                    }
                },
                error: function (response) {
                    swal(response);
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            });
        })

        $('#DepositRef').change(function () {
            var referenceNo = $('#DepositRef').val();

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetBankStatementDetail","ImprestRetirement")',
                data: { id: referenceNo },
                success: function (data, status, jqXHR) {
                    if (data.duplicate) {
                        swal({
                            text: "Reference number already exist",
                            icon: "error",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    }

                    if (data.success) {
                        $("#CashReceiptAmount").val(data.AmountDeposit);
                        $("#CashReceiptBankAccount").val(data.ReceivingBankAccountNo);


                        var issuedAmount = $("#IssuedAmount").val();
                        var cashReceiptAmount = $("#CashReceiptAmount").val();
                        var unretiredAmount = 0;

                        issuedAmount = issuedAmount.replace(/,/g, "");
                        cashReceiptAmount = cashReceiptAmount.replace(/,/g, "");

                        if (isNaN(cashReceiptAmount) || cashReceiptAmount == "" || cashReceiptAmount == null) {
                            cashReceiptAmount = "0";
                        }
                        if (isNaN(issuedAmount) || issuedAmount == "" || issuedAmount == null) {
                            issuedAmount = "0";
                        }

                        issuedAmount = parseFloat(issuedAmount);
                        cashReceiptAmount = parseFloat(cashReceiptAmount);
                        unretiredAmount = issuedAmount - cashReceiptAmount;

                        $("#UnretiredAmount").val(unretiredAmount);

                        ///check for over cash retirement(cash receipt is greater than issued)
                        //var unretiredAmount = $("#UnretiredAmount").val();
                        //if (cashReceiptAmount > issuedAmount) {
                        //    $("#UnretiredAmount").addClass("input-has-exceeded");
                        //    $("#btnSave").attr("disabled", true);
                        //    return false;
                        //} else {
                        //    $("#UnretiredAmount").removeClass("input-has-exceeded");
                        //    $("#btnSave").attr("disabled", false);
                        //}

                    }
                    $("#CashReceiptAmount").autoNumeric({ aNeg: "-" }).trigger("change");
                    $("#UnretiredAmount").autoNumeric({ aNeg: "-" }).trigger("change");
                },

            })
        });

        function ExpenditureAmountOnChange(i) {
            var issuedAmount = $("#IssuedAmount" + i).val();
            var expensedAmount = $("#ExpenditureAmount" + i).val();
            var cashAmount = $("#CashReceiptAmount").val();
            var unretiredAmount = $("#UnretiredAmount").val();

            issuedAmount = issuedAmount.replace(/,/g, "");
            expensedAmount = expensedAmount.replace(/,/g, "");
            cashAmount = cashAmount.replace(/,/g, "");
            unretiredAmount = unretiredAmount.replace(/,/g, "");


            if (isNaN(issuedAmount) || issuedAmount == "" || issuedAmount == null) {
                issuedAmount = "0";
            }
            if (isNaN(expensedAmount) || expensedAmount == "" || expensedAmount == null) {
                expensedAmount = "0";
            }
            if (isNaN(unretiredAmount) || unretiredAmount == "" || unretiredAmount == null) {
                unretiredAmount = "0";
            }

            issuedAmount = Number(parseFloat(issuedAmount).toFixed(2));
            expensedAmount = Number(parseFloat(expensedAmount).toFixed(2));
            cashAmount = Number(parseFloat(cashAmount).toFixed(2));
            unretiredAmount = Number(parseFloat(unretiredAmount).toFixed(2));

            if (expensedAmount > issuedAmount) {
                $("#ExpenditureAmount" + i).addClass("input-has-exceeded");
                $("#btnSave").attr("disabled", true);
                return false;
            } else {
                $("#ExpenditureAmount" + i).removeClass("input-has-exceeded");
                $("#btnSave").attr("disabled", false);
            }

            var j = 1;
            var totalExpensedAmount = 0;
            $("#tblExemptionItems  tbody  tr").each(function () {
                var expenditureAmount = $(this).find('input[name="ExpenditureAmount' + j + '"]').val();
                expenditureAmount = expenditureAmount.replace(/,/g, "");

                if (isNaN(expenditureAmount) || expenditureAmount == "" || expenditureAmount == null) {
                    expenditureAmount = "0";
                }
                totalExpensedAmount = parseFloat(totalExpensedAmount) + parseFloat(expenditureAmount);

                j++;
            });
            //if (totalExpensedAmount == unretiredAmount) {
            //    $("#btnSave").attr("disabled", false);
            //    return false;
            //} else {
            //    $("#ExpenditureAmount" + i).removeClass("input-has-exceeded");
            //    $("#btnSave").attr("disabled", true);
            //}
        }

        function CalculateTotalOnChange(i) {
            var unretiredAmount = $("#RequiredQuantity" + i).val();
            var expensedAmount = $("#RequiredQuantity" + i).val();
            var totalExpensedAmount = 0;

            expensedAmount = requiredQuantity.replace(/,/g, "");

            if (isNaN(unretiredAmount) || unretiredAmount == "" || unretiredAmount == null) {
                unretiredAmount = "0";
            }

            if (isNaN(expensedAmount) || expensedAmount == "" || expensedAmount == null) {
                expensedAmount = "0";
            }

            unretiredAmount = Number(parseFloat(requiredQuantity).toFixed(2));
            expensedAmount = Number(parseFloat(expensedAmount).toFixed(2));

            totalExpensedAmount += expensedAmount;

            if (unretiredAmount == totalExpensedAmount) {
                $("#btnSave").prop("disabled", false)
            } else {
                $("#btnSave").prop("disabled", true)
            }
        }

        $("#btnSave").on("click", function () {
            //debugger;
            $("#btnSave").prop("disabled", true);
            $("#divLoader").show();
            $.validator.unobtrusive.parse("#retirementForm");
            if (!$("#retirementForm").valid()) {
                $("#divLoader").hide();
                $("#btnSave").prop("disabled", false);
                return false;
            }

            var i = 1;
            var glItems = [];
            $("#tblExemptionItems tbody tr").each(function () {
                imprestDetailId = $(this).find('input[name="ImprestDetailId' + i + '"]').val();
                expenditureGlAccount = $(this).find('input[name="ExpenditureGlAccount' + i + '"]').val();
                expenditureGlAccountDesc = $(this).find('input[name="ExpenditureGlAccountDesc' + i + '"]').val();
                fundingRef = $(this).find('input[name="FundingRef' + i + '"]').val();
                issuedAmount = $(this).find('input[name="IssuedAmount' + i + '"]').val();
                expenditureAmount = $(this).find('input[name="ExpenditureAmount' + i + '"]').val() != "" ? $(this).find('input[name="ExpenditureAmount' + i + '"]').val() : 0;
                glItems.push({
                    ImprestDetailId: imprestDetailId,
                    ExpenditureGlAccount: expenditureGlAccount,
                    ExpenditureGlAccountDesc: expenditureGlAccountDesc,
                    FundingRef: fundingRef,
                    IssuedAmount: issuedAmount,
                    ExpenditureAmount: expenditureAmount,
                });
                i++;
            })

            if (glItems.length == 0) {
                $("#divLoader").hide();
                $("#btnSave").prop("disabled", false);
                swal("Please add retirement details to save a form");
                return false;
            }

            var formData = new FormData();

            //formData.append("PayeeName", $('#PayeeName').val());
            //formData.append("PayeeCode", $('#PayeeCode').val());
            formData.append("ImprestId", $('#ImprestId').val());
            formData.append("ImprestNo", $('#ImprestNo').val());
            formData.append("IssuedAmount", $('#IssuedAmount').val());
            formData.append("ImprestRetirementType", $('#ImprestRetirementType').val());
            formData.append("DepositRef", $('#DepositRef').val());
            if ($('#ImprestRetirementType').val() == "Partial Retirement" || $('#ImprestRetirementType').val() == "Cash Retirement") {
                formData.append("CashReceiptAmount", $('#CashReceiptAmount').val());
            }
            formData.append("CashReceiptBankAccount", $('#CashReceiptBankAccount').val());
            formData.append("RetirementDate", $('#RetirementDate').val());
            for (var i = 0; i < glItems.length; i++) {
                formData.append("RetirementGlItemVMs[" + i + "].ImprestDetailId", glItems[i].ImprestDetailId);
                formData.append("RetirementGlItemVMs[" + i + "].ExpenditureGlAccount", glItems[i].ExpenditureGlAccount);
                formData.append("RetirementGlItemVMs[" + i + "].ExpenditureGlAccountDesc", glItems[i].ExpenditureGlAccountDesc);
                formData.append("RetirementGlItemVMs[" + i + "].FundingRef", glItems[i].FundingRef);
                formData.append("RetirementGlItemVMs[" + i + "].IssuedAmount", glItems[i].IssuedAmount);
                formData.append("RetirementGlItemVMs[" + i + "].ExpenditureAmount", glItems[i].ExpenditureAmount);
            }

            var token = $("[name='__RequestVerificationToken']").val();
            var url = '@Url.Action("CreateImprestRetirement1", "ImprestRetirement")';
            $.ajax({
                url: url,
                type: "POST",
                processData: false,
                contentType: false,
                data: formData,
                success: function (response) {
                    //check if successfully save to database
                    if (response == "Success") {
                        swal("Saved Successfully!", { icon: 'success' }).then((e) => {
                            @*window.location = '@Url.Action("ImprestRetirementList", "ImprestRetirement")';*@
                            window.location = '@Url.Action("PendingImprestRetirement", "ImprestRetirement")';
                        });
                    }
                    else {
                        swal(response);
                    }
                },
                error: function () {
                    swal('Error. Please try again.');
                },
                complete: function () {
                    $("#divLoader").hide();
                    $("#btnSave").prop("disabled", false);
                }
            });
        });

    </script>
}

