@using IFMIS.Areas.IFMISTZ.Models
@model List<GfsCodeBatchRequestSummary>
@{
    ViewBag.Title = "Create Gfs Code";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .input[type="text"], select {
        border: 1px solid lightgray;
        width: 100%;
        height: 35px;
    }

    .textarea {
        border: 1px solid lightgray;
        width: 100%;
    }

    .input[type="text"]:focus {
        border: 1px solid lightblue;
    }

    th {
        text-align: left;
    }

    .dataTables_filter {
        margin-bottom: 15px;
    }

        .dataTables_filter input {
            padding: 5px 10px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

    .dataTables_length select {
        padding: 5px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    .dataTables_paginate .paginate_button {
        padding: 5px 10px;
        margin: 0 2px;
        border-radius: 4px;
        cursor: pointer;
    }

        .dataTables_paginate .paginate_button.current {
            background-color: #3276b1;
            color: white !important;
            border: 1px solid #3276b1;
        }

    .dataTables_info {
        padding: 10px 0;
    }

    .table-responsive {
        overflow-x: auto;
    }
</style>
<!-- widget grid -->
<div id="content" style="margin: 5px; padding-top: 50px">

    <section id="widget-grid" class="">
        <div class="row">

            <article class="col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2 style="color:black;">Pending Request GFS Code</h2>
                    </header>
                    <div>
                        <div class="widget-body">
                            <div class="table-responsive">
                                <table id="pendingRequests" class="table table-striped table-bordered table-hover" width="100%">
                                    <thead>
                                        <tr>
                                            <th>Reference No.</th>
                                            <th>Total Items</th>
                                            <th>Status</th>
                                            <th>Created By</th>
                                            <th>Created Date</th>
                                            <th style="width: 200px;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var summary in Model)
                                        {
                                        <tr>
                                            <td>@summary.BatchRefNo</td>
                                            <td>@summary.TotalNoGfsCodeReq</td>
                                            <td>
                                                @if (summary.Overallstatus == "Approved")
                                                {
                                                    <span class="badge badge-success">@summary.Overallstatus</span>
                                                }
                                                else if (summary.Overallstatus == "Rejected")
                                                {
                                                    <span class="badge badge-danger">@summary.Overallstatus</span>
                                                }
                                                else if (summary.Overallstatus == "Split")
                                                {
                                                    <span class="badge badge-warning">@summary.Overallstatus</span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-secondary">@summary.Overallstatus</span>
                                                }
                                            </td>
                                            <td>@summary.CreatedBy</td>
                                            <td>@summary.CreatedAt.ToString("dd-MM-yyyy")</td>
                                            <td>
                                                <div class="btn-group">
                                                    <a href="@Url.Action("GfsCodeBatchDetails", new { id = summary.BatchSummaryId })" class="btn btn-sm btn-primary">
                                                        <i class="fa fa-eye"></i> View
                                                    </a>
                                                    <a href="@Url.Action("GfscodeConversionHistory", new { batchSummaryId = summary.BatchSummaryId })" class="btn btn-sm btn-info">
                                                        <i class="fa fa-history"></i> History
                                                    </a>
                                                    @if (summary.Overallstatus == "Split")
                                                     {
                                                            <div class="btn-group">
                                                                <button type="button" class="btn btn-sm btn-warning dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                                    <i class="fa fa-filter"></i> Filter
                                                                </button>
                                                                <div class="dropdown-menu">
                                                                    <a class="dropdown-item" href="@Url.Action("PreviousGfsCodeStageView", new { batchSummaryId = summary.BatchSummaryId })">
                                                                        <i class="fa fa-times-circle text-danger"></i> View Rejected Items
                                                                    </a>
                                                                    <a class="dropdown-item" href="@Url.Action("NextGfsCodeStageView", new { batchSummaryId = summary.BatchSummaryId })">
                                                                        <i class="fa fa-check-circle text-success"></i> View Approved Items
                                                                    </a>
                                                                </div>
                                                            </div>
                                                     }
                                                </div>
                                            </td>
                                        </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>

@section pagespecific {
    <script type="text/javascript">
        if ('@TempData["Success"]' == 'Success') {
            swal("Successfully Saved", { icon: 'success'})
        } else if ('@TempData["Success"]' == 'No') {
            swal("Already Created!!", { icon: 'warning'})
                .then(Ok => {
                    window.location.href = '@Url.Action("GfsCodeSetupCreate", "GfscodeSetup")';
                });
        } else if ('@TempData["Success"]' == 'Exist'){
            swal("Chapter Number Already in Used!!", { icon: 'warning' })
                .then(Ok => {
                    window.location.href = '@Url.Action("GfsCodeSetupCreate", "GfscodeSetup")';
                });
        };

        $(document).ready(function () {
            // Initialize DataTables with enhanced features
            $('#pendingRequests').DataTable({
                "pageLength": 10,
                "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                "order": [[4, "desc"]], // Sort by created date by default
                "responsive": true,
                "stateSave": true,
                "language": {
                    "search": "<span class='fa fa-search'></span> _INPUT_",
                    "searchPlaceholder": "Search records...",
                    "lengthMenu": "_MENU_ records per page",
                    "info": "Showing _START_ to _END_ of _TOTAL_ records",
                    "infoEmpty": "No records available",
                    "infoFiltered": "(filtered from _MAX_ total records)",
                    "paginate": {
                        "first": "<i class='fa fa-angle-double-left'></i>",
                        "last": "<i class='fa fa-angle-double-right'></i>",
                        "next": "<i class='fa fa-angle-right'></i>",
                        "previous": "<i class='fa fa-angle-left'></i>"
                    }
                },
                "dom": "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
                       "<'row'<'col-sm-12'tr>>" +
                       "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                "initComplete": function(settings, json) {
                    // Add custom filter for status
                    var table = this;
                    var statusColumn = 2; // Status column index

                    // Create filter container
                    var filterContainer = $('<div class="status-filter mb-3 mt-2"></div>')
                        .insertBefore('#pendingRequests_wrapper .dataTables_filter');

                    // Add filter label
                    filterContainer.append('<span class="mr-2"><i class="fa fa-filter"></i> Filter by Status: </span>');

                    // Add filter buttons
                    var statusValues = {
                        'All': '',
                        'Approved': 'Approved',
                        'Rejected': 'Rejected',
                        'Split': 'Split',
                        'Requested': 'Requested'
                    };

                    var buttonClasses = {
                        'All': 'btn-outline-secondary',
                        'Approved': 'btn-outline-success',
                        'Rejected': 'btn-outline-danger',
                        'Split': 'btn-outline-warning',
                        'Requested': 'btn-outline-info'
                    };

                    $.each(statusValues, function(key, value) {
                        var btnClass = buttonClasses[key] || 'btn-outline-secondary';
                        var btn = $('<button class="btn btn-sm ' + btnClass + ' mr-1">' + key + '</button>')
                            .appendTo(filterContainer)
                            .on('click', function() {
                                // Remove active class from all buttons
                                filterContainer.find('button').removeClass('active');
                                // Add active class to clicked button
                                $(this).addClass('active');
                                // Apply filter
                                table.api().column(statusColumn).search(value).draw();
                            });

                        // Set "All" as active by default
                        if (key === 'All') {
                            btn.addClass('active');
                        }
                    });
                }
            });

            // Check/uncheck all checkboxes
            $("#checkAll").on("click", function() {
                $(".rowCheckbox").prop("checked", $(this).prop("checked"));
            });

            // Update "checkAll" state when individual checkboxes change
            $(document).on("change", ".rowCheckbox", function() {
                if ($(".rowCheckbox:checked").length == $(".rowCheckbox").length) {
                    $("#checkAll").prop("checked", true);
                } else {
                    $("#checkAll").prop("checked", false);
                }
            });

            // Execute action button click
            $("#executeAction").on("click", function() {
                var selectedAction = $("#approvalAction").val();
                if (!selectedAction) {
                    swal({
                        text: "Please select an action to perform.",
                        icon: "warning",
                        customClass: {
                            container: 'my-swal'
                        }
                    });
                    return;
                }

                // For individual approvals
                if (selectedAction === "approve") {
                    var selectedIds = [];
                    $(".rowCheckbox:checked").each(function() {
                        selectedIds.push($(this).val());
                    });

                    if (selectedIds.length === 0) {
                        swal({
                            text: "Please select at least one record to approve.",
                            icon: "warning",
                            customClass: {
                                container: 'my-swal'
                            }
                        });
                        return;
                    }

                    // Call the approval function
                    approveSelected(selectedIds);
                }
                // For batch approval
                else if (selectedAction === "approveBatch") {
                    approveBatch();
                }
            });

            // Function to approve selected records
            function approveSelected(ids) {
                swal({
                    title: "Are you sure?",
                    text: "You are about to approve the selected records.",
                    icon: "warning",
                    buttons: ["Cancel", "Approve"],
                    dangerMode: true,
                    customClass: {
                        container: 'my-swal'
                    }
                }).then((willApprove) => {
                    if (willApprove) {
                        $.ajax({
                            url: '@Url.Action("ApproveSelected", "GfscodeSetup")',
                            type: 'POST',
                            data: { ids: ids },
                            traditional: true,
                            success: function(response) {
                                if (response.success) {
                                    swal({
                                        text: "Selected records approved successfully!",
                                        icon: "success",
                                        customClass: {
                                            container: 'my-swal'
                                        }
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    swal({
                                        title: "Error",
                                        text: response.message,
                                        icon: "error",
                                        customClass: {
                                            container: 'my-swal'
                                        }
                                    });
                                }
                            },
                            error: function() {
                                swal({
                                    title: "Error",
                                    text: "An error occurred during the approval process.",
                                    icon: "error",
                                    customClass: {
                                        container: 'my-swal'
                                    }
                                });
                            }
                        });
                    }
                });
            }

            // Function to approve batch
            function approveBatch() {
                swal({
                    title: "Are you sure?",
                    text: "You are about to approve all records in the current batch.",
                    icon: "warning",
                    buttons: ["Cancel", "Approve"],
                    dangerMode: true,
                    customClass: {
                        container: 'my-swal'
                    }
                }).then((willApprove) => {
                    if (willApprove) {
                        $.ajax({
                            url: '@Url.Action("ApproveBatch", "GfscodeSetup")',
                            type: 'POST',
                            success: function(response) {
                                if (response.success) {
                                    swal({
                                        text: "Batch approved successfully!",
                                        icon: "success",
                                        customClass: {
                                            container: 'my-swal'
                                        }
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    swal({
                                        title: "Error",
                                        text: response.message,
                                        icon: "error",
                                        customClass: {
                                            container: 'my-swal'
                                        }
                                    });
                                }
                            },
                            error: function() {
                                swal({
                                    title: "Error",
                                    text: "An error occurred during the batch approval process.",
                                    icon: "error",
                                    customClass: {
                                        container: 'my-swal'
                                        }
                                });
                            }
                        });
                    }
                });
            }
        });
    </script>
}