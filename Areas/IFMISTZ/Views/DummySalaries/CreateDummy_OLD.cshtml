@model IFMIS.Areas.IFMISTZ.Models.CreateDummySalaryVM

<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

            <!-- PAGE HEADER -->
            <!--
            <i class="fa-fw fa fa-pencil-square-o"></i>
            Payments
            <span>
            >
            Bills
            </span>
            -->
            </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Salary Dummy  </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form action="CreateDummyPayment" method="post" class="form-horizontal" name="dummyPaymentForm" id="dummyPaymentForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @*@Html.HiddenFor(model => model.OperationalCurrency)
                                    @Html.HiddenFor(model => model.ReceivingBankBIC)
                                    @Html.HiddenFor(model => model.DrGlAccount)
                                    @Html.HiddenFor(model => model.DrGlAccountDesc)*@
                                @Html.HiddenFor(model => model.GlAccount)
                                @Html.HiddenFor(model => model.GlAccountDesc)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceNo, "Reference No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.NetAmount, "Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InstitutionAccount, "Institution Account", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @*@Html.DropDownList("InstitutionAccount", new SelectList(ViewBag.InstitutionAccount, "AccountName", "AccountName"), "---select---", new { @class = "form-control" })*@
                                        @Html.DropDownListFor(model => model.InstitutionAccount, ViewBag.InstitutionAccounts as SelectList, "Select Account", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.InstitutionAccount, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.PaymentCategory, "Payment Category", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownList("PaymentCategory",
                                                     new SelectList(new List<SelectListItem> {
                                                     new SelectListItem { Text = "Net Salay", Value = "Net Salary"},
                                                     new SelectListItem { Text = "At Source Deduction", Value = "At Source Deductions"},
                                                     new SelectListItem { Text = "Unpaid Salary", Value = "Unpaid Salary"},
                                                     new SelectListItem { Text = "RAS Transfer", Value = "RAS Transfer"}
                                                                        }, "Value", "Text"),
                                                     "Select Payment Category", new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplyDate, "", new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SubBudgetClass, "Sub Budget Class", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @*@Html.EditorFor(model => model.SubBudgetClass, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })*@
                                        <select id="SubBudgetClass" class="form-control">
                                            <option value="Select Sub Budget Class" selected="selected">Select Sub Budget Class</option>
                                            @foreach (var subBudgetClass in ViewBag.subBudgetClassList)
                                            {
                                                <option value='@subBudgetClass.SubBudgetClass'>
                                                    @subBudgetClass.SubBudgetClassSubBudgetClassDesc
                                                </option>
                                            }
                                        </select>

                                    </div>
                                </div>

                                <hr />

                                @*<b>GL Items</b>*@
                                <hr />
                                <div id="dummyPaymentDetailItems"></div>

                                <fieldset class="scheduler-border">

                                    <legend class="scheduler-border"><b>GL Items</b></legend>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.GlAccountCoaId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.GlAccountCoaId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.GlAccountCoaId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ExpensedAmount, "GL Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.ExpensedAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.ExpensedAmount, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnAddGlItem">
                                                <i class="fa fa-plus"></i>
                                                Add GL Item
                                            </button>
                                        </div>
                                    </div>
                                </fieldset>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("DummyList", "DummySalaries" )" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">
        $(function () {

            // This for dynamic table. Don't know why on load but it works
            var dummySalaryDetails = [];

            $("#btnAddGlItem").click(function () {
        
                if ($("#GlAccountCoaId").val() == "" || $("#ExpensedAmount").val() == "") {
                    return false;
                }

                var glAccountCoaId = $('#GlAccountCoaId').val().trim();
                var glAccount = $('#GlAccount').val();
                var glAccountDesc = $('#GlAccountDesc').val();
                var expensedAmount = $('#ExpensedAmount').val().trim();

                //Check balance before adding GLitem
                var url = '@Url.Action("CheckGlItemBalance", "DummySalaries")';
                $.ajax({
                    url: url,
                    type: "POST",
                    data: { glAccount: glAccount, expensedAmount: expensedAmount },
                    success: function (response) {
                        if (response == "Success") {
                            dummySalaryDetails.push({
                                GlAccountCoaId: glAccountCoaId,
                                GlAccount: glAccount,
                                GlAccountDesc: glAccountDesc,
                                ExpensedAmount: expensedAmount,
                            });

                            //Clear fields
                            $("#GlAccountCoaId").select2("val", "");
                            $("#ExpensedAmount").val("");

                            GeneratePaymentDetailsTable();
                        } else {
                            alert(response);
                        }
                    },
                    error: function () {
                        alert('Error. Please try again.');
                    }
                });

                //function for show added items in table
                function GeneratePaymentDetailsTable() {
                    
                    if (dummySalaryDetails.length > 0) {
                        var $table = $('<table class="table table-condensed table-stripped table-hover table-bordered"/>');
                        $table.append('<thead>' +
                            '<tr><th colspan="4">GL Items</th>' +
                            '<tr><th>#</th><th style="text-align: center">GL Account</th><th style="text-align: center">Gl Amount</th><th style="text-align: center">Action</th></tr>' +
                            '</thead>');
                        var $tbody = $('<tbody/>');
                        var totalAmount = 0;
                        var j = 0;
                        $.each(dummySalaryDetails, function (i, val) {
                            ++j;
                            //debugger
                            var expensedAmount = val.ExpensedAmount.replace(/,/g, "");
                            totalAmount = parseFloat(totalAmount) + parseFloat(expensedAmount);
                            var $row = $('<tr/>');
                            $row.append($('<td/>').html(j));
                            $row.append($('<td/>').html(val.GlAccount + ' - ' + val.GlAccountDesc));
                            $row.append($('<td style="text-align: right"/>').html(val.ExpensedAmount));
                            //$row.append($('<td style="text-align: center"/>').html('<a href="#"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>'));
                            var $remove = $('<a href="#">Remove</a>');
                            $remove.click(function (e) {
                                //debugger
                                e.preventDefault();
                                dummySalaryDetails.splice(i, 1);
                                GeneratePaymentDetailsTable();
                            });
                            $row.append($('<td/>').html($remove));
                            $tbody.append($row);
                        });
                        var $row1 = $('<tr/>');
                        $row1.append($('<td colspan="2" style="text-align: center"/>').html('<b>Total</b>'));
                        $row1.append($('<td id="totalAmount" style="text-align: right"/>').html(totalAmount));
                        $row1.append($('<td/>').html(''));
                        $tbody.append($row1);
                        $table.append($tbody);
                        $('#dummyPaymentDetailItems').html($table);
                        $('#totalAmount').autoNumeric('init');
                        var operationalAmount = $("#NetAmount").val().replace(/,/g, "") == "" ? 0 : parseFloat($("#NetAmount").val().replace(/,/g, ""));
                        if (operationalAmount == totalAmount) {
                            $("#btnSave").attr("disabled", false);
                            $("#btnAddGlItem").attr("disabled", true);
                        } else if (operationalAmount < totalAmount) {
                            $("#btnSave").attr("disabled", true);
                            $("#btnAddGlItem").attr("disabled", true);
                        } else {
                            $("#btnSave").attr("disabled", true);
                            $("#btnAddGlItem").attr("disabled", false);
                        }
                    } else {
                        $('#dummyPaymentDetailItems').html('');
                        $("#btnAddGlItem").attr("disabled", false);
                        $("#btnSave").attr("disabled", true);
                    }
                }
            });

            $("#btnSave").click(function () {
                debugger
                $('#btnSave').val('Please wait');

                if (!$("#dummyPaymentForm").valid()) {
                    return false;
                }

                var data = {
                    ReferenceNo: $('#ReferenceNo').val().trim(),
                    NetAmount: $('#NetAmount').val().trim(),
                    InstitutionAccount: $('#InstitutionAccount').val().trim(),
                    PaymentCategory: $('#PaymentCategory').val(),
                    Description: $('#Description').val().trim(),
                    ApplyDate: $('#ApplyDate').val(),
                    SubBudgetClass: $('#SubBudgetClass').val().trim(),
                    GlAccount: $('#GlAccount').val(),
                    GlAccountDesc: $('#GlAccountDesc').val(),
                    DummySalaryDetails: dummySalaryDetails
                }

                var url = '@Url.Action("CreateDummy", "DummySalaries")';
                $.ajax({
                    url: url,
                    type: "POST",
                    data: JSON.stringify(data),
                    dataType: "JSON",
                    contentType: "application/json",
                    success: function (response) {
                        //check is successfully save to database
                        if (response == "Success") {
                            //will send status from server side
                            swal('Dummy successfully saved.');
                            //clear form
                            dummysalaryDetails = [];

                            window.location = '@Url.Action("DummyList", "DummySalaries")';
                        }
                        else {
                            swal(response);
                        }
                    },
                    error: function () {
                        swal('Error. Please try again.');
                    }
                });
            });

            // End of dynamic table



            $('#ExpensedAmount').autoNumeric('init');


            $("#GlAccountCoaId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Search Gl Account',
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetCoa", "DummySalaries")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetCoas", "DummySalaries")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            id: $("#SubBudgetClass").val(),
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.coas }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });


        $('#GlAccountCoaId').on("change", function (e) {
            var glAccountId = $("#GlAccountCoaId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCoa")',
                data: { id: glAccountId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#GlAccount").val(data.GlAccount);
                        $("#GlAccountDesc").val(data.GlAccountDesc);
                    } else {
                        alert(data.response);
                    }
                },
                error: function () {
                    alert("Error on accessing GL details");
                }
            })
        });


        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }

        $('#ApplyDate').datepicker({
            dateFormat: 'yy-mm-dd',
            prevText: '<i class="fa fa-chevron-left"></i>',
            nextText: '<i class="fa fa-chevron-right"></i>',
            onSelect: function (selectedDate) {
                $('#ApplyDate').datepicker('option', 'minDate', selectedDate);
            }

        });
    </script>
}
