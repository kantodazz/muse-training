@model IFMIS.Areas.IFMISTZ.Models.CreateDummySalaryVM

<style>
    .search-btn {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 5px;
        padding-right: 10px;
    }

    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }

    .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }

    .search-icon {
        padding: 0.5rem;
    }

    .search-button {
        background: #538AC5;
        border: 0;
        color: white;
        padding: 8px;
        border-radius: 0;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        width: 205px;
    }

    input[type=text] {
        padding: 8px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .row-align {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-between;
    }
</style>
<!-- MAIN CONTENT -->

<div id="divLoader"></div>

<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

            <!-- PAGE HEADER -->
            <!--
            <i class="fa-fw fa fa-pencil-square-o"></i>
            Payments
            <span>
            >
            Bills
            </span>
            -->
            </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Dummy Salary </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form class="form-horizontal" name="dummyPaymentForm" id="dummyPaymentForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.SubBudgetClassDesc)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceNo, "Reference No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.DocumentNo, "Document No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.DocumentNo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.DocumentNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ApplyDate, "Apply Date", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.ApplyDate, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.NetAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        <div class='input-group'>
                                            @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @id = "total_voucher_amount", @class = "form-control", @onkeyup = "clearVochaDetailsTable()" } })
                                            <span class="input-group-addon">
                                                <span aria-hidden="true">TZS</span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.PaymentCategory, "Payment Category", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownList("PaymentCategory",
                                                     new SelectList(new List<SelectListItem> {
                                                     new SelectListItem { Text = "Net Salay", Value = "Net Salary"},
                                                     new SelectListItem { Text = "At Source Deduction", Value = "At Source Deductions"},
                                                     new SelectListItem { Text = "Unpaid Salary", Value = "Unpaid Salary"},
                                                     new SelectListItem { Text = "RAS Transfer", Value = "RAS Transfer"},
                                                     new SelectListItem { Text = "Other", Value = "Other"}
                                                                        }, "Value", "Text"),
                                                     "Select Payment Category", new { @class = "form-control" })
                                    </div>
                                    @Html.LabelFor(model => model.SubBudgetClass, "Sub Budget Class", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.SubBudgetClass, Model.SubBudgetClasses, "Select SBC", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.InstitutionAccount, "Account Number", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-8">
                                        @Html.DropDownListFor(model => model.InstitutionAccount, new SelectList(""), "Select Account Number", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.InstitutionAccount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-3">
                                        @*<a class="search-btn form-control" onclick="SearchGl()" href="#">*@
                                        <a class="search-btn form-control" onclick="getGlItems()" href="#">
                                            <i class="fa fa-search search-icon"></i>
                                            Search GL...
                                        </a>
                                    </div>
                                </div>

                                <hr />

                                <div style="padding-top:5px">
                                    <table id="dt_voucher_detail" class="table table-striped table-bordered
                                       table-hover table-condensed" width="100%"></table>
                                    <div style="padding-bottom:10px" id="infoPanel">
                                        <div class="info-box">No GL Items Selected</div>
                                    </div>
                                </div>
                                <!-- end widget content -->
                                <div style="float:right;padding-bottom:10px">
                                    <strong>TOTAL AMOUNT (<strong class="currency">TZS</strong>): </strong>
                                    <strong id="total_amount">0.00</strong>
                                </div>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="form_submision">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingDummySalaries", "DummySalaries" )" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!----------- Search GL Items ----------------->
<div class="modal fade" id="divModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">
            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Gl Item</h3>
            </div>
            <div class="modal-body">
                <table>
                    <tr>
                        <td style="padding:5px">Total Dummy Amount</td>
                        <td style="padding:5px">
                            <input type="text" disabled id="total_voucher_amount2">
                        </td>

                        <td style="padding:5px">Total Line Amount</td>
                        <td style="padding:5px">
                            <input value="0" type="text" disabled id="total_line_amount">
                        </td>

                        <td style="padding:5px">Difference</td>
                        <td style="padding:5px">
                            <input value="0" type="text" disabled id="difference" style="width:250px">
                        </td>
                    </tr>
                </table>
                <div>
                    <div class="row-align" style="padding-top:1%;padding-bottom:1%">
                        <div>
                            Currency: <strong class="currency"></strong>
                        </div>
                        <div class="col-md-6">
                            <div class="search-container submit-btn" style="float:right">
                                <i class="fa fa-search search-icon"></i>
                                <input type="search" name="search" placeholder="Search..." id="searchbox2">
                            </div>
                        </div>
                    </div>
                    <table id="dt_search_gl_item" class="table table-striped table-bordered table-hover table-condensed" width="100%">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Expenditure Line Item</th>
                                <th>Item Description</th>
                                <th>Fund Balance</th>
                                <th>Funding Reference</th>
                                <th>Expensed Amount</th>
                            </tr>
                        </thead>
                    </table>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info" id="btn_save_gl_items">
                        <i class="fa fa-save"></i>Save
                    </button>
                    <button class="btn btn-info" data-dismiss="modal">
                        <i class="fa  fa-times"></i>Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">
        let dummyPaymentDetails = [];
        $(function () {
            $('#ExpensedAmount').autoNumeric('init');

            $("#ApplyDate")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showOn: "both",
                buttonImage: '@Url.Content("~/Content/img/calendar.gif")',
                maxDate: "+0D"
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select Date",
                text: false
            })
            .addClass("btn btn-default")
            .wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });
        });

        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }

        //----POP UPPPPP START
        $(document).ready(function () {
            $("#dt_search_gl_item_wrapper .dt-toolbar").remove();
            $("#dt_search_payee_wrapper .dt-toolbar").remove();
            $("#dt_voucher_detail_wrapper .dt-toolbar").remove();
            $("#dt_voucher_detail_wrapper .dt-toolbar-footer").remove();
            $("#errorVerification").css({ 'display': 'none' });
        });


        $(function () {
            $('#RetirementDate').val(new Date().toDateInputValue());
        });

        // ============= SHOW PAYEE===============
        var dt_selected_payee = $('#dt_selected_payee').dataTable({
            "data": [],
            "columnDefs": [{
                "targets": [0, 1],
                "visible": false
            }],
            "columns": [
                { title: "Payee DetailId" },
                { title: "Payee BIC" },
                { title: "Payee Name" },
                { title: "Payee Code" },
                { title: "Bank Name" },
                { title: "Payee Type" },
                { title: "Bank Account No" },
                { title: "Address" }
            ]
        });


        // ============= SEARCH PAYEEE ===========

        Date.prototype.toDateInputValue = (function () {
            var local = new Date(this);
            local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
            return local.toJSON().slice(0, 10);
        });

        $(function () {
            $('#RetirementDate').val(new Date().toDateInputValue());
        });

        var dt_search_payee = $('#dt_search_payee').dataTable({
            "aoColumnDefs": [{ "bVisible": false, "aTargets": [1, 2] }],
        });

        $("#searchbox").on("keyup search input paste cut", function () {
            if (!this.value) {
                dt_search_payee.fnClearTable();
            } else {
                searchPayeeTableUpdate(this.value);
            }
        });

        function searchPayeeTableUpdate(search) {
            var url = '@Url.Action("GetPayee", "PaymentVoucher")';
            $.ajax({
                type: "get",
                url: url + "/?search=" + search + "",
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    dt_search_payee.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dt_search_payee.fnAddData([i + 1,
                           data[i]["PayeeDetailId"],
                           data[i]["BIC"],
                           data[i]["AccountName"],
                           data[i]["PayeeCode"],
                           data[i]["BankName"],
                           data[i]["Accountnumber"],
                           data[i]["PayeeType"],
                           data[i]["Address1"],
                           '<a href="#" onclick="payeeClicked(' + i + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                        ]);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        var isValidPayee = false;
        function payeeClicked(rowId) {
            var data = dt_search_payee.DataTable().rows().data();
            var row = data[rowId];
            dt_selected_payee.fnClearTable();
            //$("#PayeeName").val(row[3]);
            $("#PayeeName").val("Verifying...");
            dt_selected_payee.fnAddData([row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8]]);
            $("#payeeModal").modal("hide");
            var url = '@Url.Action("CheckPayeeRetirementStatus", "Imprest")';

            // CHECK IF PAYEE HAS AN EXPIRED UNRETIRED IMPREST
            var checkPayee = function (payeeCode) {
                $.ajax({
                    type: "post",
                    url: url,
                    data: { "payeeCode": payeeCode },
                    contenttype: "application/json; charset=utf-8",
                    datatype: "json",
                    success: function (response) {
                        switch (response) {
                            case "Valid":
                                isValidPayee = true;
                                $("#errorVerification").css({ 'display': 'none' });
                                $("#verificationIcons")
                                    .replaceWith('<i class="glyphicon glyphicon-ok" style="color:green" id="verificationIcons"></i>');
                                break;
                            case "Invalid":
                                isValidPayee = false;
                                $("#errorVerification").css({ 'display': 'block' });
                                $("#verificationIcons")
                                .replaceWith('<i class="glyphicon glyphicon-remove" style="color:red" id="verificationIcons"></i>');
                                break;
                            default:
                                isValidPayee = false;
                                swal(response)
                        }
                        $("#PayeeName").val(row[3]);
                    },
                    failure: function (error) {
                        swal(error);
                    }
                });
            }
            checkPayee(row[4]);
        }
        // =========== END SEARCH PAYEE ====================

        // =========== START VOUCHER DETAILS ===============
        var dt_voucher_detail = $('#dt_voucher_detail').dataTable({
            "data": [],
            "columns": [
                { title: "Expenditure Line Item" },
                { title: "Item Description" },
                { title: "Funding Reference" },
                { title: "Expense Amount" }
            ]
        });

        // =========== END VOUCHER DETAILS ====================

        ///========== SEARCH GL =====
        var dt_search_gl_item = $('#dt_search_gl_item').dataTable();

        $("#searchbox2").on("keyup search input paste cut", function () {
            dt_search_gl_item.DataTable().search(this.value).draw();
        });
        var SubBudgetClassOld = $("#SubBudgetClass").val();

        $("#SubBudgetClass").change(function () {

            var _data = dt_voucher_detail.DataTable().rows().data();
            if (_data.length > 0) {
                confirmSubBudgetClassChange(SubBudgetClassOld, $(this).val());
            } else {
                updateSearchGITable($(this).val());
            }
            SubBudgetClassOld = $(this).val();
        });

        function updateSearchGITable(subBudgetClassList) {
            subBudgetClassList = subBudgetClassList.split(";");
            var subBudgetClass = subBudgetClassList[0].trim();
            var applyDate = $("#ApplyDate").val();
            var url = '@Url.Action("GetFundbalance", "DummySalaries")';
            var fundBalanceParams = { "applyDate": applyDate, "subBudgetClass": subBudgetClass };

            $.ajax({
                type: "post",
                url: url,
                data: fundBalanceParams,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    //=== UPDATE SEARCH GI TABLE ====
                    data = response.data;
                    dt_search_gl_item.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dt_search_gl_item.fnAddData([i + 1,
                            data[i]["GlAccount"].split("|").join("-"),
                            data[i]["GlAccountDesc"],
                            data[i]["FundBalance"],
                            data[i]["FundingRefNo"],
                            '<amount-input placeholder="Amount" id="Id-' + i + '" onkeyup="amountChanged(' + i + ')" />'
                        ]);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        };

        var TotalAmountOld = $("#total_voucher_amount").val();
        function clearVochaDetailsTable() {
            var _data = dt_voucher_detail.DataTable().rows().data();

            if (_data.length > 0) {
                confirmTotalAmountChange(TotalAmountOld, $("#total_voucher_amount").val());
            }
            TotalAmountOld = $("#total_voucher_amount").val();
        };

        function resetVochaDetailsTable() {
            $("#total_amount").text("0.00");
            dt_voucher_detail.fnClearTable();
        };

        function SearchGl() {
            $('#glItemsModal').modal('show');
            //$('#total_voucher_amount2').val($("#total_voucher_amount").val());
            $('#total_voucher_amount2').val($("#total_voucher_amount").val().toLocaleString());
            computeTotalAmount();
        };
        /////// ==== END OF SEARCH GL ==============

        //==== START OF ADD GL Items to Voucher Details ======
        function remove(array, val) {
            var found = array.indexOf(val);
            while (found !== -1) {
                array.splice(found, 1);
                found = array.indexOf(val);
            }
        };

        var form_data_status = [];
        var all_amounts = {};
        function amountChanged(i) {
            var data = dt_search_gl_item.DataTable().rows().data();
            var row = data.rows(i).data()[0]
            var original_amount = parseFloat(row[3]);
            var entered_amount = parseFloat($("#_Id-" + i).val().split(",").join(""));
            all_amounts["Id-" + i] = $("#_Id-" + i).val().split(",").join("");
            var balance = original_amount - entered_amount;

            if (balance < 0) {
                form_data_status.push(i);
                $("#_Id-" + i).css({ 'color': 'red' });
            } else {
                $("#_Id-" + i).css({ 'color': 'black' });
                remove(form_data_status, i);
                computeTotalAmount();
            }

        };

        function computeTotalAmount() {
            var total_amount = 0;
            var difference = 0;
            var amount = "";
            var data = dt_search_gl_item.DataTable().rows().data();
            var obj = [];

            for (var i = 0; i < data.length; i++) {
                var amount = all_amounts["Id-" + i];

                if (amount == undefined) {
                    amount = "";
                }
                if (amount.trim()) {
                    total_amount = parseFloat(total_amount) + parseFloat(amount);
                }
            }
            try {
                difference = parseFloat($("#total_voucher_amount").val().toFixed(2)) - parseFloat(total_amount).toFixed(2);
                $('#difference').val(difference.toLocaleString());
                if (difference < 0) {
                    $("#difference").css({ 'color': 'red' });
                } else {
                    $("#difference").css({ 'color': 'black' });
                }
            } catch (e) { }
            $("#total_line_amount").val(total_amount.toLocaleString());
        }

        $("#btn_save_gl_items").click(function () {
            var total_amount = 0;
            var difference = 0;
            var data = dt_search_gl_item.DataTable().rows().data();
            if (form_data_status.length == 0) {
                var obj = [];
                dt_voucher_detail.fnClearTable();
                $("#total_amount").text("0.00");
                for (var i = 0; i < data.length; i++) {

                    var amount = all_amounts["Id-" + i];
                    if (amount == undefined) {
                        amount = "";
                    }
                    if (amount.trim()) {
                        var row = data.rows(i).data()[0];
                        if (parseFloat(amount) > 0) {
                            dt_voucher_detail.fnAddData([row[1], row[2], row[4], amount]);
                        }
                        total_amount = parseFloat(total_amount) + parseFloat(amount);
                        $("#total_amount").text(total_amount);
                    }
                }

                difference = parseFloat($("#total_voucher_amount").val().toFixed(2)) - parseFloat(total_amount).toFixed(2);
                if (difference < 0) {
                    swal("Difference Cannot be negative..");
                    dt_voucher_detail.fnClearTable();
                } else {
                    $('#glItemsModal').modal('hide');

                }
            } else {
                swal("Please Fill all Imprest Details....");
            }
            toggleTableInfo();
        });

        toggleTableInfo();
        function toggleTableInfo() {
            var data = dt_voucher_detail.DataTable().rows().data();
            if (data.length > 0) {
                $("#dt_voucher_detail").toggle(true);
                $("#infoPanel").toggle(false);
            } else {
                $("#dt_voucher_detail").toggle(false);
                $("#infoPanel").toggle(true);
            }
        }
        //==== END OF ADD GL Items to Voucher Details ======


        // =========== FORM SUBMISSION ==================
        $("#saveLoader").toggle(false);
        $("#form_submision").click(function () {
            $.validator.unobtrusive.parse("#dummyPaymentForm");
            if (!$("#dummyPaymentForm").valid()) {
                return false;
            }

            if ($("#difference").val().trim() != "0") {
                swal("Difference Must be Zero.");
                return false;
            }

            var data = dt_selected_payee.DataTable().rows().data();
            var row = data.rows(0).data()[0];
            var subBudgetClassList = $("#SubBudgetClass").val().split(";");
            var subBudgetClass = subBudgetClassList[0].trim();
            //var exchangeRate = subBudgetClassList[2].trim();
            //var baseCurrencyCode = subBudgetClassList[3].trim();
            //var operationalCurrencyCode = subBudgetClassList[1].trim();
            var baseAmount = parseFloat($("#total_voucher_amount").val());

            var voucherDetails = []
            var voucherDetailsData = dt_voucher_detail.DataTable().rows().data();

            for (var i = 0; i < voucherDetailsData.length; i++) {
                var _row = voucherDetailsData.rows(i).data()[0];
                var baseAmountDetail = parseFloat(_row[3]);
                if (baseAmountDetail > 0) {
                    voucherDetails.push({
                        "DrGlAccount": _row[0].split("-").join("|"),
                        "DrGlAccountDesc": _row[1],
                        "FundingRef": _row[2],
                        "ExpensedAmount": _row[3],
                    })
                }
            }

            var token = $("[name='__RequestVerificationToken']").val();
            var form_data = {
                "__RequestVerificationToken": token,
                "Remarks": $("#Remarks").val(),
                "ReferenceNo": $("#ReferenceNo").val(),
                "DocumentNo": $("#DocumentNo").val(),
                "PaymentCategory": $("#PaymentCategory").val(),
                "InstitutionAccount": $("#InstitutionAccount").val(),
                "SubBudgetClass": $("#SubBudgetClass").val(),
                "SubBudgetClassDesc": $("#SubBudgetClassDesc").val(),
                "NetAmount": $("#total_voucher_amount2").val().split(",").join(""),
                //"BaseAmount": baseAmount,
                //"ExchangeRate": exchangeRate,
                //"OperationalCurrency": operationalCurrencyCode,
                //"BaseCurrencyCode": baseCurrencyCode,
                "ApplyDate": $("#ApplyDate").val(),
                "DummySalaryDetails": voucherDetails
            }

            if (voucherDetails.length == 0) {
                swal("No GL Items Selected")

                return false;
            }

            var url = '@Url.Action("CreateDummySalary", "DummySalaries")';
            var urlList = '@Url.Action("DummyList", "DummySalaries")';
            $("#form_submision").prop('disabled', true);
            $("#saveLoader").toggle(true);
            $.ajax({
                type: "post",
                url: url,
                data: form_data,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    $("#form_submision").prop('disabled', false);
                    $("#saveLoader").toggle(false);
                    if (response == "Success") {
                        swal("Saved Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.href = urlList;
                            });
                    }
                    else {
                        swal({
                            text: response,
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function (error) {
                    swal({
                        text: "Error. Please try again..",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $("#form_submision").prop('disabled', false);
                    $("#saveLoader").toggle(false);
                }
            });
        });

        function voucherSummaryFormValidation() {
            $("#SubBudgetClass_1").attr("style", "color: white;");

            var isNotValid = validateInputsParameters([
                "#Description",
                "#total_voucher_amount",
                "#ApplyDate",
            ]);

            if (isNotValid) {
                $(isNotValid + "_1").attr("style", "color: red;");
                return false
            }


            if ($("#SubBudgetClass").val().trim() == "Please choose sub budget class") {
                $("#SubBudgetClass_1").attr("style", "color: red;");
                return false
            }

            return true
        };

        function validateInputsParameters(parameterList) {
            var resetStyle = function (parameterList) {
                for (var i = 0; i < parameterList.length; i++) {
                    $(parameterList[i] + "_1").attr("style", "color: white;");
                }
            }

            resetStyle(parameterList);
            for (var i = 0; i < parameterList.length; i++) {
                if (!$(parameterList[i]).val()) {
                    return parameterList[i];
                }
            }
            return null;
        };

        function confirmTotalAmountChange(oldVal, newVal) {
            swal({
                title: 'Change Total Amount?',
                text: "All the GL Items will be Cleared",
                buttons: [
                  'Cancel',
                  'Proceed'
                ],
            }).then(function (isConfirmed) {
                if (isConfirmed) {
                    $("#total_voucher_amount").val(newVal.toLocaleString());
                    dt_voucher_detail.fnClearTable();
                    $("#total_amount").load(location.href + " #total_amount");
                    $("#total_line_amount").val(0);

                    all_amounts = {};
                    updateSearchGITable($("#SubBudgetClass").val());
                    computeTotalAmount();

                    swal({
                        title: 'Success',
                        icon: 'success'
                    });
                } else {
                    $("#total_voucher_amount").val(oldVal.toLocaleString());
                    TotalAmountOld = oldVal;
                    swal("Cancelled", "No change was made");
                }
            });

        };

        function confirmSubBudgetClassChange(oldVal, newVal) {
            swal({
                title: 'Change Sub Budget Class?',
                text: "All the GL Items will be Cleared",
                buttons: [
                  'Cancel',
                  'Proceed'
                ],
            }).then(function (isConfirmed) {
                if (isConfirmed) {
                    dt_voucher_detail.fnClearTable();
                    $("#total_amount").load(location.href + " #total_amount");
                    $("#total_line_amount").val(0);
                    all_amounts = {};
                    updateSearchGITable(newVal);
                    computeTotalAmount();
                    swal({
                        title: 'Success',
                        icon: 'success'
                    });
                } else {
                    $("#SubBudgetClass").val(oldVal).prop('selected', true);
                    SubBudgetClassOld = $("#SubBudgetClass").val();
                    swal("Cancelled", "No change was made");
                }
            });

        };

        //========== INPUT THOUSAND SEPARATOR ==================

        $("#total_voucher_amount").on("keyup input paste", function () {
            // $("#total_voucher_amount").val(inputThousandSeparator(this.value))
        });

        var OldVal = 0
        function inputThousandSeparator(NewVal) {
            if (NewVal) {
                try {
                    NewVal = parseFloat(NewVal.split(",").join(""))
                    if (typeof NewVal == 'number' && !Number.isNaN(NewVal)) {
                        OldVal = NewVal;
                        return NewVal.toLocaleString()
                    } else {
                        return OldVal
                    }
                } catch (e) {
                    console.log(e)
                }
            }
        };

        $("#Remarks").on("keyup", function (e) {
            $("#maxchars_c").text(250 - this.value.length)

            if (this.value.length > 250) {
                swal("Maximum Characters reached!");
            }
        });

        $("#DocumentNo").select2({
            minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
            width: 'resolve',   // to adjust proper width of select2 wrapped elements
            placeholder: "Search Document No",
            allowClear: false,
            initSelection: function (element, callback) {
                var id = $(element).val();
                if (id !== "") {
                    $.ajax('@Url.Action("GetReferenceNo", "DummySalaries")', {
                        data: { id: id },
                        dataType: "json"
                    }).done(function (data) {
                        callback(data);
                    });
                }
            },
            ajax: {
                url: '@Url.Action("GetReferenceNos", "DummySalaries")', // Controller - Select2Demo and Action -AccessRemoteData
                type: "GET",
                dataType: 'json',
                data: function (term) {
                    return {
                        term: term
                    };
                },
                results: function (data, page) {
                    return { results: data.refs }; // data.CountryList returning json data from Controlle
                }
            },
        });

        $("#SubBudgetClass").change(function () {
            $("#divLoader").show();

            var id = $(this).val();

            $.ajax({
                type: "get",
                url: '@Url.Action("GetInstitutionAccountBySbc", "InstitutionAccounts")',
                data: { sbc: id },
                success: function (response) {
                    $("#SubBudgetClassDesc").val(response.SubBudgetClassDesc);
                    $("#InstitutionAccount").html('');
                    $("#InstitutionAccount").append('<option value="">Select Account Number</option');
                    $.each(response.Accounts, function (i, account) {
                        $("#InstitutionAccount").append('<option value="'
                            + account.AccountNumber + '">'
                            + account.AccountnumberAccountName + '</option');
                    })
                },
                error: function (response) {
                    swal({
                        text: "An error occured while processing your request, please contact system support",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            });
        });

        var getGlItems = function () {
            debugger;
            alert('hapa');
            $("#divLoader").show();
            var sbc = $("#SubBudgetClassCode").val();
            var totalAmount = $("#OperationalAmount").val();
            var applyDate = $("#ApplyDate").val();
            var isSpecialDummyPayment = $("#IsSpecialDummyPayment").prop("checked"); // Boolean true
            var paymentCategory = $("#PaymentCategory").val();
            var url = '@Url.Action("GetGlItems", "DummySalaries")';

            $("#divModalBody").load(url, { sbc: sbc, totalAmount: totalAmount, applyDate: applyDate, dummyPaymentDetails: dummyPaymentDetails, paymentCategory: paymentCategory, isSpecialDummyPayment: isSpecialDummyPayment }, function (responseText, statusText, jqXHR) {
                $("#tblDummyPaymentDetails").DataTable();
                $("#divModal").modal("show");
                $("#divLoader").hide();
            });
        }

    </script>
}
