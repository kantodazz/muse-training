@model IFMIS.Areas.IFMISTZ.Models.CreateWorkingCapitalVM
<div id="divLoader"></div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Working Capital </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form name="createWorkingCapitalForm" id="createWorkingCapitalForm">

                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">

                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ActivityId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.ActivityId, Model.ActivityCodeList, "Select Activity", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.ActivityId, "", new { @class = "text-danger" })

                                        </div>
                                        @Html.LabelFor(model => model.ActivityCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ActivityCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ActivityCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ActivityName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ActivityName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ActivityFooter, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.ActivityFooter, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ActivityFooter, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ActivityFooter, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SubActivityId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.SubActivityId, Model.SubActivityCodeList, "Select Sub Activity", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.SubActivityId, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.SubActivityCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.SubActivityCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.SubActivityCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SubActivityName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.SubActivityName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.SubActivityName, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.SubActivityFooter, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.SubActivityFooter, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.SubActivityFooter, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="form-group">
                                        @Html.LabelFor(model => model.NoteID, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.NoteID, Model.NoteNoList, "Select Notes", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.NoteID, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.NoteNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.NoteNo, new { htmlAttributes = new { @class = "select2 form-control" } })
                                            @Html.ValidationMessageFor(model => model.NoteNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.ReportCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.ReportCode, Model.ReportCodeList, "Select Report Code", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.ReportCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PositionNoteID, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.PositionNoteID, Model.PositionNoteNoList, "Select Position Notes", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.PositionNoteID, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.PositionNoteNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.PositionNoteNo, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.PositionNoteNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PositionItemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.PositionItemDescription, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.PositionItemDescription, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.PositionSubActivityCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.PositionSubActivityCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.PositionSubActivityCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ItemStart, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ItemStart, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ItemStart, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.ItemEnd, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ItemEnd, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ItemEnd, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CFR_GroupCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            
                                            @Html.DropDownListFor(model => model.CFR_GroupCode, Model.CFRGroupList, "Select ", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.CFR_GroupCode, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.CFR_GroupName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CFR_GroupName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CFR_GroupName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CF_x_factor, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.CF_x_factor, Model.CFRFactorList, "Select Notes", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.CF_x_factor, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.CFR_x_Factor, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.CFR_x_Factor, Model.CFRFactorList, "Select Notes", new { @class = "select2 form-control" })
                                        @Html.ValidationMessageFor(model => model.CFR_x_Factor, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @*@Html.LabelFor(model => model.PositionNoteNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.PositionNoteNo, Model.NoteNoList, "Select", new { @class = "select2 form-control" })
                                        @Html.ValidationMessageFor(model => model.PositionNoteNo, "", new { @class = "text-danger" })
                                    </div>*@

                                    <div class="form-actions">
                                        <div class="row">
                                            <div class="col-md-offset-2 col-md-8">
                                                <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                    <i class="fa fa-save"></i>
                                                    Save
                                                </button>
                                                <a href="@Url.Action("PendingWorkingCapital","WorkingCapital")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                    <i class="fa fa-arrow-left"></i>
                                                    Back
                                                </a>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section pagespecific{
    <script>

        $("#btnSave").click(function () {

            debugger

            $('#btnSave').prop("disabled", true);
            $("#divLoader").show();
            if (!$("#createWorkingCapitalForm").valid()) {
                $('#btnSave').prop("disabled", false);
                $("#divLoader").hide();
                return false;
            }

            var token = $("[name='__RequestVerificationToken']").val();
            var data = {
                __RequestVerificationToken: token,
                ActivityId: $('#ActivityId').val(),
                ActivityCode: $('#ActivityCode').val(),
                ActivityName: $('#ActivityName').val(),
                ActivityFooter: $('#ActivityFooter').val(),
                SubActivityCode: $('#SubActivityCode').val(),
                SubActivityName: $('#SubActivityName').val(),
                SubActivityFooter: $('#SubActivityFooter').val(),
                ItemDescription: $('#ItemDescription').val(),
                NoteID: $('#NoteID').val(),
                NoteNo: $('#NoteNo').val(),
                PositionSubActivityCode: $('#PositionSubActivityCode').val(),
                PositionItemDescription: $('#PositionItemDescription').val(),
                PositionNoteNo: $('#PositionNoteNo').val(),
                ItemStart: $('#ItemStart').val(),
                ItemEnd: $('#ItemEnd').val(),
                CF_x_factor: $('#CF_x_factor').val(),
                CFR_x_Factor: $('#CFR_x_Factor').val(),
                CFR_GroupCode: $('#CFR_GroupCode ').val(),
                CFR_GroupName: $('#CFR_GroupName').val(),
                //ActiveFlag: $('#ActiveFlag').val(),
                ReportCode: $('#ReportCode').val(),
            }

            var url = '@Url.Action("CreateWorkingCapital", "WorkingCapital")';
            $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(data),
                data: data,
                dataType: "JSON",
                //contentType: "application/json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (response) {
                    //check is successfully save to database
                    if (response == "Success") {
                        //will send status from server side
                        swal({
                            text: "Successfully saved.",
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            window.location = '@Url.Action("PendingWorkingCapital", "WorkingCapital")';
                        });
                    }
                    else {
                        swal({
                            text: response,
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function () {
                    swal({
                        text: "Error on saving working Capital, try again.",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $('#btnSave').prop("disabled", false);
                    $("#divLoader").hide();
                }
            });
        });

        $('#ActivityId').on("change", function () {
            debugger
            $("#divLoader").show();
            var id = $("#ActivityId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetActivitiesById", "WorkingCapital")',
                data: { id: id },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#ActivityCode").val(data.ActivityCode);
                        $("#ActivityName").val(data.ActivityDescription);
                        $("#ActivityFooter").val(data.ActivityFooter);
                    } else {
                        swal({
                            text: "Exception on accessing Activity, try again",
                            icon: "warning",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    }
                },
                error: function () {
                    swal({
                        text: "Error on accessing Activity, try again",
                        icon: "error",
                        button: "OK",
                    }).then(function () {
                        location.reload();
                    });
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            })
        });


        $('#SubActivityId').on("change", function () {
         debugger
         $("#divLoader").show();
         var id = $("#SubActivityId").val();
             $.ajax({
                 type: "GET",
                 url: '@Url.Action("GetSubActivitiesById", "WorkingCapital")',
                 data: { id: id },
                 success: function (data, status, jqXHR) {
                     if (data.success) {
                         $("#SubActivityCode").val(data.SubActivityCode);
                         $("#SubActivityName").val(data.SubActivityDescription);
                         $("#SubActivityFooter").val(data.SubActivityFooter);
                     } else {
                         swal({
                             text: "Exception on accessing sub activity, try again",
                             icon: "warning",
                             button: "OK",
                         }).then(function () {
                             location.reload();
                         });
                     }
                 },
                 error: function () {
                     swal({
                         text: "Error on accessing sub activities, try again",
                         icon: "error",
                         button: "OK",
                     }).then(function () {
                         location.reload();
                     });
                 },
                 complete: function () {
                     $("#divLoader").hide();
                 }
             })
        });


        $('#NoteID').on("change", function () {
         debugger
         $("#divLoader").show();
            var id = $("#NoteID").val();
             $.ajax({
                 type: "GET",
                 url: '@Url.Action("GetNoteByNoteId", "WorkingCapital")',
                 data: { id: id },
                 success: function (data, status, jqXHR) {
                     if (data.success) {
                         $("#NoteNo").val(data.NoteNo);
                         $("#ItemDescription").val(data.NoteDesc);

                     } else {
                         swal({
                             text: "Exception on accessing note, try again",
                             icon: "warning",
                             button: "OK",
                         }).then(function () {
                             location.reload();
                         });
                     }
                 },
                 error: function () {
                     swal({
                         text: "Error on accessing note, try again",
                         icon: "error",
                         button: "OK",
                     }).then(function () {
                         location.reload();
                     });
                 },
                 complete: function () {
                     $("#divLoader").hide();
                 }
             })
        });



        $('#PositionNoteID').on("change", function () {
          debugger
          $("#divLoader").show();
            var id = $("#PositionNoteID").val();
              $.ajax({
                  type: "GET",
                  url: '@Url.Action("GetPositionNoteByNoteId", "WorkingCapital")',
                  data: { id: id },
                  success: function (data, status, jqXHR) {
                      if (data.success) {

                          $("#PositionNoteNo").val(data.NoteNo);
                          $("#PositionItemDescription").val(data.ItemDescription);
                          $("#PositionSubActivityCode").val(data.SubActivityCode);

                      } else {
                          swal({
                              text: "Exception on accessing note, try again",
                              icon: "warning",
                              button: "OK",
                          }).then(function () {
                              location.reload();
                          });
                      }
                  },
                  error: function () {
                      swal({
                          text: "Error on accessing note, try again",
                          icon: "error",
                          button: "OK",
                      }).then(function () {
                          location.reload();
                      });
                  },
                  complete: function () {
                      $("#divLoader").hide();
                  }
              })
         });



    </script>
}
