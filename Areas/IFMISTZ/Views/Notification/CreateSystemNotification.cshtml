@model IFMIS.Models.SystemNotificationVM

@{
    ViewBag.Title = "Create System Notification";
}

<div id="divLoader"></div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create System Notification </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form name="systemDocumentForm" id="systemDocumentForm">
                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">

                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.Label("Title", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.NotificationCategory, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownListFor(model => model.NotificationCategory, Model.NotificationCategories, "Select Category", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.DocumentType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group" id="sysdescription">
                                        @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-8">
                                            <textarea rows="2" class="form-control" onkeyup="resizeTextArea(this)" id="Description" name="Description"></textarea>
                                            (Remained characters: <i id="maxchars">300</i>)
                                        </div>
                                    </div>
                                    <div class="form-group" id="sysdocument">
                                        @Html.LabelFor(model => model.DocumentName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.DocumentName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DocumentName, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.DocumentType, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownListFor(model => model.DocumentType, Model.DocumentTypes, "Select Document Type", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.DocumentType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group" id="validdates">
                                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", AutoComplete="off" } })
                                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                        </div>
                                        <div id="sysdocument">
                                            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2"})
                                            <div class="col-md-3">
                                                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", AutoComplete="off" } })
                                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="control-label col-md-2">
                                            Upload File  <div id="ImagedimensionLabel"><br /> <i style="color:gray"> (2538 x 3000) </i></div>
                                        </div>
                                        <div class="col-md-8">
                                            @*@Html.TextBoxFor(model => model.file, new { @class = "form-control", @type = "file" })*@
                                            <input class="form-control" type="file" id="formFile">
                                            @Html.ValidationMessageFor(model => model.file, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IsNew, htmlAttributes: new { @class = "control-label col-md-2", style="margin-top:-7px"})
                                        <div class="col-md-8">
                                            @Html.CheckBoxFor(model => model.IsNew)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ShowAfterLogin, htmlAttributes: new { @class = "control-label col-md-2", style="margin-top:-7px"})
                                        <div class="col-md-8">
                                            @Html.CheckBoxFor(model => model.ShowAfterLogin)
                                        </div>
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-8">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("SystemDocumentList","SystemDocuments")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
    <script type="text/javascript">

        $(document).ready(function () {
            $("#sysdescription").toggle(false);
            $("#sysdocument").toggle(false);
            $("#validdates").toggle(false);
            $("#ImagedimensionLabel").toggle(false);
        })


        $("#NotificationCategory").change(function () {
            debugger;
            var category = $(this).val();

            if (category == "System Document") {
                $("#sysdocument").toggle(true);
            }
            else {
                $("#sysdocument").toggle(false);
            }

            if (category == "System Notification") {
                $("#sysdescription").toggle(true);
                //$("#validdates").toggle(true);
            }
            else {
                $("#sysdescription").toggle(false);
                $("#validdates").toggle(false);
            }

            if (category == "Login Notification") {
                $("#validdates").toggle(true);
                $("#sysdescription").toggle(true);
                $("#ImagedimensionLabel").toggle(true);
            }
            else {
                $("#validdates").toggle(false);
                $("#ImagedimensionLabel").toggle(false);
            }
        })

        $("#btnSave").on("click", function () {

            $("#divLoader").show();

            $("#btnSave").attr("disabled", true);
            $.validator.unobtrusive.parse("#systemDocumentForm");
                if (!$("#systemDocumentForm").valid()) {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();

                    return false;
                }

                var token = $("[name='__RequestVerificationToken']").val();

                var formData = new FormData();

                formData.append("__RequestVerificationToken", token);
                formData.append('Title', $("#Title").val());
                formData.append('Description', $("#Description").val());
                formData.append('NotificationCategory', $("#NotificationCategory").val());
                formData.append("DocumentName", $('#DocumentName').val());
                formData.append("DocumentType", $('#DocumentType').val());
                formData.append('StartDate', $("#StartDate").val());
                formData.append('EndDate', $("#EndDate").val());
                formData.append('file', $('input[type=file]')[0].files[0]);
                formData.append('IsNew', $("#IsNew").val());
                formData.append('ShowAfterLogin', $("#ShowAfterLogin").val());

                 var url = '@Url.Action("CreateSystemNotification", "Notification")';
                 var urlList = '@Url.Action("SystemNotificationList", "Notification")';
                $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(Object.fromEntries(formData)),
                data: formData,
                dataType: "JSON",
                //contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                //cache: false,
                processData: false,
                contentType: false,
                success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Saved successfully",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                       window.location.href = urlList;
                                });
                            } else {
                                swal({
                                    text: response,
                                    icon: "warning",
                                    button: "OK",
                                })
                            }
                        },
                error: function () {
                            swal({
                                text: "An error occured while processing your request, please contact system support",
                                icon: "error",
                                button: "OK",
                        })
                },
                complete: function () {
                    $("#btnSave").attr("disabled", false);
                    $("#divLoader").hide();
                }
                });
        })


        var OldDescVal = ""
        $("#Description").on("keyup", function (e) {
            var allowedchars = parseFloat(300 - this.value.length)
            if (allowedchars < 0) {
                $("#maxchars").text("Characters Limit Exceeded");
                $("#maxchars").attr("style", "color: red;");
                $("#btnSave").prop('disabled', true);
            }
            else {
                $("#btnSave").prop('disabled', false);
                $("#maxchars").attr("style", "color: black;");
                $("#maxchars").text(300 - this.value.length)
                if (this.value) {
                    var reg = new RegExp(/[0-9a-zA-Z ]/);
                    if (!reg.test(this.value.substr(-1))) {
                        $("#BatchDesc").val(OldDescVal)
                    } else {
                        OldDescVal = this.value
                    }
                }
            }
        });


        function resizeTextArea(txt) {
            txt.style.height = "26px";
            txt.style.height = (26 + txt.scrollHeight) + "px";
        }





    </script>
}
