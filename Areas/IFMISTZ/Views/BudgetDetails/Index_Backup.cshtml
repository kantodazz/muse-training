@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.BudgetVM>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #jarviswidget .header {
        background: blueviolet;
    }

    .submit-btn {
        background-color: white;
        color: black;
        border: 1px solid #ccc;
        border-radius: 12px;
        padding: 3px;
        padding-right: 10px;
    }


    .dataTables_filter {
        display: none;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        resize: vertical;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        resize: vertical;
    }

    table, th, tr, td {
        border: 1px solid black;
        border-collapse: collapse;
        border-color: gray;
        /*border-collapse: separate;*/
        border-spacing: 0;
        color: #4a4a4d;
        font: 12px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;
        width: 100%;
        padding: 5px 11px;
        vertical-align: middle;
    }

        tr:not([data-level='3']) {
            cursor: pointer;
        }

        tr.expanded .sign:after {
            content: url(/ifmis/Content/img/budget/Minus3.png);
        }

        tr.folded .sign:after {
            content: url(/ifmis/Content/img/budget/Collapse2.png);
            cursor: pointer;
        }

        td:first-child {
            padding: inherit;
        }

    td {
        border-bottom: 1px solid #cecfd5;
        border-right: 1px solid #cecfd5;
        width: auto;
    }


    thead {
        background: #395870;
        color: #fff;
        font-weight: bold;
    }

    tfoot {
        background: #395870;
        color: #fff;
        font-weight: bold;
    }
</style>

<div style="padding:1em;padding-top:4em">
    <section id="widget-grid">
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-12">

                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2>Budget Entry</h2>
                    </header>

                    <div>
                        <div class="widget-body " style="padding-top:10px">

                            <div class="row">
                                <div class="col-md-6">

                                    <a class="btn btn-info" onclick="ImportBudget()" href="#">Import Budget</a>

                                    <a class="btn btn-info" href='@Url.Action("budgetentry", "Budgetdetails")'>
                                        <i class="glyphicon glyphicon-plus"></i> Add New
                                    </a>

                                </div>
                            </div>

                            <div class="row">
                                @if (ViewBag.Error != null)
                                {
                                    <div class="well form-horizontal">
                                        <div class="form-group">
                                            <h3 style="color:red">@ViewBag.Error</h3>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                </div>
                                <div class="col-md-6">
                                    <div class="searchContainer submit-btn" style="float:right">
                                        <i class="fa fa-search searchIcon"></i>
                                        <input type="search" name="search" placeholder="Search..." id="searchbox">
                                    </div>
                                </div>
                            </div>
                            @*<table id="datatable_tabletools" class="table table-bordered table-condensed">*@
                            <table id="datatable_tabletool" class="table table-bordered table-condensed">
                                <thead>
                                    <tr style="background:#f5f5f5; color:#000000">
                                        <td colspan="5">SubBudget Class</td>
                                        <td style="text-align:right"><b>Ceiling Amount</b></td>
                                        <td style="text-align:right"><b>Item Amount</b></td>
                                        <td style="text-align:right"><b>Balance Amount</b></td>
                                        <td><b>Action</b></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        decimal? totalsbcAmount = 0;
                                        decimal? totalAmount = 0;
                                        decimal? cielinglAmount = 0;
                                        decimal? BalanceAmount = 0;
                                        decimal? GenBalanceAmount = 0;
                                        decimal? OverallAmount = 0;
                                        //foreach (var group in Model.Where(a => a.SubBudgetClass == "101").GroupBy(a => a.CostCentre))
                                    }

                                    @foreach (var sbc in Model.GroupBy(a => a.SubBudgetClass))
                                    {
                                        totalsbcAmount +=(decimal?)Model.Where(a => a.SubBudgetClass == sbc.Key).Sum(a => a.OperationalAmount);
                                        cielinglAmount = (decimal?)sbc.Where(a => a.SubBudgetClass == sbc.Key).Select(a => a.CielingAmount).FirstOrDefault();
                                        BalanceAmount = cielinglAmount - (decimal)sbc.Where(a => a.SubBudgetClass == sbc.Key).Sum(a => a.OperationalAmount);
                                        OverallAmount += cielinglAmount;
                                        GenBalanceAmount += BalanceAmount;
                                        <tr data-level='1'>
                                            <td colspan="5">
                                                <span class="sign"></span>
                                                <b> @sbc.Where(a => a.SubBudgetClass == sbc.Key).Select(a => a.SuBbudgetClassDesc).FirstOrDefault()</b>
                                            </td>
                                            <td style="text-align:right">@string.Format("{0:#,0.00}", cielinglAmount)</td>
                                            <td style="text-align:right">@string.Format("{0:#,0.00}", totalsbcAmount) </td>
                                            <td style="text-align:right">@string.Format("{0:#,0.00}", BalanceAmount)</td>
                                            <td> </td>
                                            @*<td><input type="checkbox" class="checkBoxReq" /></td>*@
                                        </tr>
                                        byte? instlvl = sbc.Where(a => a.SubBudgetClass == sbc.Key).Select(a => a.InstitutionLevel).FirstOrDefault();
                                        string grouplvl = "";

                                        if (instlvl == 1)
                                        {
                                            foreach (var sbvt in sbc.GroupBy(a => a.SubVote))
                                            {
                                                totalAmount = (decimal)sbvt.Where(a => a.SubVote == sbvt.Key).Sum(a => a.OperationalAmount);
                                                <tr data-level='2'>
                                                    <td> </td>
                                                    <td colspan="4">
                                                        <span class="sign"></span>
                                                        <b> @sbvt.Where(a => a.SubVote == sbvt.Key).Select(a => a.SubVoteDesc).FirstOrDefault()</b>
                                                    </td>
                                                    <td> </td>
                                                    <td style="text-align:right">@string.Format("{0:#,0.00}", sbvt.Where(a => a.SubVote == sbvt.Key).Sum(a => a.OperationalAmount))</td>
                                                    <td style="text-align:right"></td>
                                                    <td> </td>
                                                </tr>

                                                <tr data-level='3' style="background-color:#f5f5f5">
                                                    <td> </td>
                                                    <td><b>#</b></td>
                                                    <td><b>GLAccount</b></td>
                                                    <td><b>Description</b></td>
                                                    <td><b>Status</b></td>
                                                    <td> </td>
                                                    <td style="text-align:right"><b>Amount</b></td>
                                                    <td> </td>
                                                    <td> </td>
                                                </tr>

                                                int i = 0;
                                                foreach (var item in sbvt)
                                                {
                                                    i++;
                                                    <tr data-level='3'>
                                                        <td> </td>
                                                        <td>@i</td>
                                                        <td> @item.GlAccount</td>
                                                        <td>@item.GlAccountDesc</td>
                                                        <td>@item.OverAllStatus</td>
                                                        <td> </td>
                                                        <td style="text-align: right">
                                                            @*@@decimal.Parse(item.OperationalAmount).ToString("N2")*@
                                                            @string.Format("{0:#,0.00}", item.OperationalAmount)
                                                        </td>
                                                        <td> </td>
                                                        <td>
                                                            <div class="btn-group">
                                                                @if (item.OverAllStatus != "Approved")
                                                                {
                                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

                                                                        <span class="caret">
                                                                        </span>
                                                                        <span class="sr-only"></span>
                                                                    </button>
                                                                    <ul class="dropdown-menu">
                                                                        <li>@Html.ActionLink("Edit", "Edit", new { id = item.BudgetDetailId })</li>
                                                                        <li><a href="#" onclick="Delete(@item.BudgetDetailId)">Delete</a></li>
                                                                    </ul>
                                                                }

                                                            </div>

                                                        </td>

                                                    </tr>
                                                }

                                            }
                                        }
                                        else if (instlvl == 2)
                                        {
                                            foreach (var costctr in sbc.GroupBy(a => a.CostCentre))
                                            {
                                                totalAmount += (decimal)costctr.Where(a => a.CostCentre == costctr.Key).Sum(a => a.OperationalAmount);
                                                <tr data-level='2'>
                                                    <td></td>
                                                    <td colspan="4">
                                                        <span class="sign"></span>
                                                        <b> @costctr.Where(a => a.CostCentre == costctr.Key).Select(a => a.CostCentreDesc).FirstOrDefault()</b>
                                                    </td>
                                                    <td></td>
                                                    <td style="text-align:right">@string.Format("{0:#,0.00}", costctr.Where(a => a.CostCentre == costctr.Key).Sum(a => a.OperationalAmount))</td>
                                                    <td style="text-align:right"></td>
                                                    <td></td>
                                                </tr>

                                                <tr data-level='3' style="background-color:#f5f5f5">
                                                    <td></td>
                                                    <td><b>#</b></td>
                                                    <td><b>GLAccount</b></td>
                                                    <td><b>Description</b></td>
                                                    <td><b>Status</b></td>
                                                    <td></td>
                                                    <td style="text-align:right"><b>Amount</b></td>
                                                    <td></td>
                                                    <td></td>
                                                </tr>

                                                int i = 0;
                                                foreach (var item in costctr)
                                                {
                                                    i++;
                                                    <tr data-level='3'>
                                                        <td></td>
                                                        <td>@i</td>
                                                        <td> @item.GlAccount</td>
                                                        <td>@item.GlAccountDesc</td>
                                                        <td>@item.OverAllStatus</td>
                                                        <td></td>
                                                        <td style="text-align: right">
                                                            @*@@decimal.Parse(item.OperationalAmount).ToString("N2")*@
                                                            @string.Format("{0:#,0.00}", item.OperationalAmount)
                                                        </td>
                                                        <td></td>
                                                        <td>
                                                            <div class="btn-group">
                                                                @if (item.OverAllStatus != "Approved")
                                                                {
                                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                                        <span class="caret">
                                                                        </span>
                                                                        <span class="sr-only"></span>
                                                                    </button>
                                                                    <ul class="dropdown-menu">
                                                                        <li>@Html.ActionLink("Edit", "Edit", new { id = item.BudgetDetailId })</li>
                                                                        <li><a href="#" onclick="Delete(@item.BudgetDetailId)">Delete</a></li>
                                                                    </ul>
                                                                }

                                                            </div>

                                                        </td>

                                                    </tr>
                                                }
                                            }
                                        }
                                    }

                                </tbody>

                            </table>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
            </article>
        </div>
    </section>
</div>

<!----------- IMPORT DIALOG ----------------->
<div class="modal fade" id="budgetModal" style="left:4%">

    <div class="modal-dialog" style="width:40%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Import Budget</h3>

            </div>
            @using (Html.BeginForm("Index", "BudgetDetails/BudgetImportation", FormMethod.Post, new { enctype = "multipart/form-data", @class = "well form-horizontal" }))
            {
                <div class="modal-body">
                    <div class="row">

                        <div class="col-md-4">
                            <select id="journalCode" name="journalCode" class="form-group" required>
                                <option value="BA">Approved Budget</option>
                                <option value="BR">Budget Reallocation</option>
                                <option value="BS">Supplementary Budget</option>
                            </select>

                        </div>
                        <div class="col-md-8">
                            <input class="form-control" id="file2" type="file" name="postedFile" onchange="this.parentNode.nextSibling.value = this.value" required>

                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-info">
                        <i class="fa fa-save"></i>Save
                    </button>
                    <button type="submit" class="btn btn-info" data-dismiss="modal">
                        <i class="glyphicon glyphicon"></i>Cancel
                    </button>
                </div>
            }
        </div>
    </div>
</div>



@section pagespecific{

    <script>

        function ImportBudget() {
            $('#budgetModal').modal('show');
        }


        var datatable_tabletools = $('#datatable_tabletools').dataTable({
            "autoWidth": true,
            "searching": true, // MATCH YOUR DATA TABLE PROPERTIES WITH THESE
            "bPaginate": false,
            "info": true,
        });

        // GRAB THIS==================================
        $("#searchbox").on("keyup search input paste cut", function () {
            datatable_tabletools.DataTable().search(this.value).draw();
        });

        //END HERE ==========================================
        $(function () {
            $("#cboAll").click(function () {
                if ($(this).is(":checked")) {
                    $(".w3-check").prop('checked', true);
                }
                else {
                    $(".w3-check").prop('checked', false);
                }
            });
        })
        $(function () {
            $("#cboApprAll").click(function () {
                if ($(this).is(":checked")) {
                    $(".w4-check").prop('checked', true);
                }
                else {
                    $(".w4-check").prop('checked', false);
                }
            });
        })
        var data = [];
        var globalPayeeId = null;
        //EDIT RECORD
        function edit(id) {
            //if (i == 'x') i = globalPayeeId;
            console.log(id);
            $.ajax({
                type: "get",
                url: '@Url.Action("EditBudget", "BudgetDetails")' + "/?id=" + id + "",
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (data) {
                    alert("test :" + data.subbudgetClass);
                },
                failure: function (error) {
                    swal(error);
                    console.log("error");
                }
            });
            $('#confirmModal').modal('hide');


        }

        //=================== DELETE START =========================

        /**
        * Show confirm delete Dialog
        * param  {Int} i - Id of the selected Item
        */
        function Delete(id) {
            //if (i == 'x') i = globalPayeeId;
            console.log(id)
            swal({
                title: "Are you sure?",
                text: "Once deleted, you will not be able to recover this Line!",
                buttons: [
                  'No',
                  'Yes'
                ],

            }).then(function (isConfirm) {
                if (isConfirm) {
                    deleteItemConfirmed(id)
                } else {
                    swal("Cancelled", "No change was made");
                }
            });
            $('#confirmModal').modal('hide');
        }

        /**
        * Send delete signal to the backend
        * param  {Int} i - Id of the selected Item
        */
        function deleteItemConfirmed(id) {
            var url = '@Url.Action("DeleteBudget", "BudgetDetails")';
            $.ajax({
                type: "post",
                url: url,
                data: { "BudgetDetailid": id },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {

                    if (response == "Success") {
                        swal("Budget Line Deleted Successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.reload();
                            });
                    }
                    else {
                        swal(response);
                    }

                },
                failure: function (error) {
                    swal(error);
                }
            });
        }
        // **************** DELETE END ******************************

        //For Collapse & Expand

        $(document).ready(function () {

            $("tbody > tr:not([data-level='1'])").hide();
            $("tbody > tr:not([data-level='3'])").addClass("expandable sign folded");
            $("tbody > tr")
                .css("padding-left", function (index) {
                    return 10 * parseInt($(this).data("level"), 10) + "px";
                });

            function range(lowEnd, highEnd) {
                // assert lowEnd >= 0 and highEnd < 100
                var validation = (lowEnd <= highEnd) && (lowEnd >= 0) && (highEnd < 10000);
                if (!(validation)) {
                    console.assert(validation,
                                   'Function "range" received unlikely values: ' +
                                   lowEnd + ' and ' + highEnd + "...");
                } else {
                    var arr = [];
                    while (lowEnd <= highEnd) {
                        arr.push(lowEnd++);
                    }
                    return arr;
                }
            }

            function name_range(fun, lowEnd, highEnd) {
                var arr = range(lowEnd, highEnd);
                jQuery.each(arr, function (index, value) {
                    arr[index] = fun(value);
                });
                return arr;
            }

            function create_selector(level) {
                return "[data-level='" + level + "']";
            }

            $("tr.expandable").click(function () {
                var this_level = parseInt($(this).data("level"), 10);
                var this_level_selector = create_selector(this_level);
                var next_level_selector = create_selector(this_level + 1);
                var next_or_lower = name_range(create_selector,
                this_level + 1, 10); // TODO: find last level
                var this_or_higher = name_range(create_selector, 0, this_level);
                var node = $(this).nextUntil(this_or_higher.join(","));
                // different behaviour according to state (expanded / folded):
                if ($(this).hasClass("expanded")) {
                    $(node).filter(next_or_lower.join(",")).hide();
                    $(node).not("expanded").removeClass("expanded").addClass('folded');
                    $(this).removeClass("expanded").addClass('folded');


                } else {
                    $(node).filter(next_level_selector).show();
                    $(this).addClass("expanded").removeClass('folded');


                }
            });


        });

    </script>
}
