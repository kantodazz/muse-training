@model  IFMIS.Areas.IFMISTZ.Models.CeilingBacklogMV

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitCeiling(this)" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.InstitutionId)
    @Html.HiddenFor(model => model.Currency)
    @Html.HiddenFor(model => model.ContractId)


    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Number&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractNo)</div>
    </div>
    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Name&nbsp:</strong>&nbsp;@Html.DisplayFor(model => model.ContractName)</div>
    </div>
    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Type&nbsp;&nbsp;&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractType)</div>
        @*<div class="col-sm-6 col-md-6 col-lg-6"><strong>Supplier Name&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.SupplierName)</div>*@
    </div>
    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Amount&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.Amount)</div>
    </div>

    <div class="row">

        <table id="fundategories" class="table table-bordered table-hover table-condensed col-md-10" style="margin-left:10px">
            <thead>
                <tr style="background:#f5f5f5; color:#000000"><th style="text-align:right;width:4%"></th><th style="text-align:center" colspan="3">Fund Category</th></tr>
                <tr>
                    <th style="text-align:center;width:4%">#</th>
                    <th style="text-align:left;width:70%">Categoty Name</th>
                    <th style="text-align:center;width:26%">Amount</th>

                </tr>
            </thead>

            <tbody>
                @for (var i = 0; i < Model.FundCategories.Count(); i++)
                {
                    var j = i + 1;
                    <tr>
                        <td style="text-align:center">@j</td>
                        <td>
                            @Html.DisplayFor(modelItem => Model.FundCategories[i].FundCategoryDescription)
                            @Html.HiddenFor(modelItem => Model.FundCategories[i].FundCategoryId)
                            @Html.HiddenFor(modelItem => Model.FundCategories[i].FundCategoryDescription)
                        </td>

                        <td align="center">
                            @Html.EditorFor(modelItem => Model.FundCategories[i].Amount, new { htmlAttributes = new { @class = "form-control amount", style = "width:100px;height:27px", min = 0, onchange = "amountChanged(this)" } })
                            @*<input placeholder="Amount" name="amount" id="amount" data-type="currency" pattern="^\$\d{1,3}(,\d{3})*(\.\d+)?$"  onchange="amountChanged(this)" />*@
                        </td>



                    </tr>
                }
                <tr>
                    <td align="right">
                        Total
                    </td>
                    <td align="left">
                        <span id="total_amount">@Html.DisplayFor(model => model.Amount)</span>
                    </td>
                    <td align="center">
                        Balance: <span id="balance_amount">@Html.DisplayFor(model => model.Balance)</span>
                    </td>
                </tr>
                <tr>
                    <td align="right" colspan="3">
                        <button type="submit" id="save_button" class="btn btn-info" style="margin-right:2px">
                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

}
<script>

     function SubmitCeiling(formData) {
               $("#save_button").prop('disabled', true);
         var url = '@Url.Action("SaveCeilingBacklog", "ContractCeiling")';
         console.log("formData", new FormData(formData));
         var data = new FormData(formData);
         for (var pair of data.entries()) {
             console.log(pair[0] + ', ' + pair[1]);
         }
           var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (response) {
                    $("#save_button").prop('disabled', false);
                    if (response == "Success") {
                        swal("Data saved successfully", { icon: "success" })
                            .then((value) => {
                             var url = '@Url.Action("CeilingBacklog", "ContractCeiling")';
                              window.location.replace(url);
                               });
                    }
                    else {
                        swal(response);
                    }
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
    }
    $(".amount").autoNumeric('init');

    function amountChanged(e) {
        var total = document.getElementById('total_amount').innerHTML;
        var balance = document.getElementById('balance_amount').innerHTML;
        var balance1 = parseFloat(balance.split(",").join(""));
        var max_value = parseFloat(balance);
        console.log("total:", total);
        console.log("balance:", balance1);
        const formatter = new Intl.NumberFormat('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
            useGrouping: true
        });
        //$("#total_line_amount").val(sum_total.toLocaleString('en'));
       // var max_value = parseFloat(e.max);
        //var balance1 = parseFloat(balance.textContent.split(",").join("")));
        var entered_value = parseFloat(e.value.split(",").join(""));
        if (!entered_value) {
            entered_value = 0;
        }

        if (entered_value >= 0) {
            if (balance1 >= entered_value) {
                balance1 = balance1 - entered_value;
                console.log("balance1:", balance1);
                const formattedNumber = formatter.format(balance1);
                document.getElementById('balance_amount').innerHTML = formattedNumber;
                //$("#balance_amount").val(balance1.toLocaleString('en'));
            } else {
                swal("Entered Amount exceed balance: " + balance.toLocaleString('en'));
            }
        }
    }


</script>




