@model IFMIS.Areas.IFMISTZ.Models.ContractCeilingVM
@{
    ViewBag.Title = "Manage Ceiling";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<style>
    .pull-right {
        margin-top: 10px;
    }

    ul .header-dropdown-list, .hidden-xs {
        margin-top: 10px;
    }
</style>
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
    </symbol>
    <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
    </symbol>
    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>

<div id="content">

    <!-- widget grid -->
    <section id="widget-grid">


        <!-- START ROW -->

        <div>

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header class="margin-top-10">
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Manage Ceiling Amount </h2>

                    </header>


                    <div>

                        <div class="widget-body">
                            <div align="center">
                                <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>
                            <div class="row">
                                <button id="d-normal-btn" onclick="doNormalDecrease()" class="col-md-6 btn btn-outline-info py-2 btn-outline decrese-normal rounded-start">
                                    <span class="ms-2 fs-3 ">Normal Balance Decrease</span>
                                </button>

                                <button id="d-transfer-btn" onclick="doTransferDecrease()" class="col-md-6 btn btn-outline-info py-2 decrese-transfer rounded-end">
                                    <span class="ms-2 fs-3 "> Balance Transfer</span>
                                </button>
                            </div>
                            <hr class="mt-5" />
                            <div class="row normal d-none">
                                <div class="col-md-10 mt-4">
                                    @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitCeiling(this)" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <div id="normal-div" class="row">

                                            <div class="form-horizontal">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.InstitutionId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-10">
                                                        @Html.DropDownListFor(model => model.InstitutionId, Model.InstitutionList, "Select ", new { @class = "form-control select2", @required = "required" })
                                                        @Html.ValidationMessageFor(model => model.InstitutionId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CostCenter, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-10">
                                                        <select id="InstitutionSubLevelId" name="InstitutionSubLevelId" class="form-control select2" required>
                                                            <option  value="" selected>Select ...</option>
                                                        </select>

                                                        @Html.ValidationMessageFor(model => model.CostCenter, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">

                                                    @Html.LabelFor(model => model.FundCategoryId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-10">
                                                        @Html.DropDownListFor(model => model.FundCategoryId, Model.FundCategories, "Select ", new { @class = "form-control select2", @required = "required" })
                                                        @Html.ValidationMessageFor(model => model.FundCategoryId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    <div class="col-md-10 col-md-offset-2">
                                                        <button type="button" class="btn btn-info px-5 py-3"  style="float: left; margin-left: 5px" onclick="getBalance()">
                                                            Request Balance
                                                        </button>
                                                    </div>
                                                </div>
                                                <div id="alert-success" class="alert alert-success d-flex align-items-center d-none" role="alert" >
                                                    <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg>
                                                    <div id="alert-success-text ">
                                                        
                                                    </div>
                                                </div>
                                                <div id="alert-error" class="alert alert-danger d-flex align-items-center d-none" role="alert">
                                                    <svg class="bi flex-shrink-0 mx-3" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg>
                                                    <div id="alert-error-text" class="ms-3 fs-3">
                                                        
                                                    </div>
                                                </div>
                                                <div id="balance-summary" class="py-4 d-none" style="background-color:#eceff2">
                                                    <div class="me-3">
                                                        <div class="form-group">
                                                            <label class="control-label  col-md-2"></label>
                                                            <div class="col-md-10 text-start fs-3 fw-bold text-muted">
                                                                <span>Current Balance Surmmary : </span>
                                                                <span id="normal-balance-value"></span>
                                                                <span id="normal-balance-currency"></span>
                                                                <span class="px-2 text-info">|</span>
                                                                <span class="class=" text-warning" id="new-balance-span">
                                                                    <span>New Balance is : </span>
                                                                    <span id="new-normal-balance-amount-text"></span>
                                                                    <span id="new-normal-balance-currency"></span>
                                                                </span>
                                                            </div>
                                                        </div>

                                                        <div class="form-group ">
                                                            <label class="control-label  col-md-2">Reducing Amount :</label>
                                                            <div class="col-md-4">
                                                                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "reducedAmount" } })
                                                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                                                            </div>
                                                            @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                            <div class="col-md-4">
                                                                <div id="reducing-currency" class="border border-default border-1 rounded-1 py-3 px-4"></div>
                                                            </div>
                                                        </div>

                                                        <div class="form-group">

                                                            <label class="control-label  col-md-2">Reducing Reason :</label>
                                                            <div class="col-md-10">
                                                                @Html.EditorFor(model => model.CeilingDescription, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", rows = "3", maxlength = 250 } })
                                                                @Html.ValidationMessageFor(model => model.CeilingDescription, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>

                                                        <div class="form-group mt-2">
                                                            <div class="col-md-10 col-md-offset-2">
                                                                <a href="@Url.Action("PendingCeiling","ContractCeiling")" style="margin-right:5px" class="btn btn-info pull-left px-5 py-3"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>

                                                                <button type="submit" class="btn btn-info px-5 py-3" id="save_button" style="float: left; margin-left: 5px">
                                                                    <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>


                                            </div>
                                        </div>


                                    }
                                </div>
                            </div>
                            <div class="row transfer d-none">

                                <div id="transfer-success-alert" class="alert alert-success d-flex align-items-center d-none" role="alert">
                                    <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg>
                                    <div id="transfer-success-text">
                                    </div>
                                </div>
                                <div id="transfer-error-alert" class="alert alert-danger d-flex align-items-center d-none" role="alert">
                                    <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg>
                                    <div id="transfer-error-text">
                                    </div>
                                </div>

                                <div class="border-bottom border-1 border-default">
                                    <div class="col-md-6 mt-4">
                                        @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return getBalanceForTransfer(this)" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="row">

                                                <div id="transfer-div" class="form-horizontal">

                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.InstitutionId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-10">
                                                            @Html.DropDownListFor(model => model.InstitutionId, Model.InstitutionList, "Select ", new { @class = "form-control select2", @required = "required" })
                                                            @Html.ValidationMessageFor(model => model.InstitutionId, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.CostCenter, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-10">
                                                            <select id="InstitutionSubLevelId" name="InstitutionSubLevelId" class="form-control select2" required>
                                                                <option value="" selected>Select ...</option>
                                                            </select>

                                                            @Html.ValidationMessageFor(model => model.CostCenter, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                    <div class="form-group">

                                                        @Html.LabelFor(model => model.FundCategoryId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-10">
                                                            @Html.DropDownListFor(model => model.FundCategoryId, Model.FundCategories, "Select ", new { @class = "form-control select2", @required = "required" })
                                                            @Html.ValidationMessageFor(model => model.FundCategoryId, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <div class="col-md-10 col-md-offset-2">
                                                            <button type="button" class="btn btn-info px-5 py-3" onclick="getBalanceForTransfer()" style="float: left; margin-left: 5px">
                                                                Request Balance
                                                            </button>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>


                                        }
                                    </div>


                                    <div id="transfer-balace-summary-container" class="col-md-6 border-start border-info border-5 pb-3 d-none" style="background-color:#eceff2">

                                        <div class="row">

                                            <div class="form-horizontal">

                                                <div class="form-group pt-4">
                                                    <div class="col-md-12 text-start fs-5 fw-bold text-muted">
                                                        <span>Current Balance Surmmary :</span>
                                                        <span id="current-transfer-amount"></span>
                                                        <span id="curren-transfer-currency"></span>
                                                        <span class="px-2 text-info">|</span>
                                                        <span id="ts" class="text-info"  >
                                                            <span>New Balance is : </span>
                                                            <span id="transfer-new-balancy-amount"></span>
                                                            <span id="transfer-new-balancy-currency"></span>
                                                        </span>
                                                    </div>
                                                </div>
                                                <hr class="my-2" />
                                                <div class="form-group mt-4">
                                                    <label class="control-label  col-md-2">Reducing Amount :</label>
                                                    <div class="col-md-4">
                                                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "transferReducedAmount" } })
                                                        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-4">
                                                        <div class="border border-default p-3"  id="transfer-reducing-currency"></div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label  col-md-2">Reducing Reason :</label>
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.CeilingDescription, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", rows = "3", maxlength = 250,@id= "TransferCeilingDescription" } })
                                                        @Html.ValidationMessageFor(model => model.CeilingDescription, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="form-group mb-2">
                                            <div class="col-md-10 col-md-offset-2">
                                                <button id="addToList" type="button" class="btn btn-outline-info px-5 py-3" id="save_button" style="float: left;">
                                                    <i class="glyphicon glyphicon-plus"></i> Add to List
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                
                                <div id="transfer-details-content" class="form-group ">

                                    <div class="py-3 mt-3">
                                        <span class="text-start text-muted fs-4">Total Collected Amount For Transfer : </span>
                                        <span id="collected-amount" class="fs-3 text-white text-center px-4 py-3 bg-success border border-danger rounded-3"></span>
                                    </div>

                                    <table  class="table">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Institution</th>
                                                <th scope="col">Cost center</th>
                                                <th scope="col">Amount</th>
                                                <th scope="col">Action</th>

                                            </tr>
                                        </thead>
                                        <tbody id="addedList">
                                            
                                            
                                        </tbody>
                                    </table>

                                    <div id="receivingCostCenter" class="row d-none">

                                        <div class="col-md-10">
                                            <div class="form-horizontal">
                                                <div class="form-group py-4">
                                                    <label class="col-md-2"></label>
                                                    <div class="col-md-10">
                                                        <h class="text-info fs-4 fw-bold">TRANSFER THE COLLECTED AMOUNT TO :</h>
                                                        <h1 class="text-muted fs-5">Please select the receiving cost center</h1>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div id="to"  class="col-md-10 mt-1">
                                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitCeiling(this)" }))
                                            {
                                                @Html.AntiForgeryToken()
                                                <div class="row">

                                                    <div class="form-horizontal">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.InstitutionId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                            <div class="col-md-10">
                                                                @Html.DropDownListFor(model => model.InstitutionId, Model.InstitutionList, "Select ", new { @class = "form-control select2", @required = "required" })
                                                                @Html.ValidationMessageFor(model => model.InstitutionId, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>

                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.CostCenter, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                            <div class="col-md-10">
                                                                <select id="InstitutionSubLevelId" name="InstitutionSubLevelId" class="form-control select2" required>
                                                                    <option value="" selected>Select ...</option>
                                                                </select>

                                                                @Html.ValidationMessageFor(model => model.CostCenter, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>

                                                        <div class="form-group">

                                                            @Html.LabelFor(model => model.FundCategoryId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                            <div class="col-md-10">
                                                                @Html.DropDownListFor(model => model.FundCategoryId, Model.FundCategories, "Select ", new { @class = "form-control select2", @required = "required" })
                                                                @Html.ValidationMessageFor(model => model.FundCategoryId, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="form-group mt-2">
                                                    <div class="col-md-10 col-md-offset-2">
                                                        <a href="@Url.Action("PendingCeiling","ContractCeiling")" style="margin-right:5px" class="btn btn-info pull-left px-5 py-3"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>

                                                        <button onclick="onTransfer()" type="button" class="btn btn-info px-5 py-3" id="save_button" style="float: left; margin-left: 5px">
                                                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                            </div>


                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-8 col-md-offset-1 py-4">

                                    </div>
                                </div>
                            </div>
                        </div>


                </div>
            </article>

        </div>
    </section>

</div>
@section pagespecific {
    <script>
        var selectedTab = null;
        $(document).ready(function () {
            
            selectedTab = localStorage.getItem("selectedTab");
            

            if (selectedTab == null || selectedTab == undefined || selectedTab == "" || (selectedTab != "normal" && selectedTab != "transfer")) {
                localStorage.setItem("selectedTab", "normal");
                selectedTab = defaultTab;
            }

            if (selectedTab == "normal") {
                document.getElementById("d-normal-btn").click();

            } else {
                document.getElementById("d-transfer-btn").click();
            }
        });


       
        var btn_normal = document.getElementsByClassName('decrese-normal')[0];
        var btn_transfer = document.getElementsByClassName('decrese-transfer')[0];
        btn_transfer.classList.remove("btn-info", "text-white");


        var normalLayout = document.getElementsByClassName('normal')[0];
        normalLayout.classList.remove("d-none");

        var transferLayout = document.getElementsByClassName('transfer')[0];
        transferLayout.classList.add("d-none");
        

        btn_normal.addEventListener("click", function () {
            btn_normal.classList.add("btn-info", "text-white");
            btn_transfer.classList.remove("btn-info", "text-white");

            var normalLayout = document.getElementsByClassName('normal')[0];
            normalLayout.classList.remove("d-none");

            var transferLayout = document.getElementsByClassName('transfer')[0];
            transferLayout.classList.add("d-none");
        });

        btn_transfer.addEventListener("click", function () {
            btn_transfer.classList.add("btn-info", "text-white");
            btn_normal.classList.remove("btn-info", "text-white");


            var normalLayout = document.getElementsByClassName('normal')[0];
            normalLayout.classList.add("d-none");

            var transferLayout = document.getElementsByClassName('transfer')[0];
            transferLayout.classList.remove("d-none");
        });


        /*$(document).ready(function () {
            $(".decrese-normal").addClass("btn-info text-white");
            $(".decrese-transfer").removeClass("btn-info text-white");

            $(".decrese-normal").click(function () {
                $(".decrese-normal").addClass("btn-info text-white");
                $(".decrese-transfer").removeClass("btn-info text-white");
            });

            $(".decrese-transfer").click(function () {
                $(".decrese-transfer").addClass("btn-info text-white");
                $(".decrese-normal").removeClass("btn-info text-white");
            });

        });*/


        $("#normal-div #InstitutionId").change(function () {
            var id = $(this).val();
            var url = '@Url.Action("GetCostCenters", "ContractCeiling")';
            $.ajax({
            type: "GET",
            url: url,
            data: { id : id },
            success: function (response) {
                $("#normal-div #InstitutionSubLevelId").empty();
                $("#normal-div #InstitutionSubLevelId").append(response);
            }
            })
        });

         $("#transfer-div #InstitutionId").change(function () {
             var id = $(this).val();

            var url = '@Url.Action("GetCostCenters", "ContractCeiling")';
            $.ajax({
            type: "GET",
            url: url,
            data: { id : id },
            success: function (response) {
                $("#transfer-div #InstitutionSubLevelId").empty();
                $("#transfer-div #InstitutionSubLevelId").append(response);
            }
            })
         });

         $("#to #InstitutionId").change(function () {
             var id = $(this).val();

            var url = '@Url.Action("GetCostCenters", "ContractCeiling")';
            $.ajax({
            type: "GET",
            url: url,
            data: { id : id },
            success: function (response) {
                $("#to #InstitutionSubLevelId").empty();
                $("#to #InstitutionSubLevelId").append(response);
            }
            })
         });

        function doNormalDecrease() {
            localStorage.setItem("selectedTab", "normal");
        }
        function doTransferDecrease() {
            localStorage.setItem("selectedTab", "transfer");
        }

        function SubmitCeiling(formData) {
               $("#save_button").prop('disabled', true);
            var url = '@Url.Action("SaveCeiling", "ContractCeiling")';
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (response) {
                    $("#save_button").prop('disabled', false);
                    if (response == "Success") {
                        swal("Data saved successfully", { icon: "success" })
                            .then((value) => {
                       var url = '@Url.Action("PendingCeiling", "ContractCeiling")';
                               window.location.replace(url);
                               });
                    }
                    else {
                        swal(response);
                    }
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }
        //SHOW LOADER ICON
        $(document).ajaxStart(function () {
            $(".loadingImg").show();

        });
        //HIDE LOADER ICON
        $(document).ajaxStop(function () {
            $(".loadingImg").hide();
        });
        $("#Amount").autoNumeric('init');


        // REQUEST BALANCE
        var alertSuccess = document.getElementById("alert-success");
        var alertError = document.getElementById("alert-error");
        var balanceSummary = document.getElementById("balance-summary");


        function getBalance() {
            var errorText = $("#alert-error-text");

            var isValid = validateRequestParameters("#normal-div");

            /* Validate request parameter */
            if (isValid.error) {
                alertError.classList.remove("d-none");
                balanceSummary.classList.add("d-none");
                errorText.html(isValid.message);
            } else {
                alertError.classList.add("d-none");
                errorText.html(null);
                RequestBalance("#normal-div",isValid.data);
            }
        }

        /* Function to Validate request parameter */
        /*function validateTransferRequestParameters() {
            var inst = $("#InstitutionId").val();
            var subLevel = $("#InstitutionSubLevelId").val();
            var fundCat = $("#FundCategoryId").val();

            var isValid = {};
            if ((inst == null || inst == "" || inst == 0) && (subLevel == null || subLevel == "" || subLevel == 0) && (fundCat == null || fundCat == "" || fundCat == 0)) {
                return isValid = { error: true, message: "Pleas select all fields required to request balnce!" };
            } else if (inst == null || inst == "" || inst == 0) {
                return isValid = { error: true, message: "Please select institution..!" };
            } else if (subLevel == null || subLevel == "" || subLevel == 0) {
                return isValid = { error: true, message: "Please select Cost center..!" };
            } else if (fundCat == null || fundCat == "" || fundCat == 0) {
                return isValid = { error: true, message: "Please select fund category..!" };
            } else {
                var data = {
                    "InstitutionId": inst,
                    "InstitutionSubLevelId": subLevel,
                    "FundCodegoryId": fundCat
                }
                return isValid = { error: false, message: "success", data: data };
            }
        }*/

        function validateRequestParameters(selector) {
            var inst = $(selector+" #InstitutionId").val();
            var subLevel = $(selector+" #InstitutionSubLevelId").val();
            var fundCat = $(selector+" #FundCategoryId").val();

            var isValid = {};
            if ((inst == null || inst == "" || inst == 0) && (subLevel == null || subLevel == "" || subLevel == 0) && (fundCat == null || fundCat == "" || fundCat == 0)) {
                return isValid = { error: true, message:"Pleas select all fields required to request balnce!"};
            } else if (inst == null || inst == "" || inst == 0) {
                return isValid = { error: true, message: "Please select institution..!" };
            } else  if (subLevel == null || subLevel == "" || subLevel == 0) {
                return isValid = { error: true, message: "Please select Cost center..!" };
            } else if (fundCat == null || fundCat == "" || fundCat == 0) {
                return isValid = { error: true, message: "Please select fund category..!" };
            } else {
                var data = {
                    "InstitutionId": inst,
                    "InstitutionSubLevelId": subLevel,
                    "FundCodegoryId": fundCat
                }
                return isValid = { error: false, message: "success",data:data };
            }
        }

        var balance = 0;
        var currency = null;
        var newBalance = 0;
        function RequestBalance(selector,formData) {
            $(selector+" #save_button").prop('disabled', true);
            var url = '@Url.Action("GetBalance", "ContractCeiling")';

            var ajaxConfig = {
                type: "post",
                url: url,
                data: formData,
                success: function (response) {

                    var hasError = true;

                    $("#save_button").prop('disabled', false);

                    if (response.response == "Success") {
                        hasError = false;
                        balance = response.amount;
                        currency = response.currency

                        newBalance = balance;
                    }

                    if (hasError) {
                        alertError.classList.remove("d-none");
                        alertSuccess.classList.add("d-none");
                        balanceSummary.classList.add("d-none");
                    } else {
                        alertError.classList.add("d-none");
                        alertSuccess.classList.add("d-none");
                        balanceSummary.classList.remove("d-none");


                        /** updating view with received balance summaery **/
                        $("#normal-balance-value").html(balance);
                        $("#normal-balance-currency").html(currency);


                        $("#new-normal-balance-amount-text").html(newBalance);
                        $("#new-normal-balance-currency").html(currency);
                        $("#reducing-currency").html(currency);

                    }
                },
                error: function () {
                    console.log("ERROR HAS OCCURED")
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }


        var el = document.getElementById("new-balance-span");
        el.classList.remove("text-danger");
        el.classList.add("text-info");


        $("#reducedAmount").keyup(() => {

            var reduced = $("#reducedAmount").val();
            newBalance = (balance - reduced);
            if (newBalance == 0 || newBalance < 0) {
                el.classList.remove("text-success");
                el.classList.add("text-danger");
                newBalance = 0;
                $("#new-normal-balance-amount-text").html(newBalance);
            } else {

                el.classList.remove("text-danger");
                el.classList.add("text-success");
            }
            $("#new-normal-balance-amount-text").html(newBalance);
        });




        /* .......Handling transfer part .......*/

        var transferSuccessAlert = document.getElementById("transfer-success-alert");
        var transferErrorAlert = document.getElementById("transfer-error-alert");
        transferSuccessAlert.classList.add("d-none");
        transferErrorAlert.classList.add("d-none");


        var transferDetail = document.getElementById("transfer-details-content");
        /*transferDetail.classList.add("d-none");*/

        var transferBalanceSurmmaryContainer = document.getElementById("transfer-balace-summary-container");
        transferBalanceSurmmaryContainer.classList.add("d-none");


        function getBalanceForTransfer() {

            /*var inst = $("#transfer-div #InstitutionId").val();
            var subLevel = $("#transfer-div #InstitutionSubLevelId").val();
            var fundCat = $("#transfer-div #FundCategoryId").val();*/
            var transferErrorText = $("#transfer-error-text");

            var isValid = validateRequestParameters("#transfer-div");

            /* Validate request parameter */


            if (isValid.error) {
                transferErrorAlert.classList.remove("d-none");
                transferBalanceSurmmaryContainer.classList.add("d-none");
                transferErrorText.html(isValid.message);
            } else {
                transferErrorAlert.classList.add("d-none");
                transferErrorText.html(null);
                RequestTransferBalance("#transfer-div",isValid.data);
            }
        }


        var transferBalance = 0;
        var transferCurrency = null;
        var transferNewBalance = 0;



        function RequestTransferBalance(selector,formData) {
               $("#save_button").prop('disabled', true);
            var url = '@Url.Action("GetBalance", "ContractCeiling")';

            var ajaxConfig = {
                type: "post",
                url: url,
                data: formData,
                success: function (response) {

                    var hasError = true;

                    $(selector+" #save_button").prop('disabled', false);

                    if (response.response == "Success") {
                        hasError = false;
                        transferBalance = response.amount;
                        transferCurrency = response.currency

                        transferNewBalance = transferBalance;
                    }

                    if (hasError) {
                        transferErrorAlert.classList.remove("d-none");
                        transferSuccessAlert.classList.add("d-none");
                        transferBalanceSurmmaryContainer.classList.add("d-none");
                    } else {
                        transferErrorAlert.classList.add("d-none");
                        transferSuccessAlert.classList.add("d-none");
                        transferBalanceSurmmaryContainer.classList.remove("d-none");


                        /** updating view with received balance summaery **/
                        $("#current-transfer-amount").html(transferBalance);
                        $("#current-transfer-currency").html(transferCurrency);


                        $("#transfer-new-balancy-amount").html(transferNewBalance);
                        $("#transfer-new-balancy-currency").html(transferCurrency);
                        $("#transfer-reducing-currency").html(transferCurrency);

                    }
                },
                error: function () {
                    console.log("ERROR HAS OCCURED")
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }


        var newBalancySpan = document.getElementById("ts");
        var receivingCostCenter = document.getElementById("receivingCostCenter");
        receivingCostCenter.classList.add("d-none");

        $("#transferReducedAmount").keyup(() => {
            console.log(newBalancySpan);
            var reduced = $("#transferReducedAmount").val();
            console.log(reduced);
            transferNewBalance = (transferBalance - reduced);
            if (transferNewBalance == 0 || transferNewBalance < 0) {
                newBalancySpan.classList.remove("text-info");
                newBalancySpan.classList.add("text-danger");
                transferNewBalance = 0;
                $("#transfer-new-balancy-amount").html(transferNewBalance);
            } else {

                newBalancySpan.classList.remove("text-danger");
                newBalancySpan.classList.add("text-info");
            }
            $("#transfer-new-balancy-amount").html(transferNewBalance);
        });

        var transfers = [];
        var tableOfTransfer = document.getElementById("addedList");
        var collectedAmount = 0;
        $("#collected-amount").text(collectedAmount);

        $("#addToList").click(() => {
            var institution = $("#transfer-div #InstitutionId").find('option:selected').text().trim();
            var costCenter = $("#transfer-div #InstitutionSubLevelId").find('option:selected').text().trim();
            var fundCategory = $("#transfer-div #FundCategoryId").find('option:selected').text().trim();

            var reducedAmount = $("#transferReducedAmount").val();
            var tReason = $("#TransferCeilingDescription").val();

            if (reducedAmount == 0) {
                transferErrorAlert.classList.remove("d-none");
                $("#transfer-error-text").html("Please provide amount to be transfered")
                return;
            } else {
                transferErrorAlert.classList.add("d-none");
            }

            if (tReason == "" || tReason == null) {
                transferErrorAlert.classList.remove("d-none");
                $("#transfer-error-text").html("Please provide reason for transfer")
                return;
            } else {
                transferErrorAlert.classList.add("d-none");
            }

            if ((institution != null && institution != "" && institution != 0) &&
                (costCenter != null && costCenter != "" && costCenter != 0) &&
                (fundCategory != null && fundCategory != "" && fundCategory != 0)) {

                var instId = $("#transfer-div #InstitutionId").val();
                var subLevelId = $("#transfer-div #InstitutionSubLevelId").val();
                var fundCatId = $("#transfer-div #FundCategoryId").val();
                var trans = {
                    "uuid": generateUUID(),
                    "InstitutionId": instId,
                    "institutionName": institution,
                    "InstitutionSubLevelId": subLevelId,
                    "costCenter": costCenter,
                    "FundCategoryId": fundCatId,
                    "fundCategory": fundCategory,
                    "Amount": reducedAmount,
                    "reason": tReason
                }
                collectedAmount = (parseInt(collectedAmount) + parseInt(reducedAmount));
                $("#collected-amount").text(null);
                $("#collected-amount").text(collectedAmount);
                transfers.push(trans);

                receivingCostCenter.classList.remove("d-none");
                var i = 0;
                tableOfTransfer.innerHTML += '<tr><th scope = "row">' + (i+1) + '</th><td>' + trans.institutionName + '</td><td>' + trans.costCenter + '</td><td>' + trans.Amount + '</td><td><span class= "btn btn-outline-danger" onclick="remove(' + i + ')"> <i class="bi bi-x-square"></i></span ></td></tr>';

            } else {
                transferErrorAlert.classList.remove("d-none");
                $("#transfer-error-text").html("Please provide Transfer Details")
                return;

            }

        });


        function generateUUID() { // Public Domain/MIT
            var d = new Date().getTime();//Timestamp
            var d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now() * 1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16;//random number between 0 and 16
                if (d > 0) {//Use timestamp until depleted
                    r = (d + r) % 16 | 0;
                    d = Math.floor(d / 16);
                } else {//Use microseconds since page-load if supported
                    r = (d2 + r) % 16 | 0;
                    d2 = Math.floor(d2 / 16);
                }
                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
        }


        function remove(index) {
            console.log("T", transfers);
            transferList = transfers.splice(index);
            console.log("TR ", transferList);

            tableOfTransfer.innerHTML = null;
            for (i = 0; i < transferList.length; i++) {
                var sNo = i + 1;
                tableOfTransfer.innerHTML += '<tr><th scope = "row">' + sNo + '</th><td>' + transferList[i].institutionName + '</td><td>' + transferList[i].costCenter + '</td><td>' + transferList[i].Amount + '</td><td><span class= "btn btn-outline-danger" onclick="remove(' + i + ')"> <i class="bi bi-x-square"></i></span ></td></tr>';

            }

        }

        function onTransfer() {

            var toInstitution = $("#to #InstitutionId").val();
            var toCostCenter = $("#to #InstitutionSubLevelId").val();
            var toFundCategory = $("#to #FundCategoryId").val();

            if (transfers.length < 1) {
                transferErrorAlert.classList.remove("d-none");
                $("#transfer-error-text").html("Please provide Transfer Details")
                return;
            } else {
                transferErrorAlert.classList.add("d-none");
                $("#transfer-error-text").html(null)
            }
            var data = {
                "from": transfers,
                "to": {
                    "InstitutionId": toInstitution,
                    "InstitutionSubLevelId": toCostCenter,
                    "FundCategoryId": toFundCategory,
                    "Amount": collectedAmount
                }
            }

            console.log(data);

        }
    </script>
}


