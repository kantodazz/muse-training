@model IFMIS.Areas.IFMISTZ.Models.CreateMuseAssetMappingVM

<div id="divLoader"></div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Asset Mapping </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form name="createAssetMappingForm" id="createAssetMappingForm">

                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">

                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.GFSDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.GFSDescription, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.GFSDescription, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.CostOpening, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CostOpening, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CostOpening, "", new { @class = "text-danger" })
                                        </div>

                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CostAdditionMonetary, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CostAdditionMonetary, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CostAdditionMonetary, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.CostAdditionNonMonetary, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CostAdditionNonMonetary, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CostAdditionNonMonetary, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CostTransfer, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CostTransfer, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CostTransfer, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.CostAdjustment, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CostAdjustment, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CostAdjustment, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CostDisposal, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CostDisposal, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CostDisposal, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.DeprOpening, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.DeprOpening, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DeprOpening, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ImpOpening, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ImpOpening, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ImpOpening, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.IntangOpening, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.IntangOpening, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.IntangOpening, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DeprChargefor, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.DeprChargefor, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DeprChargefor, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.DeprChargeforImp, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.DeprChargeforImp, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DeprChargeforImp, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                   
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DeprTransfer, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.DeprTransfer, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DeprTransfer, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.DeprAdjustment, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.DeprAdjustment, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DeprAdjustment, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                 

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DeprDisposal, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.DeprDisposal, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DeprDisposal, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.NonMonetaryRevenue, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.NonMonetaryRevenue, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.NonMonetaryRevenue, "", new { @class = "text-danger" })
                                        </div>

                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CommonCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CommonCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CommonCode, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.ReportType, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.ReportType, Model.ReportTypes, "Select Report Type", new { @class = "select2 form-control" })
                                            @Html.ValidationMessageFor(model => model.ReportType, "", new { @class = "text-danger" })
                                        </div>

                                    </div>

                                    <div class="form-actions">
                                        <div class="row">
                                            <div class="col-md-offset-2 col-md-8">
                                                <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                    <i class="fa fa-save"></i>
                                                    Save
                                                </button>
                                                <a href="@Url.Action("PendingAssetMapping","MuseAssetMappingtbls")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                    <i class="fa fa-arrow-left"></i>
                                                    Back
                                                </a>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section pagespecific{
    <script>

        $("#btnSave").click(function () {

            debugger

            $('#btnSave').prop("disabled", true);

            $("#divLoader").show();

            if (!$("#createAssetMappingForm").valid()) {
                $('#btnSave').prop("disabled", false);
                $("#divLoader").hide();
                return false;
            }

            var token = $("[name='__RequestVerificationToken']").val();
            var data = {
                __RequestVerificationToken: token,
                GFSDescription: $('#GFSDescription').val(),
                CostOpening: $('#CostOpening').val(),
                CostAdditionMonetary: $('#CostAdditionMonetary').val(),
                CostAdditionNonMonetary: $('#CostAdditionNonMonetary').val(),
                CostTransfer: $('#CostTransfer').val(),
                CostAdjustment: $('#CostAdjustment').val(),
                CostDisposal: $('#CostDisposal').val(),
                DeprOpening: $('#DeprOpening').val(),
                ImpOpening: $('#ImpOpening').val(),
                IntangOpening: $('#IntangOpening').val(),
                DeprChargefor: $('#DeprChargefor').val(),
                DeprChargeforImp: $('#DeprChargeforImp').val(),
                DeprTransfer: $('#DeprTransfer').val(),
                DeprAdjustment: $('#DeprAdjustment').val(),
                DeprDisposal: $('#DeprDisposal').val(),
                NonMonetaryRevenue: $('#NonMonetaryRevenue').val(),
                CommonCode: $('#CommonCode').val(),
                ReportType: $('#ReportType').val(),

            }

            var url = '@Url.Action("CreateAssetMapping", "MuseAssetMappingtbls")';
            $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(data),
                data: data,
                dataType: "JSON",
                //contentType: "application/json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (response) {
                    //check is successfully save to database
                    if (response == "Success") {
                        //will send status from server side
                        swal({
                            text: "successfully saved.",
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            window.location = '@Url.Action("PendingAssetMapping", "MuseAssetMappingtbls")';
                        });
                    }
                    else {
                        swal({
                            text: response,
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function () {
                    swal({
                        text: "Error on saving asset mapping, try again.",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $('#btnSave').prop("disabled", false);
                    $("#divLoader").hide();
                }
            });
        });



        $("#CostOpening").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CostOpening").val(val.substring(0, 8));
            }
        });
        $("#CostAdditionMonetary").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CostAdditionMonetary").val(val.substring(0, 8));
            }
        });
        $("#CostAdditionNonMonetary").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CostAdditionNonMonetary").val(val.substring(0, 8));
            }
        });
        $("#CostTransfer").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CostTransfer").val(val.substring(0, 8));
            }
        });

        $("#CostAdjustment").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CostAdjustment").val(val.substring(0, 8));
            }
        });
        $("#CostDisposal").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CostDisposal").val(val.substring(0, 8));
            }
        });
        $("#DeprOpening").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#DeprOpening").val(val.substring(0, 8));
            }
        });
        $("#ImpOpening").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#ImpOpening").val(val.substring(0, 8));
            }
        });


        $("#IntangOpening").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#IntangOpening").val(val.substring(0, 8));
            }
        });
        $("#DeprChargefor").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#DeprChargefor").val(val.substring(0, 8));
            }
        });
        $("#DeprChargeforImp").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#DeprChargeforImp").val(val.substring(0, 8));
            }
        });
        $("#DeprTransfer").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#DeprTransfer").val(val.substring(0, 8));
            }
        });


        $("#DeprAdjustment").on("keyup input paste cut", function () {
                var val = this.value
                if (val.length > 8) {
                    $("#DeprAdjustment").val(val.substring(0, 8));
                }
        });

        $("#DeprDisposal").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#DeprDisposal").val(val.substring(0, 8));
            }
        });
        $("#NonMonetaryRevenue").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#NonMonetaryRevenue").val(val.substring(0, 8));
            }
        });
        $("#CommonCode").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#CommonCode").val(val.substring(0, 8));
            }
        });

    </script>
}
