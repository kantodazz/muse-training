@model IFMIS.Areas.IFMISTZ.Models.InventoryIssuingVM
@if (Model.Inventories.Count() == 0)
{
    <div style="padding-bottom:10px" id="infoPanel">
        <div class="info-box"><strong>No any available inventory to your department from the selected Item Card </strong></div>
    </div>
}
else
{
    using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitIssuing(this)" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.SourceId)
        @Html.HiddenFor(model => model.InventoryIssuingBulkId)
        @*<div class="form-group">

            @Html.LabelFor(model => model.SubVote, htmlAttributes: new { @class = "control-label   col-md-2" })
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.SubVote, Model.SubVotesList, "Select ", new { @class = "form-control select2", @required = "required" })
                @Html.ValidationMessageFor(model => model.SubVote, "", new { @class = "text-danger" })
            </div>

        </div>*@

        <table class="table  table-bordered table-hover table-condensed">
            <caption style="text-align:center">
                @Html.DisplayFor(model => model.ItemName)
            </caption>
            <thead>
                <tr>
                    <th style="text-align:right;width:4%"></th>
                    <th style="text-align:left">Inventory Code</th>
                    <th style="text-align:left">Item Name</th>
                    <th style="text-align:center">Quantity</th>
                    <th style="text-align:left">UOM</th>
                    <th style="text-align:right">Unit Price</th>
                    <th style="text-align:right">Inventory Value</th>
                    <th style="text-align:center">Issuing</th>

                </tr>
            </thead>

            <tbody>

                @for (var i = 0; i < Model.Inventories.Count(); i++)
                {
                    var j = i + 1;

                    <tr>
                        <td style="text-align:right">
                            @j
                        </td>
                        <td style="text-align:left">
                            @Html.DisplayFor(modelItem => Model.Inventories[i].InventoryCode)

                        </td>
                        <td style="text-align:left">
                            @Html.DisplayFor(modelItem => Model.Inventories[i].ItemName)
                        </td>
                        <td style="text-align:center">
                            @Html.DisplayFor(modelItem => Model.Inventories[i].Balance)
                        </td>

                        <td style="text-align:left">
                            @Html.DisplayFor(modelItem => Model.Inventories[i].UOM)

                        </td>

                        <td style="text-align:right">
                            @Html.DisplayFor(modelItem => Model.Inventories[i].UnitPrice)

                        </td>
                        <td style="text-align:right">
                            @Html.DisplayFor(modelItem => Model.Inventories[i].InventoryValue)

                        </td>
                        <td style="text-align:center">
                            @if (i == 0)
                            {
                                @Html.EditorFor(modelItem => Model.Inventories[i].IssuedQuantity, new { htmlAttributes = new { @class = "form-control", style = "width:80px", @autocomplete = "off", @id = @Model.Inventories[i].Position, @max = @Model.Inventories[i].Balance, @onkeyup = "quantityChanged(this)" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelItem => Model.Inventories[i].IssuedQuantity, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled", style = "width:80px", @autocomplete = "off", @id = @Model.Inventories[i].Position, @max = @Model.Inventories[i].Balance, @onkeyup = "quantityChanged(this)" } })
                            }
                            @Html.HiddenFor(modelItem => Model.Inventories[i].InventoryDetailId)
                        </td>
                    </tr>
                }
                <tfooter>
                    <tr>
                        <th style="text-align:right" colspan="3">Total</th>
                        <th style="text-align:right">@Model.Inventories.Select(a => a.Balance).DefaultIfEmpty(0).Sum()</th>
                        <th colspan="2"></th>
                        <th style="text-align:right">@Convert.ToDecimal(Model.Inventories.Select(a => a.InventoryValue).DefaultIfEmpty(0).Sum()).ToString("#,##0.00/=")</th>
                        <th></th>
                    </tr>
                </tfooter>
                <tfooter>
                    <tr>
                        <th style="text-align:right" colspan="7"></th>
                        <th style="text-align:center">
                            <button type="submit" id="save_button" class="btn btn-info" style="float: left; margin-left: 5px">
                                <i class="glyphicon glyphicon-floppy-disk"></i> Save
                            </button>
                        </th>
                    </tr>
                </tfooter>
            </tbody>
        </table>

    }
}


<script type="text/javascript">

function quantityChanged(e) {
    var max_value = parseFloat(e.max);
    var entered_value = parseFloat(e.value.split(",").join(""));
    var id = e.id;
    var idVal = parseInt(id);
    if (entered_value < 0) {
        swal("Quantity can not be negative ");
        return;
    }

    if (entered_value <= max_value) {

        if (entered_value == max_value) {

            if (idVal > 1) {
                idVal = idVal - 1;
                $("#" + idVal).prop('disabled', false);
            }
        }
        else {
            if (idVal > 1) {
                idVal = idVal - 1;
                disableFields(idVal);
            }
        }

    } else {
        if (entered_value > 0) {
            swal("Quantity can not exceed " + max_value);
        }

        e.value = "";
        if (idVal > 1) {
            idVal = idVal - 1;
            disableFields(idVal);
        }
    }
}

    function disableFields(num) {
        for (var i = num; i > 0; i--) {
            if ($("#" + i).prop('disabled') == false) {
                $("#" + i).val("");
                $("#" + i).prop('disabled', true);
            }
        }
    }

function SubmitIssuing(formData) {
           $("#save_button").prop('disabled', true);
            var url = '@Url.Action("SaveBulkIssuing", "InventoriesIssuing")';
            var ajaxConfig = {
            type: "post",
            url: url,
            data: new FormData(formData),
            success: function (response) {
            $("#save_button").prop('disabled', false);
            if (response == "Success") {
            swal("Data saved successfully", { icon: "success" })
            .then((value) => {
            var url = '@Url.Action("PendingRequisition", "InventoriesIssuing")';
            window.location.replace(url);
            });
            }
            else if (response == "Processed") {
                  swal("Data saved successfully", { icon: "success" })
                  .then((value) => {
                   location.reload();
                  });
            }
            else {
            swal(response);
            }
            }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
            ajaxConfig["contentType"] = false;
            ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
            }

</script>

