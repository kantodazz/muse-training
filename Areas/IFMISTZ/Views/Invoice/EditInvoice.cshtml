@model IFMIS.Areas.IFMISTZ.Models.EditInvoiceVM

<div id="divLoader">
</div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

            <!-- PAGE HEADER -->
            <!--
            <i class="fa-fw fa fa-pencil-square-o"></i>
            Payments
            <span>
            >
            Bills
            </span>
            -->
            </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Edit Invoice </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form action="CreateInvoice" method="post" class="form-horizontal" name="invoiceForm" id="invoiceForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.PayeeDetailId)
                                @Html.HiddenFor(model => model.PayeeCode)
                                @*@Html.HiddenFor(model => model.Payeename)*@
                                @Html.HiddenFor(model => model.PayeeBankAccount)
                                @Html.HiddenFor(model => model.PayeeBankName)
                                @Html.HiddenFor(model => model.PayeeAccountName)
                                @Html.HiddenFor(model => model.PayeeAddress)
                                @Html.HiddenFor(model => model.PayeeBIC)
                                @Html.HiddenFor(model => model.InvoiceSummaryId)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.InvoiceType, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.InvoiceType, Model.InvoiceTypes, "Select Invoice Type", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.InvoiceType, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.InvoiceNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group" id="divContractReference">
                                    @*@Html.LabelFor(model => model.ContractNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.ContractNumber, Model.InvoiceTypes, "Select ", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContractNumber, "", new { @class = "text-danger" })
            </div>*@

                                    @Html.LabelFor(model => model.ContractNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ContractNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ContractNumber, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ContractAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @*@Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })*@
                                        <div class='input-group'>
                                            @Html.EditorFor(model => model.ContractAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                            <span class="input-group-addon">
                                                TZS
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ContractAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" id="divLPOReference">

                                    @Html.LabelFor(model => model.LPONumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.LPONumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LPONumber, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.LPOAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @*@Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })*@
                                        <div class='input-group'>
                                            @Html.EditorFor(model => model.LPOAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                            <span class="input-group-addon">
                                                TZS
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.LPOAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.InvoiceAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        <div class='input-group'>
                                            @Html.EditorFor(model => model.InvoiceAmount, new { htmlAttributes = new { @class = "form-control" } })
                                            <span class="input-group-addon">
                                                TZS
                                            </span>
                                            @Html.ValidationMessageFor(model => model.InvoiceAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.InvoiceDate, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @*<div class="form-group">


        </div>*@

                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayeeName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        <div class='input-group'>
                                            @*<input type="text" readonly id="PayeeName" placeholder="No Payee Selected" style="width:360px" />*@
                                            @Html.EditorFor(model => model.PayeeName, new { htmlAttributes = new { @class = "form-control" } })
                                            <span span class="input-group-addon" onclick="SearchPayee()">
                                                <i class="fa fa-search search-icon"></i>
                                            </span>
                                        </div>
                                    </div>

                                    @Html.LabelFor(model => model.PayeeType, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.PayeeType, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.PayeeType, "", new { @class = "text-danger" })

                                    </div>

                                </div>

                                <div class="form-group">

                                    @Html.LabelFor(model => model.InvoiceDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.InvoiceDescription, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.InvoiceDescription, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="form-group" id="divIsBudgetedInvoice">

                                    @Html.LabelFor(model => model.IsBudgetedInvoice, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">

                                        <div class="col-md-4">
                                            @Html.CheckBoxFor(model => model.IsBudgetedInvoice)
                                            @*@Html.DisplayNameFor(model => model.IsBudgetedInvoice)*@
                                        </div>
                                    </div>


                                    @Html.LabelFor(model => model.SubBudgetClassCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.SubBudgetClassCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClassCode, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div id="divCoa">
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <a href="#" onclick="getGlItems()">
                                                Add GL Items(<span id="glItemsCount">0</span>)
                                            </a>
                                        </div>
                                    </div>

                                    <hr />

                                    <div class="alert alert-info" role="alert">
                                        GL Items(s) <span class="badge" id="txtGlItems">0</span>, Total Amount <span class="badge" id="txtTotalAmount">0</span>
                                    </div>
                                </div>

                                <hr />
                                <table class="table table-bordered table-condensed table-hover table-responsive table-striped">
                                    <thead>
                                        <tr>
                                            <th colspan="4">Attachments</th>
                                        </tr>
                                        <tr>
                                            <th>#</th>
                                            <th>Attachment Name</th>
                                            <th>Preview</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int i = 0;
                                        }
                                        @foreach (var item in Model.InvoiceAttachments)
                                        {
                                            i++;
                                            <tr>
                                                <td>@i</td>
                                                <td>@item.AttachmentName</td>
                                                <td style="text-align: center">
                                                    <a href="@Url.Action("ViewAttachment", "Invoice", new { id = item.InvoiceAttachmentId })" target="_blank">
                                                        <span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span>
                                                    </a>
                                                </td>
                                                <td style="text-align: center">
                                                    <a href="#" onclick="removeAttachment(@item.InvoiceAttachmentId)">
                                                        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <hr />


                                <hr />
                                <div id="divAttachments"></div>

                                <fieldset class="scheduler-border">
                                    <legend class="scheduler-border"><b>Add Attachments</b></legend>
                                    <div class="form-group">
                                        @Html.Label("Attachment Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.Editor("AttachmentName", new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                        </div>

                                        @Html.Label("File Name", htmlAttributes: new { @class = "control-label col-md-1" })
                                        <div class="col-md-3">
                                            @Html.Editor("FileName", new { htmlAttributes = new { @class = "form-control", @type = "file" } })
                                        </div>
                                        <div class="col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnAddAttachment">
                                                <i class="fa fa-plus"></i>
                                                Add
                                            </button>
                                        </div>
                                    </div>
                                </fieldset>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingInvoice", "Invoice" )" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
<!-- Start of Aproval modal -->
<div class="modal fade" id="divModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 80%">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add GL Item</h4>
            </div>
            <div class="modal-body" id="divModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-success role-save" id="btnAddGlItem" style="float: left" onclick="addGlItems()">Add</button>
                <button class="btn btn-default role-cancel" style="float: left" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!----------- Search Payee ----------------->
<div class="modal fade" id="payeeModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">

            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Payee</h3>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container submit-btn" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." id="searchbox">
                        </div>
                    </div>
                </div>
                <table class="table" id="dt_search_payee">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>PaymentId</th>
                            <th>BIC</th>
                            <th>Payee Code</th>
                            <th>Payee Name</th>
                            <th>Account Name</th>
                            <th>Bank Name</th>
                            <th>Bank Account No</th>
                            <th>Payee Type</th>
                            <th>Currency</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>

<!--- HIDDEN SECTION -->
<section id="widget-grid" style="visibility:hidden">
    <div class="row">
        <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-editbutton="false">

            <header style="background-color:#2196F3">
                <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                <h2>Payee Details</h2>
            </header>

            <div>
                <div class="widget-body " style="padding-top:10px">
                    <a class="submit-btn" onclick="SearchPayee()" href="#">
                        <i class="fa fa-search search-icon"></i>
                        Search Payee
                    </a>
                    <table id="dt_selected_payee" class="table table-striped table-bordered table-hover table-condensed" width="100%"></table>
                </div>
                <!-- end widget content -->

            </div>
            <!-- end widget div -->

        </div>
    </div>
</section>

@section pagespecific{
    <script>
        $(document).ready(function () {
            $("#dt_search_payee_wrapper .dt-toolbar").remove();
        });

        $("#divContractReference").hide();
        $("#divLPOReference").hide();
        $("#divIsBudgetedInvoice").hide();
        $("#divCoa").hide();


        $('#InvoiceType').on("change", function () {

            var invoiceType = $("#InvoiceType").val();

            if (invoiceType == "Contract") {

                $("#divContractReference").show();
                $("#divLPOReference").hide();
                $("#divIsBudgetedInvoice").hide();
                $("#divCoa").hide();

            } else if (invoiceType == "LPO") {

                $("#divLPOReference").show();
                $("#divContractReference").hide();
                $("#divIsBudgetedInvoice").hide();
                $("#divCoa").hide();

            } else if (invoiceType == "Other") {

                $("#divContractReference").hide();
                $("#divLPOReference").hide();
                $("#divIsBudgetedInvoice").show();
                $("#divCoa").show();
                //$("#divIsBudgetedInvoice").hide();
                //$("#divCoa").hide();

            } else {

                $("#divContractReference").hide();
                $("#divLPOReference").hide();
                $("#divIsBudgetedInvoice").hide();
                $("#divCoa").hide();

            }

        });

        function SearchPayee() {
            $('#payeeModal').modal('show');
        }

        let glItems = [];

        $(function () {

            $("#InvoiceAmount").autoNumeric('init');
            $("#LPOAmount").autoNumeric('init');
            $("#ContractAmount").autoNumeric('init');

            $("#InvoiceDate")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showOn: "both",
                buttonImage: '@Url.Content("~/Content/img/calendar.gif")',
                maxDate: "+0D"
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select Date",
                text: false
            })
            .addClass("btn btn-default")
            .wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });
        });

         $("#SubBudgetClassCode").select2({
             minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
             width: 'resolve',   // to adjust proper width of select2 wrapped elements
             placeholder: 'Search Sub Budget Class',
             allowClear: false,
             initSelection: function (element, callback) {
                 var id = $(element).val();
                 if (id !== "") {
                     $.ajax('@Url.Action("GetSelectedSubBudgetClass", "Invoice")', {
                         data: { id: id },
                         dataType: "json"
                     }).done(function (data) {
                         callback(data);
                     });
                 }
             },
             ajax: {
                 url: '@Url.Action("GetSubBudgetClasses", "Invoice")', // Controller - Select2Demo and Action -AccessRemoteData
                 type: "GET",
                 dataType: 'json',
                 data: function (term) {
                     return {
                         term: term
                     };
                 },
                 results: function (data, page) {
                     return { results: data.subBudgetClasses }; // data.CountryList returning json data from Controlle
                 }
             }
         });

        var dt_selected_payee = $('#dt_selected_payee').dataTable({
            "data": [],
            "columnDefs": [{
                "targets": [0, 1],
                "visible": false
            }],
            "columns": [
                { title: "Payee DetailId" },
                { title: "Payee BIC" },
                { title: "Payee Code" },
                { title: "Payee Name" },
                { title: "Account Name" },
                { title: "Bank Name" },
                { title: "Bank Account No" },
                { title: "Payee Type" },
                { title: "Currency" }
            ]
        });

        var dt_search_payee = $('#dt_search_payee').dataTable({
            "aoColumnDefs": [{ "bVisible": false, "aTargets": [1, 2] }],
        });

        $("#searchbox").on("keyup search input paste cut", function () {
            if (!this.value) {
                dt_search_payee.fnClearTable();
            } else {
                searchPayeeTableUpdate(this.value);
            }
        });

        function searchPayeeTableUpdate(search) {
            var url = '@Url.Action("GetPayee", "PaymentVoucher")';
            $.ajax({
                type: "get",
                url: url + "/?search=" + search + "",
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    data = response.data;
                    dt_search_payee.fnClearTable();
                    for (var i = 0; i < data.length; i++) {
                        dt_search_payee.fnAddData([i+1,
                           data[i]["PayeeDetailId"],
                            data[i]["BIC"],
                            data[i]["PayeeCode"],
                            data[i]["PayeeName"],
                            data[i]["AccountName"],
                           data[i]["BankName"],
                           data[i]["Accountnumber"],
                           data[i]["PayeeType"],
                           data[i]["Currency"],
                           '<a href="#" onclick="payeeClicked(' + i + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                        ]);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }


        var isValidPayee = false;
        function payeeClicked(rowId) {
            var data = dt_search_payee.DataTable().rows().data();
            console.log(data);
            var row = data[rowId];

            dt_selected_payee.fnClearTable();
           /* $("#PayeeName").val("Verifying...");*/
            dt_selected_payee.fnAddData([row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]]);
            $("#PayeeDetailId").val(row[1]); //1
            $("#PayeeCode").val(row[3]);//3
            $("#PayeeName").val(row[4]);//4
            $("#PayeeBankAccount").val(row[7]);//7
            $("#PayeeBankName").val(row[6]);//6
            $("#PayeeAccountName").val(row[5]);//5
            $("#PayeeAddress").val(row[8]);//8
            $("#PayeeBIC").val(row[2]);//2
            $("#PayeeType").val(row[8]);//8
            $("#payeeModal").modal("hide");
        }


        var getGlItems = function () {
            $("#divLoader").show();
            var sbc = $("#SubBudgetClassCode").val();
            var totalAmount = $("#InvoiceAmount").val();
            var applyDate = $("#InvoiceDate").val();
            var url = '@Url.Action("GetGlItems", "Invoice")';

            $("#divModalBody").load(url, { sbc: sbc, totalAmount: totalAmount, applyDate: applyDate, invoiceDetailVMs: glItems, paymentCategory: "Invoice" }, function (responseText, statusText, jqXHR) {
                $("#tblGlItems").DataTable();
                $("#divModal").modal("show");
                $("#divLoader").hide();
            });
        };



        var addGlItems = function () {
            debugger
            var i = 1;
            glItems = [];
            let totalExpensedAmount = 0;
            var data = $('#tblGlItems').dataTable().fnGetNodes();
            $(data).each(function () {
                fundingRefNo = $(this).find('input[name="FundingRefNo' + i + '"]').val();
                glAccount = $(this).find('input[name="GlAccount' + i + '"]').val();
                glAccountDesc = $(this).find('input[name="GlAccountDesc' + i + '"]').val();
                gfsCode = $(this).find('input[name="GfsCode' + i + '"]').val();
                gfsCodeCategory = $(this).find('input[name="GfsCodeCategory' + i + '"]').val();
                voteDesc = $(this).find('input[name="VoteDesc' + i + '"]').val();
                geographicalLocationDesc = $(this).find('input[name="GeographicalLocationDesc' + i + '"]').val();
                trDesc = $(this).find('input[name="TrDesc' + i + '"]').val();
                subBudgetClassDesc = $(this).find('input[name="SubBudgetClassDesc' + i + '"]').val();
                projectDesc = $(this).find('input[name="ProjectDesc' + i + '"]').val();
                serviceOutputDesc = $(this).find('input[name="ServiceOutputDesc' + i + '"]').val();
                activityDesc = $(this).find('input[name="ActivityDesc' + i + '"]').val();
                fundTypeDesc = $(this).find('input[name="FundTypeDesc' + i + '"]').val();
                cofogDesc = $(this).find('input[name="CofogDesc' + i + '"]').val();
                subVote = $(this).find('input[name="SubVote' + i + '"]').val();
                subVoteDesc = $(this).find('input[name="SubVoteDesc' + i + '"]').val();
                tr = $(this).find('input[name="TR' + i + '"]').val();
                costCentre = $(this).find('input[name="CostCentre' + i + '"]').val();
                costCentreDesc = $(this).find('input[name="CostCentreDesc' + i + '"]').val();
                fundBalance = $(this).find('input[name="FundBalance' + i + '"]').val();
                expensedAmount = $(this).find('input[name="ExpensedAmount' + i + '"]').val();
                facility = $(this).find('input[name="Facility' + i + '"]').val();
                facilityDesc = $(this).find('input[name="FacilityDesc' + i + '"]').val();
                vote = $(this).find('input[name="Vote' + i + '"]').val();
                geographicalLocation = $(this).find('input[name="GeographicalLocation' + i + '"]').val();
                project = $(this).find('input[name="Project' + i + '"]').val();
                serviceOutput = $(this).find('input[name="ServiceOutput' + i + '"]').val();
                activity = $(this).find('input[name="Activity' + i + '"]').val();
                fundType = $(this).find('input[name="FundType' + i + '"]').val();
                cOFOG = $(this).find('input[name="COFOG' + i + '"]').val();
                fundingSource = $(this).find('input[name="FundingSource' + i + '"]').val();

                glItems.push({
                    FundingRefNo: fundingRefNo,
                    GlAccount: glAccount,
                    GlAccountDesc: glAccountDesc,
                    GfsCode: gfsCode,
                    GfsCodeCategory: gfsCodeCategory,
                    VoteDesc: voteDesc,
                    GeographicalLocationDesc: geographicalLocationDesc,
                    TrDesc: trDesc,
                    SubBudgetClassDesc: subBudgetClassDesc,
                    ProjectDesc: projectDesc,
                    ServiceOutputDesc: serviceOutputDesc,
                    ActivityDesc: activityDesc,
                    FundTypeDesc: fundTypeDesc,
                    CofogDesc: cofogDesc,
                    SubVote: subVote,
                    SubVoteDesc: subVoteDesc,
                    TR: tr,
                    CostCentre: costCentre,
                    CostCentreDesc: costCentreDesc,
                    Facility: facility,
                    FacilityDesc: facilityDesc,
                    Vote: vote,
                    GeographicalLocation: geographicalLocation,
                    Project: project,
                    ServiceOutput: serviceOutput,
                    Activity: activity,
                    FundType: fundType,
                    COFOG: cOFOG,
                    FundingSource: fundingSource,
                    FundBalance: fundBalance,
                    ExpensedAmount: expensedAmount == "" ? 0 : expensedAmount,
                });

                i++;
            })

            $.each(glItems, function (key, value) {
                var expensedAmount = value.ExpensedAmount;
                if (isNaN(expensedAmount)) {
                    expensedAmount = expensedAmount.replace(/,/g, "")
                }

                if (expensedAmount == "" || expensedAmount == null) {
                    expensedAmount = "0";
                }

                totalExpensedAmount = parseFloat(totalExpensedAmount) + parseFloat(expensedAmount);
            });

            $("#glItemsCount").html(numeral(glItems.filter(a => a.ExpensedAmount != "").filter(a => a.ExpensedAmount != "0.00").length).format("0,0"));
            $('#txtGlItems').html(numeral(glItems.filter(a => a.ExpensedAmount != "").filter(a => a.ExpensedAmount != "0.00").length).format("0,0"));
            $('#txtTotalAmount').html(numeral(totalExpensedAmount).format("0, 0.00"));

            $("#divModal").modal("hide");
        };


        $("#LPONumber").select2({
            minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
            width: 'resolve',   // to adjust proper width of select2 wrapped elements
            placeholder: 'Search LPO',
            allowClear: false,
            initSelection: function (element, callback) {
                var id = $(element).val();
                if (id !== "") {
                    $.ajax('@Url.Action("GetSelectedLPO", "Invoice")', {
                        data: { id: id },
                        dataType: "json"
                    }).done(function (data) {
                        callback(data);
                    });
                }
            },
            ajax: {
                url: '@Url.Action("GetSelectedLPO", "Invoice")', // Controller - Select2Demo and Action -AccessRemoteData
                type: "GET",
                dataType: 'json',
                data: function (term) {
                    return {
                        term: term
                    };
                },
                results: function (data, page) {
                    return { results: data.subBudgetClasses }; // data.CountryList returning json data from Controlle
                }
            }
        });

        $("#LPONumber").change(function () {

            var lpoNo = $("#LPONumber").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetlpoInfo", "Invoice")',
                data: { id: lpoNo },
                success: function (data, status, jqXHR) {
                    if (data.success) {

                        $("#LPOAmount").val(data.contractAmount);

                        $("#PayeeDetailId").val(data.payeeDetailId); //1
                        $("#PayeeCode").val(data.payeeCode);//3
                        $("#PayeeName").val(data.payeeName);//4
                        $("#PayeeBankAccount").val(data.payeeBankAccount);//7
                        $("#PayeeBankName").val(data.payeeBankName);//6
                        $("#PayeeAccountName").val(data.payeeAccountName);//5
                        $("#PayeeAddress").val(data.payeeAddress);//8
                        $("#PayeeBIC").val(data.payeeBIC);//2
                        $("#PayeeType").val(data.payeeType);//8



                    } else {
                        swal({
                            text: "An error occurred while processing your request, contact system support",
                            icon: "warning",
                            button: "OK",
                        }).then(function () {
                            //location.reload();
                        });
                    }
                },
                error: function () {
                    swal({
                        text: "An error occurred while processing your request, contact system support",
                        icon: "error",
                        button: "OK",
                    }).then(function () {
                        //location.reload();
                    });
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            })
        });


        $("#ContractNumber").select2({
             minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
             width: 'resolve',   // to adjust proper width of select2 wrapped elements
             placeholder: 'Search LPO',
             allowClear: false,
             initSelection: function (element, callback) {
                 var id = $(element).val();
                 if (id !== "") {
                     $.ajax('@Url.Action("GetSelectedContract", "Invoice")', {
                         data: { id: id },
                         dataType: "json"
                     }).done(function (data) {
                         callback(data);
                     });
                 }
             },
             ajax: {
                 url: '@Url.Action("GetSelectedContract", "Invoice")', // Controller - Select2Demo and Action -AccessRemoteData
                 type: "GET",
                 dataType: 'json',
                 data: function (term) {
                     return {
                         term: term
                     };
                 },
                 results: function (data, page) {
                     return { results: data.subBudgetClasses }; // data.CountryList returning json data from Controlle
                 }
             }
        });



        $("#ContractNumber").change(function () {

            var contractNo = $("#ContractNumber").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetContractInfo", "Invoice")',
                data: { id: contractNo },
                success: function (data, status, jqXHR) {
                    if (data.success) {

                        $("#ContractAmount").val(data.contractAmount);

                        $("#PayeeDetailId").val(data.payeeDetailId); //1
                        $("#PayeeCode").val(data.payeeCode);//3
                        $("#PayeeName").val(data.payeeName);//4
                        $("#PayeeBankAccount").val(data.payeeBankAccount);//7
                        $("#PayeeBankName").val(data.payeeBankName);//6
                        $("#PayeeAccountName").val(data.payeeAccountName);//5
                        $("#PayeeAddress").val(data.payeeAddress);//8
                        $("#PayeeBIC").val(data.payeeBIC);//2
                        $("#PayeeType").val(data.payeeType);//8



                    } else {
                        swal({
                            text: "An error occurred while processing your request, contact system support",
                            icon: "warning",
                            button: "OK",
                        }).then(function () {
                            //location.reload();
                        });
                    }
                },
                error: function () {
                    swal({
                        text: "An error occurred while processing your request, contact system support",
                        icon: "error",
                        button: "OK",
                    }).then(function () {
                        //location.reload();
                    });
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            })
        });

            var removeAttachment = function (id) {
        swal({
            text: "Are you sure you want to delete this attachment?",
            buttons: [
              "Yes",
              "No"
            ],
            closeOnClickOutside: false,
        }).then(function (isConfirm) {
            if (!isConfirm) {
                $("#divLoader").show();
                var url = '@Url.Action("DeleteAttachment", "Invoice")/' + id;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        if (response == "Success") {
                            swal({
                                text: "Attachment deleted successfully!",
                                icon: "success",
                                button: "OK",
                            }).then(function () {
                                location.reload();
                            });
                        }
                        else {
                            swal({
                                text: "An error occurred while processing your request. ",
                                icon: "warning",
                                button: "OK",
                            }).then(function () {
                                location.reload();
                            });
                        }
                    },
                    error: function (response) {
                        swal({
                            text: response,
                            icon: "error",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    },
                    complete: function () {
                        $("#divLoader").hide();
                    }
                });
            }
        });
    };

    $("#btnAddAttachment").click(function () {
        if ($("#AttachmentName").val() == "" || $("#FileName").val() == "") {
            return false;
        }

        var attachmentName = $('#AttachmentName').val().trim();
        var fileName = $('#FileName').get(0).files[0];

        $("#divLoader").show();

        var token = $("[name='__RequestVerificationToken']").val();

        var formData = new FormData();

        formData.append("__RequestVerificationToken", token);
        formData.append("ModuleId", $("#InvoiceSummaryId").val());
        formData.append("AttachmentName", attachmentName);
        formData.append("FileName", fileName);

        var url = '@Url.Action("AddAttachment", "Invoice")';
        $.ajax({
        url: url,
        type: "POST",
        //data: JSON.stringify(Object.fromEntries(formData)),
        data: formData,
        dataType: "JSON",
        //contentType: 'application/x-www-form-urlencoded; charset=utf-8',
        //cache: false,
        processData: false,
        contentType: false,
        success: function (response) {
            if (response == "Success") {
                swal({
                    text: "Attachment saved successfully!",
                    icon: "success",
                    button: "OK",
                }).then(function () {
                    location.reload();
                });
            } else {
                swal({
                    text: response,
                    icon: "warning",
                    button: "OK",
                })
            }
        },
        error: function () {
                swal({
                    text: "An error occured while processing your request, please contact system support",
                    icon: "error",
                    button: "OK",
                })
        },
        complete: function () {
            $("#btnSave").attr("disabled", false);
            $("#divLoader").hide();
        }
        });
    });




        $("#btnSave").click(function () {

            debugger

            $('#btnSave').prop("disabled", true);
            $("#divLoader").show();

            if (!$("#invoiceForm").valid()) {
                $('#btnSave').prop("disabled", false);
                $("#divLoader").hide();
                return false;
            }


            var invoiceType = $("#InvoiceType").val();
            var invoiceAmount = toNumber($("#InvoiceAmount").val());
            var lpoAmount = toNumber($("#LPOAmount").val());

            if (invoiceType == "LPO") {

                if (parseFloat(invoiceAmount) > parseFloat(lpoAmount)) {

                    $('#btnSave').prop("disabled", false);
                    $("#divLoader").hide();
                    swal({
                        text: "Invoice Amount must be less than Lpo Amount",
                        icon: "warning",
                        button: "OK",
                    });
                    return false;
                }
            }

            var contractAmount = toNumber($("#ContractAmount").val());

            if (invoiceType == "Contract") {

                //&& ($("#InvoiceAmount").val() > $("#ContractAmount").val()

                if (parseFloat(invoiceAmount) > parseFloat(contractAmount)) {

                    $('#btnSave').prop("disabled", false);
                    $("#divLoader").hide();
                    swal({
                        text: "Invoice Amount must be less than Contract Amount",
                        icon: "warning",
                        button: "OK",
                    });
                    return false;
                }
            }



            var token = $("[name='__RequestVerificationToken']").val();
            var data = {
                __RequestVerificationToken: token,
                InvoiceSummaryId:$('#InvoiceSummaryId').val(),
                InvoiceType: $('#InvoiceType').val(),
                ContractNumber: $('#ContractNumber').val(),
                ContractAmount: $('#ContractAmount').val(),
                LPONumber: $("#LPONumber").val(),
                LPOAmount: $('#LPOAmount').val(),
                InvoiceNumber: $('#InvoiceNumber').val(),
                InvoiceDate: $('#InvoiceDate').val(),
                InvoiceAmount: $('#InvoiceAmount').val(),
                InvoiceDescription: $('#InvoiceDescription').val(),
                SubBudgetClassCode: $('#SubBudgetClassCode').val(),

                "PayeeDetailId": $('#PayeeDetailId').val(),
                "PayeeName": $('#PayeeName').val(),
                "PayeeAccountName": $('#PayeeAccountName').val(),
                "PayeeCode": $('#PayeeCode').val(),
                "PayeeBIC": $('#PayeeBIC').val(),
                "BankName": $('#BankName').val(),
                "PayeeType": $('#PayeeType').val(),
                "BankAccountNo": $('#BankAccountNo').val(),
                "Address": $('#Address').val(),
                IsBudgetedInvoice: $("#IsBudgetedInvoice").prop("checked"),
                InvoiceDetailVMs: glItems.filter(a => a.ExpensedAmount != '0.00')
            }

            var url = '@Url.Action("EditInvoice", "Invoice")';
            $.ajax({
                url: url,
                type: "POST",
                //data: JSON.stringify(data),
                data: data,
                dataType: "JSON",
                //contentType: "application/json",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                success: function (response) {
                    //check is successfully save to database
                    if (response == "Success") {
                        //will send status from server side
                        swal({
                            text: "Invoice successfully saved.",
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            window.location = '@Url.Action("PendingInvoice", "Invoice")';
                        });
                    }
                    else {
                        swal({
                            text: response,
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function () {
                    swal({
                        text: "Error. Please try again..",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {
                    $('#btnSave').prop("disabled", false);
                    $("#divLoader").hide();
                }
            });
        });

    </script>
}

