@model IFMIS.Areas.IFMISTZ.Models.CreatePaymentBatchVM

<br />
<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Payment batch</h2>
                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">




                            @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal" }))
                            {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.AOfficerPaymentReference)
                            @Html.HiddenFor(model => model.AOfficerCurrency)



                            <div class="form-group">
                                @Html.Label("*", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    <a href="~/Media/Templates/BulkyPaymentTemplate/BulkyPayment template.xlsx">
                                        <i class="glyphicon glyphicon-download-alt"></i>  Download Template without Sample Data
                                    </a>
                                </div>
                                @Html.Label("*", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    <a href="~/Media/Templates/BulkyPaymentTemplate/BulkyPayment Template with Sample Data.xlsx">
                                        <i class="glyphicon glyphicon-download-alt"></i> Download Template with Sample Data
                                    </a>
                                </div>

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.PaymentChannel, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                <div class="col-md-4">

                                    @Html.DropDownListFor(model => model.PaymentChannel, Model.PaymentChannels, "Select Payment Channel", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PaymentChannel, "", new { @class = "text-danger" })
                                </div>

                                @Html.LabelFor(model => model.BatchNo, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.BatchNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.BatchNo, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.BatchDesc, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                <div class="col-md-4">
                                    <textarea rows="1" class="form-control" onkeyup="resizeTextArea(this)" id="BatchDesc" name="BatchDesc">
                                    </textarea>
                                    (Remained characters: <i id="maxchars">100</i>)
                                    @*@Html.EditorFor(model => model.BatchDesc, new { htmlAttributes = new { @class = "form-control", @width = "200", @height = "400" } })*@
                                    @Html.ValidationMessageFor(model => model.BatchDesc, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.FileName, new { type = "file", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-12">
                                        <button class="btn btn-info" type="submit" style="float: left" id="btnSave">
                                            <i class="fa fa-save"></i>
                                            Save
                                        </button>
                                        <a  onclick="window.history.back()" class="btn btn-info" style="float: left; margin-left: 5px">
                                            <i class="fa fa-arrow-left"></i>
                                            Back
                                        </a>
                                    </div>
                                </div>
                            </div>
                            }

                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">

         function resizeTextArea(txt) {
             txt.style.height = "3px";
             txt.style.height = (3 + txt.scrollHeight) + "px";
        }


        var OldDescVal = ""
        $("#BatchDesc").on("keyup", function (e) {
            var allowedchars = parseFloat(100 - this.value.length)
            if (allowedchars < 0) {
                $("#maxchars").text("Characters Limit Exceeded");
                $("#maxchars").attr("style", "color: red;");
                $("#btnSave").prop('disabled', true);
            }
            else {
                $("#btnSave").prop('disabled', false);
                $("#maxchars").attr("style", "color: black;");
                $("#maxchars").text(100 - this.value.length)
                if (this.value) {
                    var reg = new RegExp(/[0-9a-zA-Z ]/);
                    if (!reg.test(this.value.substr(-1))) {
                        $("#BatchDesc").val(OldDescVal)
                    } else {
                        OldDescVal = this.value
                    }
                }
            }
        });

    </script>
}
