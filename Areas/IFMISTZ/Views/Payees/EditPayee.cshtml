@model IFMIS.Areas.IFMISTZ.Models.EditPayeeVM

<div id="content" style="margin: 5px; padding-top: 30px">
    <div class="row">
        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
        </div>
    </div>
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Payee </h2>
                    </header>
                    <div>
                        <div>Note: All Fields are Mandatory</div>
                    </div>

                    <div>
                        <div class="jarviswidget-editbox">
                        </div>
                        <div class="widget-body">
                            <form method="post" class="form-horizontal" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.PayeeId)
                                @Html.HiddenFor(model => model.PayeeDetailId)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.IdTypeId, "Payee Code Type", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.IdTypeId, Model.IdTypeIds, "---select---", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IdTypeId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.PayeeCode, "Payee Code", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.PayeeCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.PayeeCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayeeName, "Payee Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.PayeeName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.PayeeName, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.PayeeTypeCode, "Payee Type", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownList("PayeeTypeCode", new SelectList(ViewBag.PayeeTypesList, "PayeeTypeCode", "PayeeTypeCode"), "---select---", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PayeeTypeCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PhoneNumber1, "Mobile Number", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.PhoneNumber1, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.PhoneNumber1, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Address1, "Address", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsGovernmentEntity, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        <select class="form-control" name="IsGovernmentEntity" id="IsGovernmentEntity">
                                            <option selected="selected" value="">---Select---</option>
                                            <option value="true"> Yes</option>
                                            <option value="false"> No</option>
                                        </select>
                                        @*  @Html.EditorFor(model => model.IsGovernmentEntity, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.IsGovernmentEntity, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.VRN, "VRN(If Any)", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.VRN, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.VRN, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">

                                    @Html.LabelFor(model => model.IBAN, "IBAN (Option Field)", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.IBAN, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.IBAN, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <button class="btn btn-info" type="submit" style="float: left">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PayeeList","Payees")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
<style type="text/css">
    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>

<div class="modal fade" id="responseModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header alert alert-danger" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Confirm Delete</h4>
            </div>
            <div class="modal-body">
                <p class="success-message">Are you sure you want to delete this record ? </p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info delete-confirm">Yes</button>
                <button class="btn btn-info confirm-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="cancelAccountModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

                <h4 class="modal-title" id="lblmodal">Cancel Dialog</h4>
            </div>
            <div class="modal-body" id="modal-body">
                <p class="success-message">Are you sure you want to cancel this Account ? </p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info approve-confirm">Yes</button>
                <button class="btn btn-info delete-cancel" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script>
        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $(document).ready(function () {

            /* // DOM Position key index //

            l - Length changing (dropdown)
            f - Filtering input (search)
            t - The Table! (datatable)
            i - Information (records)
            p - Pagination (paging)
            r - pRocessing
            < and > - div elements
            <"#id" and > - div with an id
            <"class" and > - div with a class
            <"#id.class" and > - div with an id and class

            Also see: http://legacy.datatables.net/usage/features
            */

            /* BASIC ;*/
            var responsiveHelper_dt_basic = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            $('#dt_basic').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_dt_basic) {
                        responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#dt_basic'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_dt_basic.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_dt_basic.respond();
                }
            });

            /* END BASIC */

            /* COLUMN FILTER  */
            var otable = $('#datatable_fixed_column').DataTable({
                //"bFilter": false,
                //"bInfo": false,
                //"bLengthChange": false
                //"bAutoWidth": false,
                //"bPaginate": false,
                //"bStateSave": true // saves sort state using localStorage
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_fixed_column) {
                        responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_fixed_column.respond();
                }

            });

            // custom toolbar
            $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });
            /* END COLUMN FILTER */

            /* COLUMN SHOW - HIDE */
            $('#datatable_col_reorder').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_col_reorder) {
                        responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_col_reorder.respond();
                }
            });

            /* END COLUMN SHOW - HIDE */

            /* TABLETOOLS */
            $('#datatable_tabletools').dataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "SmartAdmin_PDF",
                           "sPdfMessage": "SmartAdmin PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            /* END TABLETOOLS */

        });

        var deleteAccount = function (id) {
            $("#responseModal").modal('show');

            $(".delete-confirm").click(function () {
                if (id != "") {
                    var url = '@Url.Action("DeleteAccount", "Payees")';
                    $.ajax({
                        url: url,
                        data: { id: id },
                        type: "POST",
                        success: function (response) {
                            if (response) {
                                if (response == "Success") {
                                    //now re-using the boostrap modal popup to show success message.
                                    //dynamically we will change background colour
                                    if ($('.modal-header').hasClass('alert-danger')) {
                                        $('.modal-header').removeClass('alert-info').addClass('alert-info');
                                        //hide ok button as it is not necessary
                                        $('.delete-confirm').css('display', 'none');
                                        $('.confirm-cancel').html('Close').click(function () {
                                            location.reload();
                                        });
                                    }
                                    $('.success-message').html('Record deleted successfully');
                                }
                                else if (response == "DbException") {
                                    alert(response);
                                } else {
                                    alert(response);
                                }
                            }
                        }, error: function (err) {
                            if (!$('.modal-header').hasClass('alert-danger')) {
                                $('.modal-header').removeClass('alert-info').addClass('alert-info');
                                $('.delete-confirm').css('display', 'none');
                            }
                            $('.success-message').html(err.statusText);
                        }
                    });
                }
            });
        };

        //function to reset bootstrap modal popups
        $("#responseModal").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass(' ').addClass('alert-danger');
            $('.delete-confirm').css('display', 'inline-block');
            $('.success-message').html('').html('Are you sure you want to delete this record ?');
        });

        var cancelAccount = function (id) {
            $("#cancelAccountModal").modal({
                backdrop: "static",
                keyboard: false
            });

            $(".approve-confirm").click(function () {
                if (id != "") {
                    var url = '@Url.Action("CancelPayeeAccount", "Payees")';
                    $.ajax({
                        url: url,
                        data: { id: id },
                        type: "POST",
                        success: function (response) {
                            if (response == "Success") {
                                //now re-using the boostrap modal popup to show success message.
                                //dynamically we will change background colours
                                $('.modal-header').removeClass('alert-info').addClass('alert-info');
                                //hide ok button as it is not necessary
                                $('.approve-confirm').css('display', 'none');
                                $('.delete-cancel').html('Close').click(function () {
                                    location.reload();
                                });
                                $('.success-message').html('Cancelled successfully');
                            }
                            else {
                                //hide ok button as it is not necessary
                                $('.delete-confirm').css('display', 'none');
                                $('.delete-cancel').html('Close').click(function () {
                                    location.reload();
                                });
                                $('.success-message').html(response);
                            }
                        }, error: function (err) {
                            if (!$('.modal-header').hasClass('alert-info')) {
                                $('.modal-header').removeClass('alert-info').addClass('alert-info');
                                $('.delete-confirm').css('display', 'none');
                            }
                            $('.success-message').html(err.statusText);
                        }
                    });
                }
            });
        };

    </script>
}
