@model IFMIS.Areas.IFMISTZ.Models.ContractVM
@{
    ViewBag.Title = "Create Contract";

}
<style>



    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }


    .search-icon {
        padding: 0.5rem;
    }


    input[type=text] {
        padding: 5px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    input[type=checkbox] {
        width: 7mm;
        height: 7mm;
    }
    input[type=checkbox]:checked {
        background-color: lightblue;
    }

</style>


<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <br />
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>@ViewBag.Title </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">

                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitSummary(this)" }))
                            {
                                @Html.AntiForgeryToken()

                            <div class="form-horizontal">

                                @Html.HiddenFor(model => model.PayeeDetailId)
                                @Html.HiddenFor(model => model.PayeeId)
                                @Html.HiddenFor(model => model.ApplyCeiling)
                                @Html.HiddenFor(model => model.Currency)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ContractNumber, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ContractNumber, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.ContractNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="col-md-2 control-label" style="text-align:left"><span id="contracter">Contractor/Supplier</span></label>
                                    <div class="col-md-4">

                                        <div class="input-group">

                                            <span class="input-group-addon" onclick="SearchPayee()"><i class="fa fa-search"></i></span>
                                            @Html.EditorFor(model => model.Payeename, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Search", autocomplete = "off", @onclick = "SearchPayee()" } })
                                            @Html.ValidationMessageFor(model => model.Payeename, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>

                                <div class="form-group" id="bank_info" style="display:none">
                                    @Html.LabelFor(model => model.PayeeCode, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.PayeeCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.PayeeCode, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.NumberBankAccount, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4" style="padding-top:5px">
                                        <a href='#' onclick='ViewAccounts()'><span class="badge inbox-badge margin-right-13" id="account_no"></span></a>
                                        <a href='#' onclick='ViewAccounts()'>View Selected Accounts</a>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayeeType, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.PayeeType, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.PayeeType, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ContractType, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ContractType, Model.ContractTypeList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.ContractType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ContractName, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ContractName, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.ContractName, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.SubBudgetClass, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownList("SubBudgetClass", Model.SubBudgetClassList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AgreedExchangeRate, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.AgreedExchangeRate, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.AgreedExchangeRate, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.PayerBankAccount, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <select id="PayerBankAccount" name="PayerBankAccount" class="form-control select2"></select>
                                        @Html.ValidationMessageFor(model => model.PayerBankAccount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TransactionCurrency, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.TransactionCurrency, Model.CurrenciesList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.TransactionCurrency, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ContractAmount, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <div class="input-group">

                                            <span class="input-group-addon currencyDisp">@Html.DisplayFor(model => model.OperationalCurrency)</span>
                                            @Html.EditorFor(model => model.ContractAmount, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.ContractAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ContractDescription, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">

                                        @Html.EditorFor(model => model.ContractDescription, new { htmlAttributes = new { @class = "form-control", @required = "required", rows = "3", maxlength = 250 } })

                                        @Html.ValidationMessageFor(model => model.ContractDescription, "", new { @class = "text-danger" })
                                    </div>
                                    @if (Model.ApplyCeiling)
                                    {
                                        @Html.LabelFor(model => model.OwnerInstitutionSubLevelId, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.OwnerInstitutionSubLevelId, Model.CostCenterList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.OwnerInstitutionSubLevelId, "", new { @class = "text-danger" })
                                        </div>
                                    }
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SecurityGuaranteeSetupId, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.SecurityGuaranteeSetupId, Model.SecurityGuaranteeList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.SecurityGuaranteeSetupId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.SecurityGuaranteeDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.SecurityGuaranteeDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.SecurityGuaranteeDate, "", new { @class = "text-danger" })


                                    </div>

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ContractStartDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ContractStartDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.ContractStartDate, "", new { @class = "text-danger" })


                                    </div>


                                    @Html.LabelFor(model => model.ContractEndDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ContractEndDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })

                                        @Html.ValidationMessageFor(model => model.ContractEndDate, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProcurementMethod, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ProcurementMethod, Model.ProcurementMethodList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.ProcurementMethod, "", new { @class = "text-danger" })
                                    </div>
  
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.HasAdvancePayment, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })

                                    <div class="col-md-4">

                                        <input type="checkbox" name="HasAdvancePayment" id="HasAdvancePayment">
                                        <input id="AdvancePaymentAllowed" name="AdvancePaymentAllowed" type="hidden" readonly value="NO">

                                    </div>
                                    <div id="adv_ptg" style="display:none">
                                        @Html.LabelFor(model => model.AdvancePaymentPtg, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.AdvancePaymentPtg, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.AdvancePaymentPtg, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.HasRetention, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })

                                    <div class="col-md-4">

                                        <input type="checkbox" name="HasRetention" id="HasRetention">
                                        <input id="Retention" name="Retention" type="hidden" readonly value="NO">

                                    </div>

                                </div>
                                <div class="form-group ret_ptg" style="display:none;">
                                    @Html.LabelFor(model => model.RetentionPtg, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.RetentionPtg, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.RetentionPtg, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.MaxRetentionPtg, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.MaxRetentionPtg, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.MaxRetentionPtg, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group ret_ptg" style="display:none;">
                                    @Html.LabelFor(model => model.RetentionType, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownList("RetentionType", new List<SelectListItem>{
                                    new SelectListItem{ Text="--Select--", Value = "" },
                                    new SelectListItem{ Text="Internal Transfer", Value = "InternalTransfer" },
                                    new SelectListItem{ Text="Bank Transfer", Value = "BankTransfer" },
                                    }, new { @class = "form-control select2" })
                                    </div>
                                    <div id="ret_ptg_bank" style="display:none;">
                                        @Html.LabelFor(model => model.RetentionBankAccountTo, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            <select class="form-control select2" id="RetentionBankAccountTo" name="RetentionBankAccountTo" placeholder="Select Account">
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group ret_ptg_deposit" style="display:none;">
                                    @Html.LabelFor(model => model.DepositSBC, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.DepositSBC, Model.SBCDepositList, "Select ---", new { @class = "form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.DepositSBC, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.BankAccountTo, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <select id="BankAccountTo" name="BankAccountTo" class="form-control select2"></select>
                                        @Html.ValidationMessageFor(model => model.BankAccountTo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @if (Model.IsST)
                                {
                                    <div class="form-group">
                                        @Html.Label("Is ST Payment ?", htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">

                                            <input type="checkbox" style="width:30px" id="IsStPayment">
                                            <input id="StPayment" name="StPayment" style="width:40px;font-weight:bold" type="text" readonly value="NO">

                                        </div>
                                        <div class="IsStPayment">
                                            @Html.LabelFor(model => model.ParentInstitutionCode, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                            <div class="col-md-4">
                                                <select name="ParentInstitutionCode" id="ParentInstitutionCode" class="form-control"></select>
                                                @Html.ValidationMessageFor(model => model.ParentInstitutionCode, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.STPayments != null)
                                {
                                    <div class="form-group">

                                        <div class="IsStPayment">
                                            @Html.LabelFor(model => model.SubWarrantCode, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                            <div class="col-md-4">
                                                <select name="SubWarrantCode" id="SubWarrantCode" class="form-control"></select>
                                                @Html.ValidationMessageFor(model => model.SubWarrantCode, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="form-group">

                                    @Html.LabelFor(model => model.Lotted, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-1" style="padding-top:8px">

                                        @Html.EditorFor(x => x.Lotted)
                                    </div>
                                    <div id="lot">
                                        @Html.LabelFor(model => model.LotNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-1">
                                            @Html.EditorFor(model => model.LotNo, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.LotDescription, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.LotDescription, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", rows = "2", maxlength = 250 } })
                                            @Html.ValidationMessageFor(model => model.LotDescription, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.Label("Penalty Parcenatge Per Unexcuted Work", htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <div class="input-group">

                                            @Html.EditorFor(model => model.PenaltyPercentage, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @type = "number", @id = "penalty" } })
                                            @Html.ValidationMessageFor(model => model.PenaltyPercentage, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @if (Model.ApplyCeiling)
                                    {

                                        @Html.LabelFor(model => model.Funding, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            <div class="input-group">

                                                <span class="input-group-addon" onclick="SearchFund()"><i class="fa fa-search"></i></span>
                                                @Html.EditorFor(model => model.Funding, new { htmlAttributes = new { @class = "form-control", @placeholder = "Search", autocomplete = "off", @onclick = "SearchFund()" } })
                                                @Html.ValidationMessageFor(model => model.Funding, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                </div>
                                @if (Model.ApplyCeiling)
                                {
                                    <div style="padding-top:5px">

                                        <table id="selected_gls" class="table table-bordered
                                       table-hover table-condensed" width="100%"></table>
                                        <div style="padding-bottom:10px" id="infoPanel">
                                            <div class="info-box">No Fund Selected</div>
                                        </div>
                                    </div>
                                }


                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2">
                                            <a href="@Url.Action("PendingContract","Contract")" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                            <button type="submit" id="save_summary" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            }

                        </div>

                    </div>


                </div>
            </article>

        </div>
    </section>

</div>


<!----------- Search Payee ----------------->
<div class="modal fade" id="payeeModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Payee</h3>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container submit-btn" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." autocomplete="off" id="searchbox">
                        </div>
                    </div>
                </div>
                <div align="center">
                    <img src="/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                </div>
                <table class="table" id="dt_search_payee">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>PayeeId</th>
                            <th>PaymentId</th>
                            <th>Payee Code</th>
                            <th>Payee Name</th>
                            <th>Payee Type</th>
                            <th>Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>
<!----------- End Search Payee----------------->
<!----------- Search Payee Bank Account ----------------->
<div class="modal fade" id="payeeAccountModal" style="left:4%">
    <div class="custom-scroll" style="height:700px; overflow-y: scroll;">
        <div class="modal-dialog" style="width:80%;">
            <div class="modal-content panel-info">


                <div class="modal-header panel-heading">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h3 class="modal-title">Bank Account(s) Selection</h3>

                </div>
                <div class="modal-body" id="divModalBody">

                </div>

            </div>
        </div>
    </div>
 </div>
    <!----------- End Search Payee Bank Account----------------->
    <!----------- Search Fund ----------------->
    <div class="modal fade" id="fundCategoryModal" style="left:4%">

        <div class="modal-dialog" style="width:80%;">
            <div class="modal-content panel-info">


                <div class="modal-header panel-heading">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h3 class="modal-title"> Fund Balance</h3>

                </div>
                <div class="modal-body">
                    <table>
                        <tr>
                            <td style="padding:5px">Contract Amount</td>
                            <td style="padding:5px">
                                <input type="text" disabled id="total_items_amount">
                            </td>

                            <td style="padding:5px">Total Line Amount</td>
                            <td style="padding:5px">
                                <input value="0" type="text" disabled id="total_line_amount">
                            </td>

                            <td style="padding:5px">Difference</td>
                            <td style="padding:5px">
                                <input value="0" type="text" disabled id="difference" style="width:250px">
                            </td>
                        </tr>
                    </table>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="search-container" style="float:right">
                                <i class="fa fa-search"></i>
                                <input type="search" name="search" placeholder="Search..." id="search-box">
                            </div>
                        </div>
                    </div>
                    <div align="center">
                        <img src="/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                    </div>
                    <table class="table" id="dt_fund">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Fund</th>
                                <th>Balance</th>
                                <th>Currency</th>
                                <th>Reference</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>

                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-info" id="btn_save_items_charge">
                        <i class="fa fa-save"></i>Save
                    </button>
                    <button class="btn btn-info" data-dismiss="modal">
                        <i class="fa  fa-times"></i>Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!----------- End Search Fund----------------->

    @section pagespecific {
        <!-- PAGE RELATED PLUGIN(S) -->

        <script type="text/javascript">
        var glItemsCharges = [];
            var sum_total = 0;


        function SubmitSummary(formData) {
                               $("#save_summary").prop('disabled', true);
                            var formDataVal = new FormData(formData);
                            var fundingData = JSON.stringify(glItemsCharges);
                            formDataVal.append("Fundings", fundingData);
                            if (payeeIds.length > 0) {
                                var payeeIdsData = JSON.stringify(payeeIds);
                                formDataVal.append("PayeeIds", payeeIdsData);
                            }
                            else {
                                swal("Please  Payee is required!");
                                return false;
                            }
                            var url = '@Url.Action("SaveContract", "Contract")';
                           var ajaxConfig = {
                            type: "post",
                            url: url,
                            data: formDataVal,
                             success: function (response) {
                              if (response == "Success") {
                                       swal("Basic information saved successfully", { icon: "success" })
                                           .then((value) => {
                                            var url = '@Url.Action("PendingContract", "Contract")';
                                             window.location.replace(url);
                                           });
                                   }
                                   else {
                                    $("#save_summary").prop('disabled', false);
                                       swal(response);
                                   }
                               },
                               error: function (xhr) {
                                   $("#save_summary").prop('disabled', false);
                                   swal(error);
                               },
                        }
                        if ($(formData).attr('enctype') == "multipart/form-data") {
                            ajaxConfig["contentType"] = false;
                            ajaxConfig["processData"] = false;
                        }
                        $.ajax(ajaxConfig);
                        return false;
                         }

                        function SearchPayee() {
                            $('#payeeModal').modal('show');
                            }

                      function SearchFund() {

                            var sbc = $("#SubBudgetClass").val();
                            if (!sbc) {
                                swal("Please select Sub Budget Class first");
                                return;
                            }

                            var institutionSubLevelId = $("#OwnerInstitutionSubLevelId").val();
                            if (!institutionSubLevelId) {
                                swal("Please select Cost Center first");
                                return;
                            }

                            var amount = $("#ContractAmount").val();
                                if (!amount) {
                                    swal("Please enter Contract Amount");
                                    return;
                                   }
                                amount = parseFloat($("#ContractAmount").val().split(",").join(""));
                            if (amount > 0) {
                                $("#total_items_amount").val(amount.toLocaleString('en'));
                                glItemsCharges = [];
                                sum_total = 0;
                                $("#difference").val(amount.toLocaleString('en'));
                                    getFundBalance(institutionSubLevelId, sbc);
                                }
                                else {
                                    swal("Please enter Contract Amount");
                                    return;

                                }

                        }

        function amountChanged(e) {

            var max_value = parseFloat(e.max);
            var entered_value = parseFloat(e.value.split(",").join(""));
            if (!entered_value) {
                entered_value = 0;
            }

            if (entered_value >= 0) {
                if (max_value >= entered_value) {

                    sum_total = 0;

                    var i = 0;

                    $("#dt_fund tr").each(function () {


                        if (i > 0) {
                            var value = $(this).children().eq(5).find("input").val().trim().split(",").join("");

                            if (value != "") {
                                var amount = parseFloat(value);

                                //INSERT INTO ARRAY
                                var fund_category = $(this).children().eq(1).text();
                                var currency = $(this).children().eq(3).text();
                                var funding_ref = parseInt($(this).children().eq(4).text());

                                if (glItemsCharges.length > 0) {

                                    //CHECK IF EXIST IN THE ARRAY
                                    var found = false;
                                    for (var j = 0; j < glItemsCharges.length; j++) {
                                        if (glItemsCharges[j].FundCategoryId == funding_ref) {
                                            glItemsCharges[j].Balance = amount;
                                            found = true;
                                        }

                                    }

                                    if (!found) {

                                        glItemsCharges.push({
                                            "FundCategoryDescription": fund_category,
                                            "FundCategoryId": funding_ref,
                                            "Balance": amount,
                                            "Currency": currency
                                        });


                                    }


                                } else {

                                    glItemsCharges.push({
                                        "FundCategoryDescription": fund_category,
                                        "FundCategoryId": funding_ref,
                                        "Balance": amount,
                                        "Currency": currency
                                    });


                                }




                            }
                        }


                        i++;
                    });

                    for (var j = 0; j < glItemsCharges.length; j++) {

                        sum_total = sum_total + glItemsCharges[j].Balance;

                    }

                    var total_items_value = parseFloat($("#total_items_amount").val().split(",").join(""));
                    var balance = total_items_value - sum_total;
                    if (balance >= 0) {
                        $("#total_line_amount").val(sum_total.toLocaleString('en'));
                        $("#difference").val(balance.toLocaleString('en'));
                    }
                    else {
                        swal("Total Line Amount can not exceed " + total_items_value.toLocaleString('en'));
                        e.value = "";


                    }
                } else {
                    swal("Expense Amount can not exceed " + max_value.toLocaleString('en'));
                    e.value = "";


                }
            }
        }



                       // ============= SEARCH PAYEEE ===========

                        Date.prototype.toDateInputValue = (function () {
                            var local = new Date(this);
                            local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
                            return local.toJSON().slice(0, 10);
                        });

                        $(function () {
                            $('#ApplyDate').val(new Date().toDateInputValue());
                            $('#InvoiceDate').val(new Date().toDateInputValue());
                        })

                        var dt_search_payee = $('#dt_search_payee').dataTable({
                            "aoColumnDefs": [{ "bVisible": false, "aTargets": [1,2] }],
                        });
        var dt_search_payee_account = $('#dt_search_payee_account').dataTable(
            {
                "aoColumnDefs": [{ "bVisible": false, "aTargets": [1] }],
            }
        );
                        $("#searchbox").on("keyup search input paste cut", function () {
                            if (!this.value) {
                                dt_search_payee.fnClearTable();
                            } else {
                                searchPayeeTableUpdate(this.value);
                            }
                        });
                      var dt_search_fund = $('#dt_fund').dataTable();
                        $("#dt_fund_wrapper .dt-toolbar").remove();
                        $("#search-box").on("keyup search input paste cut", function () {
                            $("#dt_fund").DataTable().search(this.value).draw();
                        });

                      function getFundBalance(institutionSubLevelId, sbc) {
                          $('#fundCategoryModal').modal('show');

                            var url = '@Url.Action("GetFundbalance", "Contract")';
                             var fundBalanceParams = {
                              institutionSubLevelId,
                               sbc
                              };
                            $.ajax({
                                type: "get",
                                url: url,
                                data: fundBalanceParams,
                                contenttype: "application/json; charset=utf-8",
                                datatype: "json",
                                success: function (result) {
                                    //=== UPDATE SEARCH GI TABLE ====
                                    data = result.data;
                                    if (result.response == "Success") {

                                        dt_search_fund.fnClearTable();
                                        for (var i = 0; i < data.length; i++) {
                                            dt_search_fund.fnAddData([i + 1,
                                            data[i]["FundCategoryDescription"],
                                            toLabel(data[i]["Balance"]),
                                            data[i]["Currency"],
                                            data[i]["FundCategoryId"],
                                            '<amount-input placeholder="Amount" max="' + data[i]["Balance"] + '"  onkeyup="amountChanged(this)" />'
                                            ]);
                                        }

                                    }
                                    else {
                                        swal(result.response);
                                    }

                                },
                                failure: function (error) {
                                    swal(error);
                                }
                            });


                                            }

                        function searchPayeeTableUpdate(search) {
                            var url = '@Url.Action("GetPayee", "Contract")';
                            $.ajax({
                                type: "get",
                                url: url + "/?search=" + search + "",
                                contenttype: "application/json; charset=utf-8",
                                datatype: "json",
                                success: function (response) {
                                    data = response.data;
                                    dt_search_payee.fnClearTable();
                                    for (var i = 0; i < data.length; i++) {
                                        dt_search_payee.fnAddData([i+1,
                                           data[i]["PayeeId"],
                                           data[i]["PayeeDetailId"],
                                           data[i]["PayeeCode"],
                                           data[i]["PayeeName"],
                                           data[i]["PayeeType"],
                                           data[i]["Address1"],
                                           '<a href="#" onclick="payeeClicked(' + i + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                                        ]);
                                    }
                                },
                                failure: function (error) {
                                    swal(error);
                                }
                            });
                        }
                        var payeeName = null;
                        var payeeType = null;
                        var payeeCode = null;
                        var payeeId = 0;
                        function payeeClicked(rowId) {
                            var data = dt_search_payee.DataTable().rows().data();
                            var row = data[rowId];
                            $("#PayeeId").val(row[1]);
                            $("#PayeeDetailId").val(row[2]);
                            payeeCode=row[3];
                            payeeName=row[4];
                            payeeType = row[5];
                            payeeId = row[1];
                            $("#payeeModal").modal("hide");
                            $("#payee_code").val(row[3]);
                            $("#payee").val(row[4]);
                            AccountsSelection(row[1], payeeCode, payeeName);
                          }

        function AccountsSelection(id, payeeCode, payeeName) {
          var url = '@Url.Action("GetPayeeByCode", "Contract")';
            $("#divModalBody").load(url, { id: id, payeeCode: payeeCode, payeeName: payeeName }, function (response, status, xhr) {
                  if (status == "error") {
                      $("#divModalBody").html("Error on loading Payee Account(s), contact system support.");
                  }
                  $('#payeeAccountModal').modal('show');
                });

            }
        var payeeIds = [];
        function savePayee() {
             payeeIds = [];
            var accounts = [];
            var selectedAccounts = null;
            $("input:checkbox.checkItem").each(function () {
                if ($(this).prop("checked")) {
                    accounts.push($(this).val());
                    payeeIds.push($(this).attr('id'));
                }

            });
            if (payeeIds.length == 0) {
                swal("Please select at least one Bank Account !");
                return;
            } else {
                var requireMultiple = '@Model.RequireMultipleAccounts';
                if (requireMultiple == "No") {
                    if (payeeIds.length > 1) {
                        swal("Please only one Bank Account per Contract allowed to this institution!");
                        return;
                    }
                }

                selectedAccounts = payeeIds.length;
                    $("#payeeAccountModal").modal("hide");
                    $("#bank_info").show();
                    $("#PayeeCode").val(payeeCode);
                    $("#Payeename").val(payeeName);
                    $("#PayeeType").val(payeeType);
                $("#account_no").text(selectedAccounts);
              }
          }

                        // =========== END SEARCH PAYEE ====================
        function ViewAccounts() {
            AccountsSelectionView(payeeId, payeeCode, payeeName, payeeIds);
        }

        function AccountsSelectionView(id, payeeCode, payeeName, payeeIds) {
        var url = '@Url.Action("GetPayeeByCodeView", "Contract")';
            $("#divModalBody").load(url, { id: id, payeeCode: payeeCode, payeeName: payeeName, ids: payeeIds }, function (response, status, xhr) {
            if (status == "error") {
                $("#divModalBody").html("Error on loading Payee Account(s), contact system support.");
            }
            $('#payeeAccountModal').modal('show');
          });

      }


                        $(document).ready(function () {
                            $("#dt_search_payee_wrapper .dt-toolbar").remove();
                   /*         $("#dt_search_payee_account_wrapper .dt-toolbar").remove();*/
                            if ($("#Lotted").is(":checked")) {
                                $("#lot").show();

                            } else {
                                $("#lot").hide();
                            }

                            var contract_type = $("#ContractType").val();
                            if (contract_type) {
                            if (contract_type == "Goods") {
                                $("#contracter").text("Supplier")
                            }
                            if (contract_type == "Services & Goods") {
                                $("#contracter").text("Supplier")
                            } else if (contract_type == "Works") {
                                $("#contracter").text("Contractor")
                            } else if (contract_type == "Consultancy") {
                                $("#contracter").text("Consultant")
                            }
                            else if (contract_type == "Non Consuntancy") {
                                $("#contracter").text("Service Provider")
                            }
                            }
                            $("#ContractType").change(function (e) {
                                var contract_type = $("#ContractType").val();

                                if (contract_type=="Goods") {
                                    $("#contracter").text("Supplier")
                                } else if (contract_type == "Works") {
                                    $("#contracter").text("Contractor")
                                }
                                if (contract_type == "Services & Goods") {
                                    $("#contracter").text("Supplier")
                                } else if (contract_type == "Consultancy") {
                                    $("#contracter").text("Consultant")
                                }
                                else if (contract_type == "Non Consuntancy") {
                                    $("#contracter").text("Service Provider")
                                }
                            });

                            $("#Lotted").change(function (e) {

                                if ($(this).is(":checked")) {
                                    $("#lot").show();

                                } else {
                                    $("#lot").hide();
                                    $("#LotNo").val("");
                                    $("#LotDescription").val("");
                                }
                            });


                            //MANAGE DATE SELECTED
                            $(function () {
                                $("#ContractEndDate").change(function () {
                                    var end_date = $(this).val();
                                    var start_date = $("#ContractStartDate").val();
                                    if (start_date) {
                                        if (end_date) {
                                            if (start_date > end_date) {
                                                swal("Please select date which is greater than the start date");
                                                $("#ContractEndDate").val("");
                                            }

                                        }
                                    }


                                });
                            });
                            $(function () {
                                $("#ContractStartDate").change(function () {
                                    var start_date = $(this).val();
                                    var end_date = $("#ContractEndDate").val();
                                    if (end_date) {
                                        if (start_date) {
                                            if (start_date > end_date) {
                                                swal("Please select date which is less than the end date");
                                                $("#ContractStartDate").val("");
                                            }

                                        }
                                    }


                                });
                            });


                            $("#HasAdvancePayment").change(function (e) {
                                $("#AdvancePaymentAllowed").val(e.target.checked ? "YES" : "NO");

                                if ($(this).is(":checked")) {
                                    $("#adv_ptg").show();

                                } else {
                                    $("#adv_ptg").hide();
                                }
                            });
                            $("#HasRetention").change(function (e) {
                                $("#Retention").val(e.target.checked ? "YES" : "NO");

                                if ($(this).is(":checked")) {
                                    $(".ret_ptg").show();

                                } else {
                                    $(".ret_ptg").hide();
                                }
                            });



                            // ON SUB BUDGET CLASS
                            var payerAccounts = [];
                        $("#SubBudgetClass").change(function () {
                            var sbc = $(this).val();
                            var url = '@Url.Action("GetPayerAccounts", "Contract")';
                            $.ajax({
                                type: "POST",
                                url: url,
                                data: {sbc:sbc },
                                success: function (response) {
                                   debugger
                                    if (response.res == "Success") {
                                        payerAccounts = response.data;
                                        $("#PayerBankAccount").empty();
                                        $('<option value="" selected>------Select-------</option>').appendTo('#PayerBankAccount');
                                        $.each(payerAccounts, function (i, d) {
                                            $('<option value=' + d.AccountNumber + '>' + d.AccountNumber + '-' + d.Currency + '-' + d.AccountName + '</option>').appendTo('#PayerBankAccount');
                                        });

                                    }
                                    else {
                                        swal(response.res);
                                    }

                                }
                            })
                        });

                      $("#PayerBankAccount").change(function () {
                          var account = $(this).val();
                          var currency = "";
                          if (account) {
                              currency = search(account, payerAccounts);
                          }
                        /*  $(".currencyDisp").text(currency);*/
                      });

                        var retentionPayerAccounts = [];
                          $("#DepositSBC").change(function () {
                            var sbc = $(this).val();
                            var url = '@Url.Action("GetPayerAccounts", "Contract")';
                            $.ajax({
                                type: "POST",
                                url: url,
                                data: {sbc:sbc },
                                success: function (response) {
                                   debugger
                                    if (response.res == "Success") {
                                        retentionPayerAccounts = response.data;
                                        $("#BankAccountTo").empty();
                                        $('<option value="" selected>------Select-------</option>').appendTo('#BankAccountTo');
                                        $.each(retentionPayerAccounts, function (i, d) {
                                            $('<option value=' + d.AccountNumber + '>' + d.AccountNumber + '-' + d.Currency + '-' + d.AccountName + '</option>').appendTo('#BankAccountTo');
                                        });

                                    }
                                    else {
                                        swal(response.res);
                                    }

                                }
                            })
                        });

                     $("#BankAccountTo").change(function () {
                          var account = $(this).val();
                          var currency = "";
                          if (account) {
                              currency = search(account, retentionPayerAccounts);
                          }
                         $("#Currency").val(currency);
                      });

                            function search(nameKey, payerAccounts) {

                                    for (var j = 0; j < payerAccounts.length; j++) {
                                        if (payerAccounts[j].AccountNumber == nameKey) {
                                            return payerAccounts[j].Currency;
                                        }

                                    }

                            }


                            function SearchPayee() {
                                $('#payeeModal').modal('show');
                            }




                            $(function () { // this will be called when the DOM is ready
                                $("#add_lot").click(function () {
                                    $("#add_lot_form").show();
                                    $("#add_lot_field").hide();
                                    $("#hide_lot_field").show();

                                });
                            });

                            $(function () { // this will be called when the DOM is ready
                                $("#hide_lot_form").click(function () {
                                    $("#add_lot_form").hide();
                                    $("#add_lot_field").show();
                                    $("#hide_lot_field").hide();

                                });
                            });
                            //End Manage VA

                        });

                        $("#ContractAmount").autoNumeric('init');
                        $("#AdvancePaymentPtg").autoNumeric('init');
                        $("#RetentionPtg").autoNumeric('init');
                        $("#AgreadExchangeRate").autoNumeric('init');
                        $("#ContractName").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#ContractDescription").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#LotDescription").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });

         $(".IsStPayment").toggle(false)
        $("#IsStPayment").change((e) => {
            $("#StPayment").val(e.target.checked ? "YES" : "NO")
            if (e.target.checked) {
                $(".IsStPayment").toggle(true)
                GetParentInstitutions();
            } else {
                $(".IsStPayment").toggle(false)
            }
        });

        function GetParentInstitutions() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetParentInstitutions", "PaymentVoucher")",
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                if (response.data) {
                      $('#ParentInstitutionCode').empty();
                      $('<option value="">Select...</option>').appendTo('#ParentInstitutionCode');
                      $.each(response.data, function (i, d) {
                       $('<option value="' + d.ParentInstitutionCode + '">' + d.ParentInstitutionCode+'-'+d.ParentInstitutionName+ '</option>').appendTo('#ParentInstitutionCode');
                        });
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }

        $("#ParentInstitutionCode").change(function () {
            var institutionCode = $(this).val();
            if (institutionCode) {
                GetSubWarrants(institutionCode);
            }

        });

        function GetSubWarrants(institutionCode) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetSubWarrants", "PaymentVoucher")",
                data: { institutionCode },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                if (response.data) {
                       $('#SubWarrantCode').empty();
                      $('<option value="">Select...</option>').appendTo('#SubWarrantCode');
                      $.each(response.data, function (i, d) {
                       $('<option value="' + d.SubWarrantCode + '">' + d.SubWarrantCode+'-'+d.SubWarrantDescription+ '</option>').appendTo('#SubWarrantCode');
                        });
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }



        $("#btn_save_items_charge").click(function () {

            var total_items_value = parseFloat($("#total_items_amount").val().split(",").join(""));


            if (glItemsCharges.length == 0) {
                swal("Please Enter Amount !");
            }
            else if (total_items_value != sum_total) {
                swal("Please Total Line Amount must be equal to " + total_items_value.toLocaleString('en') + " !");
            }
            else {
                $('#fundCategoryModal').modal('hide');
                var fund_selected = glItemsCharges.length + " " + "Selected";
                $("#Funding").val(fund_selected);
                $('#glItemsModal').modal('hide');
                $("#infoPanel").hide();
                $('#selected_gls').empty();
                $('<tr style="background:#f5f5f5; color:#000000"><th style="text-align: center;width:5%">No</th><th>Fund </th><th>Reference</th><th>Currency</th><th style="text-align:right;width:12%">Amount</th></tr>').appendTo('#selected_gls');
                var j = 0;
                var sum = 0;
                $.each(glItemsCharges, function (i, d) {
                    j++;
                    sum = sum + parseFloat(d.Balance);
                    $('<tr><td align="center">' + j + '</td><td>' + d.FundCategoryDescription + '</td><td>' + d.FundCategoryId + '</td><td>' + d.Currency + '</td><td align="right">' + d.Balance.toLocaleString('en') + '</td></tr>').appendTo('#selected_gls');

                });
                $('<tr><td colspan="4" align="right"><strong>Total</strong></td><td align="right"><strong>' + sum.toLocaleString('en') + '/=</strong></td></tr>').appendTo('#selected_gls');

            }

        });


        $("#penalty").change(function () {
            if ($("#penalty").val() < 0) {
                swal("Percentage must be grater than 0");
                $("#penalty").val(0);
            } else if ($("#penalty").val() > 100) {
                swal("Percentage can not exceed  100");
                $("#penalty").val(0);
            }
        });

        $("#penalty").val(0);
        $("#penalty").keyup(function () {
            if ($("#penalty").val() < 0) {
                swal("Percentage must be grater than 0");
                $("#penalty").val(0);
            } else if ($("#penalty").val() > 100) {
                swal("Percentage can not exceed  100");
                $("#penalty").val(0);
            }
        });

            $("#RetentionType").change(function () {
                if ($(this).val() =="InternalTransfer") {
                    $(".ret_ptg_deposit").show();
                    $("#ret_ptg_bank").hide();
                } else {
                    $("#ret_ptg_bank").show();
                    $(".ret_ptg_deposit").hide();
                    var currency = "TZS";
                    loadRetentionBankAccount(currency);
                }
            });

            $("#TransactionCurrency").change(function () {
                var currency = $(this).val();
                $(".currencyDisp").text(currency);
            });
            function loadRetentionBankAccount(currency) {
                      $.ajax({
                type: "GET",
                url: "@Url.Action("GetRetentionBankAccount", "Contract")",
               data: { currency },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                if (response.data) {
                    $('#RetentionBankAccountTo').empty();
                    $('<option value="">Select...</option>').appendTo('#RetentionBankAccountTo');
                      $.each(response.data, function (i, d) {
                          $('<option value="' + d.AccountNumber + '">' + d.AccountNumber + '-' + d.Currency + '-' + d.AccountName + '</option>').appendTo('#RetentionBankAccountTo');
                        });
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
            }
        //SHOW LOADER ICON
        $(document).ajaxStart(function () {
            $("#divLoader").show();
        });
        //HIDE LOADER ICON
        $(document).ajaxStop(function () {
            $("#divLoader").hide();
        });

        </script>
    }












