@model IFMIS.Areas.IFMISTZ.Models.PurchaseSummaryVM
@{
    ViewBag.Title = "Purchase Order Items";
}
 <style>
        .pull-right {
            margin-top: 10px;
        }

        ul .header-dropdown-list, .hidden-xs {
            margin-top: 10px;
        }
    </style>
 <div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Contract Items</h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">

                            <div align="center">
                                <img src="/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>
                            <div class="row"> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Number&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractNumber)</div><div class="col-sm-6 col-md-6 col-lg-6"><strong>Amount&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractAmount) @Html.DisplayFor(model => model.OperationalCurrency)</div></div>
                            <div class="row"> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Legal Number&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractNo)</div></div>
                            <hr />
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitItem(this)" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.SourceId)
                            <div class="form-horizontal">



                                <div class="form-group">
                                    @Html.LabelFor(model => model.EntryType, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownList("EntryType", new List<SelectListItem>
                                        {
                                        new SelectListItem{ Text="--Select--", Value = "" },
                                        new SelectListItem{ Text="By Form", Value = "Single",Selected=true },
                                        new SelectListItem{ Text="By Uploading", Value = "Multiple" },
                                        }, new { @class = "form-control select2",@id="EntryTpye" })
                                    </div>

                                    <div class="col-md-6 forFile">
                                        <div style="float:right;margin-right:20px">
                                            <a href="~/Media/Contract/ContractBOQSample.xlsx">
                                                <i class="fa fa-download">&nbsp;&nbsp;&nbsp;</i>Download Items Sample File
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                                <div class="form-group">

                                    @Html.LabelFor(model => model.ItemCategoryId, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ItemCategoryId, Model.ItemCategoriesList, "Select ", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.ItemCategoryId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.Label("Quantity", htmlAttributes: new { @class = "control-label forForm   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <input type="text" name="Quantity" id="Quantity" value="" class="form-control forForm" autocomplete="off">
                                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.Label("Class", htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <select name="ItemClassificationId" id="ItemClassificationId" class="form-control select2"></select>
                                        @Html.ValidationMessageFor(model => model.ItemClassificationId, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.Label("Unit Price", htmlAttributes: new { @class = "control-label col-md-2 forForm", @style = "text-align:left" })
                                    <div class="col-md-4 forForm">
                                        <div class="input-group">
                                            <span class="input-group-addon">@Html.DisplayFor(model => model.OperationalCurrency)</span>
                                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label col-md-2 forForm", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control forForm", @autocomplete = "off", maxlength = 50 } })
                                        @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger forForm" })
                                    </div>
                                    @Html.Label("Overhead", htmlAttributes: new { @class = "control-label col-md-2 forForm", @style = "text-align:left" })

                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.OverheadPercentage, new { htmlAttributes = new { @class = "form-control forForm", @autocomplete = "off", @placeholder = "Percentage" } })
                                        @Html.ValidationMessageFor(model => model.OverheadPercentage, "", new { @class = "text-danger forForm" })
                                    </div>
                                </div>
                                <div class="form-group forForm">

                                    @Html.LabelFor(model => model.UOM, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.UOM, Model.UOMList, "Select ", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.UOM, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.Label("Total Amount", htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })

                                    <div class="col-md-4 forForm">
                                        <div class="input-group">

                                            <span class="input-group-addon">@Html.DisplayFor(model => model.OperationalCurrency)</span>


                                            @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <div class="form-group">


                                    @Html.LabelFor(model => model.PaymentScheduleId, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.PaymentScheduleId, Model.PaymentScheduleList, "Select ", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.PaymentScheduleId, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.VatStatus, htmlAttributes: new { @class = "control-label col-md-2 forForm", @style = "text-align:left" })

                                    <div class="col-md-4 forForm">

                                        <input type="checkbox" name="VatStatus" value="Applicable" id="VatStatus">
                                        @Html.EditorFor(model => model.VatApplicable, new { htmlAttributes = new { @style = "width:40px;font-weight:bold",@readonly="readonly" } })
                                    </div>

                                </div>

                                <div class="form-group forFile">
                                    @Html.LabelFor(model => model.UploadFile, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <input type="file" name="UploadFile" class="form-control" />
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2">
                                            <a href="@Url.Action("PendingContract","Contract")" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                            <button type="submit" id="save_payment" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                            </button>
                                            <a href="@Url.Action("PendingContract","Contract")" class="btn btn-info" style="float:left;margin-left:5px">
                                                <i class="fa fa-save"></i>Finish
                                            </a>

                                        </div>
                                    </div>
                                </div>
                            </div>
                                }
                                <div id="purchase-items-list">
                                    <div style="text-align:right;background-color:aliceblue;padding-right:20px">
                                        @Html.DisplayNameFor(model => model.TotalItemAmount): <strong>@Html.DisplayFor(model => model.TotalItemAmount)</strong><br />
                                        @Html.DisplayNameFor(model => model.Balance): <strong>@Html.DisplayFor(model => model.Balance)</strong><br />
                                    </div>
                                    @if (Model.PurchaseItemsList.Count() > 0)
                                    {
                                    var i = 0;
                                    <div class="accordion-body">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>

                                                    <th scope="col" style="text-align: center">#</th>
                                                    <th scope="col">Payment Schedule</th>
                                                    <th scope="col">Category</th>
                                                    <th scope="col" style="text-align: left">Item </th>
                                                    <th scope="col" style="text-align: center">Quantity</th>
                                                    <th scope="col" style="text-align: left">UOM</th>
                                                    <th scope="col" style="text-align: right">Unit Price</th>
                                                    <th scope="col" style="text-align:right">VAT</th>
                                                    <th scope="col" style="text-align:center">Overhead</th>
                                                    <th scope="col" style="text-align: right">Total Amount</th>
                                                    <th scope="col" style="text-align:center;width:12%">Action</th>

                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in Model.PurchaseItemsList)
                                                {
                                                i++;

                                                string overhead = "";
                                                if (item.OverheadPercentage > 0)
                                                {
                                                overhead = item.OverheadPercentage + "%";
                                                }
                                                <tr>
                                                    <td style="text-align: center">@i</td>
                                                    <td>@item.PaymentScheduleDesc</td>
                                                    <td>@item.ItemCategory</td>
                                                    <td>@item.ItemDesc</td>
                                                    <td style="text-align: center">@item.Quantity</td>
                                                    <td>@item.UOM</td>
                                                    <td style="text-align: right">@Convert.ToDecimal(item.UnitPrice).ToString("#,##0/=") </td>
                                                    <td style="text-align: right">@Convert.ToDecimal(item.VAT).ToString("#,##0/=")</td>
                                                    <td style="text-align: center">@overhead</td>
                                                    <td style="text-align: right">@Convert.ToDecimal(item.TotalAmount).ToString("#,##0/=")</td>
                                                    <td style="text-align: center">
                                                        <div class="btn-group">
                                                            <button type="button" class="btn  btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span><span class="sr-only">Toggle Dropdown</span></button>
                                                            <ul class="dropdown-menu">
                                                                <li style="text-align:left"><a href="#" onclick="editPurchaseItem(@item.ContractDetailId)"><i class="fa fa-edit"></i> Edit</a></li>
                                                                <li style="text-align:left"><a href="#" onclick="cancelItem(@item.ContractDetailId)"><i class="fa fa-trash-o"></i> Cancel</a></li>
                                                            </ul>
                                                        </div>
                                                    </td>
                                                </tr>



                                                }
                                                <tr>
                                                    <td align="right" colspan="7"><strong>Total</strong></td>
                                                    <td align="right">
                                                        <strong>@Convert.ToDecimal(Model.PurchaseItemsList.Select(a => a.VAT).DefaultIfEmpty(0).Sum()).ToString("#,##0.00/=")</strong>
                                                    </td>
                                                    <td></td>
                                                    <td align="right">
                                                        <strong>@Convert.ToDecimal(Model.PurchaseItemsList.Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum()).ToString("#,##0.00/=")</strong>
                                                    </td>
                                                    <td></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    }

                                </div>
                            </div>

                    </div>


                </div>
            </article>

        </div>
    </section>

</div>

<div class="modal fade" id="purchase-item-modal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog modal-lg" style="width:80%;">
        <div width="90%" class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">
                    Edit Item Form
                </h4>
            </div>
            <div class="modal-body" id="edit-purchase-item">

            </div>

        </div>
    </div>

</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">

        $(document).ready(function () {

            $(".forFile").hide();
            $(".forForm").show();
            var selected = "Single";
            $("#EntryTpye").change(function () {
                selected = $("#EntryTpye").val();
                if (selected == "Single") {
                    $(".forFile").hide();
                    $(".forForm").show();
                } else {
                    $(".forFile").show();
                    $(".forForm").hide();
                }
            });

            $("#ItemCategoryId").change(function () {
                var id = $(this).val();
                var url = '@Url.Action("GetItemClassifications", "Procurement")';
                $.ajax({
                type: "GET",
                url: url,
                data: { id : id },
                success: function (response) {
                    $("#ItemClassificationId").empty();
                    $("#ItemClassificationId").append(response);
                }
                })
               });

            $(function () { // this will be called when the DOM is ready
                $("#UnitPrice").keyup(function () {
                    var unit_price = parseFloat($(this).val().split(",").join(""));
                    var quantity = parseFloat($("#Quantity").val().split(",").join(""));
                    if (quantity > 0) {
                        var overhead = parseFloat($("#OverheadPercentage").val());
                        var total = unit_price * quantity;
                        var checkedValue = $("#VatStatus:checked").val();

                        if (checkedValue == "Applicable") {
                            var vat =  @Model.VatPercentage;
                            var total_vat = total * vat / 100;
                            var grand_total = total_vat + total;
                            if (overhead > 0) {
                                grand_total = grand_total + total * overhead / 100;
                            }
                            var total_amount = grand_total.toFixed(2);
                            $("#TotalAmount").val(total_amount.toLocaleString('en'));

                        } else {
                            if (overhead > 0) {
                                total = total + total * overhead / 100;
                            }
                            $("#TotalAmount").val(total.toLocaleString('en'));

                        }

                    }

                });

            });
            $(function () { // this will be called when the DOM is ready
                $("#Quantity").keyup(function () {

                    var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                    if (unit_price > 0) {
                        var quantity = parseFloat($(this).val().split(",").join(""));
                        var total = unit_price * quantity;
                        var overhead = parseFloat($("#OverheadPercentage").val());
                        var checkedValue = $("#VatStatus:checked").val();

                        if (checkedValue == "Applicable") {
                            var vat = @Model.VatPercentage;
                            var total_vat = total * vat / 100;
                            var grand_total = total_vat + total;
                            if (overhead > 0) {
                                grand_total = grand_total + total * overhead / 100;
                            }
                            var total_amount = grand_total.toFixed(2);
                            $("#TotalAmount").val(total_amount.toLocaleString('en'));

                        } else {
                            if (overhead > 0) {
                                total = total + total * overhead / 100;
                            }
                            $("#TotalAmount").val(total.toLocaleString('en'));

                        }
                    }

                });

            });

            $(function () { // this will be called when the DOM is ready
                $("#OverheadPercentage").keyup(function () {
                    var overhead = parseFloat($(this).val());
                    if (overhead >= 0) {
                    } else {
                        overhead = 0;
                    }
                    var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                    var quantity = parseFloat($("#Quantity").val().split(",").join(""));
                    if (unit_price > 0 && quantity > 0) {
                        var total = unit_price * quantity;
                        var checkedValue = $("#VatStatus:checked").val();
                        if (checkedValue == "Applicable") {
                            var vat = @Model.VatPercentage;
                            var total_vat = total * vat / 100;
                            var grand_total = total_vat + total + total * overhead / 100;
                            var total_amount = grand_total.toFixed(2);
                            $("#TotalAmount").val(total_amount.toLocaleString('en'));
                        } else {
                            total = total + total * overhead / 100;
                            $("#TotalAmount").val(total.toLocaleString('en'));

                        }
                    }

                });

            });

            $("#VatStatus").change(function (e) {
                $("#VatApplicable").val(e.target.checked ? "YES" : "NO");
                var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                var quantity = parseFloat($("#Quantity").val().split(",").join(""));
                var overhead = parseFloat($(this).val());
                if ($(this).is(":checked")) {
                    if (unit_price >= 0 && quantity >= 0) {
                        var total = unit_price * quantity;
                        var vat =  @Model.VatPercentage;
                        var total_vat = total * vat / 100;
                        var grand_total = total_vat + unit_price * quantity;
                        if (overhead > 0) {
                            grand_total = grand_total + total * overhead / 100;
                        }
                        var total_amount = grand_total.toFixed(2);
                        $("#TotalAmount").val(total_amount.toLocaleString('en'));

                    }

                } else {
                    if (unit_price >= 0 && quantity >= 0) {
                        var total = unit_price * quantity;
                        if (overhead > 0) {
                            total = total + total * overhead / 100;
                        }
                        $("#TotalAmount").val(total.toLocaleString('en'));

                    }
                }
            });



            });

        function SubmitItem(formData) {
            $("#save_purchase_item").prop('disabled', true);
            var url = '@Url.Action("SaveContractItem", "Contract")';
                           var ajaxConfig = {
                               type: "post",
                               url: url,
                               data: new FormData(formData),
                               success: function (response) {
                                   $("#save_purchase_item").prop('disabled', false);
                                   if (response == "Success") {
                                       swal("Item saved successfully", { icon: "success" })
                                           .then((value) => {
                                               location.reload();
                                           });
                                   }
                                   else {
                                       swal(response);
                                   }
                               },
                                 error: function (xhr) {
                                 $("#save_purchase_item").prop('disabled', false);
                                   swal(error);
                               },
                           }
            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }

    //CANCEL iTEM
        var cancelItem = function (id) {
            swal({
                title: 'Confirmation',
                text: "Do you what to cancel this item  ?",
                buttons: [
                  'No',
                  'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    var url = '@Url.Action("DeleteItem", "Contract")';
                    $.ajax(
        {
            type: "POST",
            url: url,
            data: { id: id },
            success: function (response) {
                if (response == "Success") {
                     swal("Deleted  successfully!", { icon: "success" })
                         .then((value) => {
                             location.reload();
                                              });


                }
                else {

               swal(response);
                }
            },
            error: function (xhr) {
                swal(error);
            },

        });
                } else {
                    swal("Cancelled", "No change was made");
                }
            });

        }



        function editPurchaseItem(id) {
                  var url = '@Url.Action("PurchaseItemForm", "Contract")';
            $("#edit-purchase-item").load(url, { id: id }, function (response, status, xhr) {
                if (status == "error") {
                    $("#edit-purchase-item").html("Error on accessing this item, contact system support.");
                }
                $("#purchase-item-modal").modal("show");
            });

        };
        $("#UnitPrice").autoNumeric('init');

      function UpdateItem(formData) {
            $("#purchase-item-modal #save_purchase_item").prop('disabled', true);
            var url = '@Url.Action("UpdateItem", "Contract")';
                           var ajaxConfig = {
                               type: "post",
                               url: url,
                               data: new FormData(formData),
                               success: function (result) {
                                   $("#purchase-item-modal #save_purchase_item").prop('disabled', false);
                                   if (result.response == "Success") {
                                       swal("Item saved successfully", { icon: "success" })
                                           .then((value) => {
                                               $("#purchase-item-modal").modal("hide");
                                               location.reload();
                                           });
                                   }
                                   else {
                                       swal(result.response);
                                   }
                               },
                               error: function (xhr) {
                                   $("#purchase-item-modal #save_purchase_item").prop('disabled', false);
                                   swal(error);
                               },
                           }
            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }

        //SHOW LOADER ICON
        $(document).ajaxStart(function () {
            $("#divLoader").show();
        });
        //HIDE LOADER ICON
        $(document).ajaxStop(function () {
            $("#divLoader").hide();
        });

    </script>
}












