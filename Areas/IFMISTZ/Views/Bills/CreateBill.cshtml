@model IFMIS.Areas.IFMISTZ.Models.CreateBillVM
@{

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="divLoader"></div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Create Bill </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            <form class="form-horizontal" autocomplete="off" id="createBillForm" name="createBillForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                @Html.HiddenFor(model => model.CustomerName)
                                @Html.HiddenFor(model => model.BillPayOptionDesc)
                                @Html.HiddenFor(model => model.OperationalAmount)

                                <!-- Start of select 2 customer -->
                                <div class="form-group">
                                    <section>
                                        <label class="col-md-2 control-label">Customer</label>
                                        <div class="col col-md-8">
                                            @Html.TextBoxFor(model => model.CustomerId, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                </div>
                                <!-- End of select 2 customer -->
                                <div class="form-group">
                                    <section>
                                        <label class="col-md-2 control-label">Id No</label>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" name="IdNo" id="IdNo" value="@Model.IdNo" placeholder="Id No" readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.IdNo, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="col-md-2 control-label">Id Type</label>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" name="IdType" id="IdType" value="@Model.IdType" placeholder="Id Type" readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.IdType, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                </div>
                                <div class="form-group">
                                    <section>
                                        <label class="col-md-2 control-label">Phone No</label>
                                        <div class="col-md-3">
                                            <input class="form-control" type="text" name="PhoneNo" id="PhoneNo" value="@Model.PhoneNo" placeholder="Phone Number" required readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                    <section>
                                        <label class="col-md-2 control-label">Email Address</label>
                                        <div class="col-md-3">
                                            <input id="EmailAddress" name="EmailAddress" value="@Model.EmailAddress" class="form-control" placeholder="Email Address" type="email" readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                </div>
                                <div class="form-group">
                                    <label class="col-md-2 control-label">Currency</label>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.OperationalCurrency, Model.OperationalCurrencies, "Select Currency", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.OperationalCurrency, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="col-md-2 control-label">Pay Option</label>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.BillPayOption, Model.BillPayOptions, "Select Pay Option", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.BillPayOption, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="col-md-2 control-label">Valid Days</label>
                                    <div class="col-md-1">
                                        <input class="form-control" type="number" name="BillValidDays" id="BillValidDays" placeholder="Bill Valid days" required value="30">
                                        @Html.ValidationMessageFor(model => model.BillValidDays, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="col-md-2 control-label">Description</label>
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        (Max words 250, remaining words <span id="txtRemainigWords">250</span>)
                                    </div>
                                </div>

                                <hr />

                                <div class="alert alert-info" role="alert">
                                    Bill Item(s) <span class="badge" id="txtBillItems">0</span>, Total Amount <span class="badge" id="txtTotalTotalAmount">0</span>
                                </div>

                                <div id="divBillItemsTable"></div>

                                <fieldset class="scheduler-border">

                                    <legend class="scheduler-border"><b>Add Bill Item Form</b></legend>
                                    <div class="form-group">
                                        <div class="col-md-3">
                                            @Html.Label("Revenue Source", htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownList("CostingId", ViewBag.RevenueSources as SelectList, "Select Revenue Source", new { @class = "form-control" })
                                            @Html.Hidden("CostCode")
                                            @Html.Hidden("CostName")
                                            @Html.Hidden("CostDesc")
                                            @Html.Hidden("UOM")
                                            @Html.Hidden("GLAccountReceivable")
                                            @Html.Hidden("GLAccountRevenue")
                                        </div>
                                        <div class="col-md-3">
                                            @Html.Label("Sub Revenue Source", htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownList("SubCostingId", ViewBag.SubRevenueSources as SelectList, "Select Sub Revenue Source", new { @class = "form-control" })
                                            @Html.Hidden("SubCostCode")
                                            @Html.Hidden("SubCostName")
                                            @Html.Hidden("SubCostDesc")
                                        </div>
                                        <div class="col-md-2">
                                            @Html.Label("Unit Cost", htmlAttributes: new { @class = "control-label" })
                                            @Html.Editor("UnitCost", new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                        <div class="col-md-1">
                                            @Html.Label("Quantity", htmlAttributes: new { @class = "control-label" })
                                            @Html.Editor("Quantity", new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                        <div class="col-md-2">
                                            @Html.Label("Net Amount", htmlAttributes: new { @class = "control-label" })
                                            @Html.Editor("NetAmount", new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-12">
                                            @Html.CheckBox("HasVat")
                                            @Html.DisplayName("Has VAT?")
                                        </div>
                                        @Html.Hidden("VatPercentage")
                                        @Html.Hidden("GlAccountVat")
                                        @Html.Hidden("VatAmount")
                                        @Html.Hidden("TotalAmount")
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-12" id="divVat" style="display: none">
                                            VAT percentage is <span class="badge" id="txtVatPercentage"></span>,
                                            Net amount is <span class="badge" id="txtNetAmount"></span>,
                                            VAT amount is <span class="badge" id="txtVatAmount"></span>,
                                            Total amount is <span class="badge" id="txtTotalAmount"></span><br />
                                            <span id="divHasVat" style="color: red; display: none"> VAT percentage setting is missing </span><br />
                                            <span id="divGlAccountVat" style="color: red; display: none"> Gl Account for VAT is missing </span>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnAddBillItem">
                                                <i class="fa fa-plus"></i>
                                                Add Bill Item
                                            </button>
                                        </div>
                                    </div>
                                </fieldset>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-8">
                                            <button class="btn btn-info" type="submit" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingBills","Billings")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->
            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->
    </section>
    <!-- end widget grid -->
</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
    <script type="text/javascript">
        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        $(function () {
            $("#UnitCost").autoNumeric("init");
            $("#Quantity").autoNumeric("init");
            $("#NetAmount").autoNumeric("init");
            $("#VatAmount").autoNumeric("init");
            $("#TotalAmount").autoNumeric("init");
            // This for dynamic table. Don't know why on load but it works
            var billItems = [];

            $("#btnAddBillItem").click(function () {

                if ($("#CostingId").val() == "" || $("#SubCostingId").val() == ""
                    || $("#UnitCost").val() == "" || $("#Quantity").val() == "" || $("#NetAmount").val() == "") {
                    return true;
                }

                billItems.push({
                    CostingId: $('#CostingId').val(),
                    CostCode: $('#CostCode').val(),
                    CostName: $("#CostingId option:selected").text(),
                    CostDesc: $('#CostDesc').val(),
                    UOM: $('#UOM').val(),
                    GLAccountReceivable: $('#GLAccountReceivable').val(),
                    GLAccountRevenue: $('#GLAccountRevenue').val(),
                    SubCostingId: $('#SubCostingId').val(),
                    SubCostCode: $('#SubCostCode').val(),
                    SubCostName: $("#SubCostingId option:selected").text(),
                    UnitCost: $('#UnitCost').val(),
                    Quantity: $('#Quantity').val(),
                    NetAmount: $('#NetAmount').val(),
                    HasVAT: $("#HasVat").is(':checked'),
                    VatPercentage: $("#HasVat").is(':checked') ? $('#VatPercentage').val() : 0,
                    VatAmount: $('#VatAmount').val(),
                    GlAccountVat: $('#GlAccountVat').val(),
                    TotalAmount: $('#TotalAmount').val(),
                    OperationalAmount: $('#TotalAmount').val(),
                });

                //Clear fields
                $("#CostingId").val("");
                $("#SubCostingId").val("");
                $("#SubCostCode").val("");
                $("#UnitCost").val("");
                $("#Quantity").val("");
                $("#NetAmount").val("");
                $("#HasVat").prop("checked", false);
                $("#txtVatPercentage").val("");
                $("#txtNetAmount").val("");
                $("#txtVatAmount").val("");
                $("#txtTotalAmount").val("");
                $("#divVat").hide();

                GenerateBillDetailsTable();

                //function for show added items in table
                function GenerateBillDetailsTable() {
                    if (billItems.length > 0) {
                        var $table = $('<table class="table table-condensed table-stripped table-hover table-bordered"/>');
                        $table.append('<thead>' +
                            '<tr><th colspan="9">Bill Items</th>' +
                            '<tr><th>#</th><th style="text-align: center">Revenue Source</th>' +
                            '<th style="text-align: center">Sub Revenue Source</th>' +
                            '<th style="text-align: center">Unit Cost</th>' +
                            '<th style="text-align: center">Quantity</th>' +
                            '<th style="text-align: center">Net Amount</th>' +
                            '<th style="text-align: center">VAT Amount</th>' +
                            '<th style="text-align: center">Total Amount</th>' +
                            '<th style="text-align: center">Action</th></tr>' +
                            '</thead>');
                        var $tbody = $('<tbody/>');
                        var totalNetAmount = 0;
                        var totalVatAmount = 0;
                        var totalTotalAmount = 0;
                        var j = 0;
                        $.each(billItems, function (i, val) {
                            ++j;
                            var netAmount = val.NetAmount.replace(/,/g, "");
                            var vatAmount = val.VatAmount.replace(/,/g, "");
                            var totalAmount = val.TotalAmount.replace(/,/g, "");
                            totalNetAmount = parseFloat(totalNetAmount) + parseFloat(netAmount);
                            totalVatAmount = parseFloat(totalVatAmount) + parseFloat(vatAmount);
                            totalTotalAmount = parseFloat(totalTotalAmount) + parseFloat(totalAmount);
                            var $row = $('<tr/>');
                            $row.append($('<td/>').html(j));
                            $row.append($('<td/>').html(val.CostName));
                            $row.append($('<td/>').html(val.SubCostName));
                            $row.append($('<td style="text-align: right"/>').html(val.UnitCost));
                            $row.append($('<td style="text-align: right"/>').html(val.Quantity));
                            $row.append($('<td style="text-align: right"/>').html(val.NetAmount));
                            $row.append($('<td style="text-align: right"/>').html(val.VatAmount));
                            $row.append($('<td style="text-align: right"/>').html(val.TotalAmount));
                            //$row.append($('<td style="text-align: center"/>').html('<a href="#"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>'));
                            var $remove = $('<a href="#">Remove</a>');
                            $remove.click(function (e) {
                                e.preventDefault();
                                billItems.splice(i, 1);
                                GenerateBillDetailsTable();
                            });
                            $row.append($('<td/>').html($remove));
                            $tbody.append($row);
                        });
                        var $row1 = $('<tr/>');
                        $row1.append($('<td colspan="5" style="text-align: center"/>').html('<b>Total</b>'));
                        $row1.append($('<td id="totalNetAmount" style="text-align: right"/>').html(totalNetAmount));
                        $row1.append($('<td id="totalVatAmount" style="text-align: right"/>').html(totalVatAmount));
                        $row1.append($('<td id="totalTotalAmount" style="text-align: right"/>').html(totalTotalAmount));
                        $row1.append($('<td/>').html(''));
                        $tbody.append($row1);
                        $table.append($tbody);
                        $('#divBillItemsTable').html($table);
                        $('#totalNetAmount').autoNumeric('init');
                        $('#totalVatAmount').autoNumeric('init');
                        $('#totalTotalAmount').autoNumeric('init');
                        $('#txtBillItems').html(numeral(billItems.length).format("0,0"));
                        $('#txtTotalTotalAmount').html(numeral(totalTotalAmount).format("0,0.00"));
                    } else {
                        $('#divBillItemsTable').html('');
                        $("#btnSave").attr("disabled", false);
                        $("#btnAddBillItem").attr("disabled", false);
                    }
                }
            });

            $("#btnSave").click(function () {
                $("#divLoader").show();
                $('#btnSave').prop("disabled", true);

                if (!$("#createBillForm").valid()) {
                    $("#divLoader").hide();
                    $('#btnSave').prop("disabled", false);
                    return false;
                }

                if (billItems.length == 0) {
                    swal({
                        text: "Please add atleast one bill item in order to save",
                        icon: "warning",
                        button: "OK",
                    });

                    $("#divLoader").hide();
                    $('#btnSave').prop("disabled", false);
                    return false;
                }

                var token = $("[name='__RequestVerificationToken']").val();
                var data = {
                    __RequestVerificationToken: token,
                    CustomerId: $('#CustomerId').val(),
                    CustomerName: $('#CustomerName').val(),
                    IdNo: $("#IdNo").val(),
                    IdType: $('#IdType').val(),
                    PhoneNo: $('#PhoneNo').val(),
                    EmailAddress: $('#EmailAddress').val(),
                    OperationalAmount: $('#txtTotalTotalAmount').html(),
                    OperationalCurrency: $('#OperationalCurrency').val(),
                    BillPayOption: $('#BillPayOption').val(),
                    BillPayOptionDesc: $('#BillPayOptionDesc').val(),
                    BillValidDays: $('#BillValidDays').val(),
                    Remarks: $('#Remarks').val(),
                    ApplyDate: $('#ApplyDate').val(),
                    BillDetails: billItems
                }

                var url = '@Url.Action("CreateBill", "Bills")';
                $.ajax({
                    url: url,
                    type: "POST",
                    //data: JSON.stringify(data),
                    data: data,
                    dataType: "JSON",
                    //contentType: "application/json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (response) {
                        //check is successfully save to database
                        if (response == "Success") {
                            //will send status from server side
                            swal({
                                text: "Bill successfully saved.",
                                icon: "success",
                                button: "OK",
                            }).then(function () {
                                window.location = '@Url.Action("PendingBills", "Billings")';
                            });
                        }
                        else {
                            swal({
                                text: response,
                                icon: "warning",
                                button: "OK",
                            })
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        swal({
                            text: "Error. Please try again..",
                            icon: "error",
                            button: "OK",
                        })
                    },
                    complete: function () {
                        $("#divLoader").hide();
                        $('#btnSave').prop("disabled", false);
                    }
                });
            });
            // End of dynamic table

            var url = '@Url.Action("GetCustomers", "Customers")';
            $("#CustomerId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Select Customer',
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedCustomer", "Customers")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: url, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.customers }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $('#CustomerId').on("change", function () {
            var customerId = $("#CustomerId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCustomer", "Customers")',
                data: { id: customerId },
                success: function (data, status, jqXHR) {
                    $("#CustomerName").val(data.CustomerName);
                    $("#IdTypeId").val(data.IdTypeId);
                    $("#IdType").val(data.IdType);
                    $("#IdNo").val(data.IdNo);
                    $("#PhoneNo").val(data.PhoneNo);
                    $("#EmailAddress").val(data.EmailAddress);
                },
                error: function () {
                    swal({
                        text: "Error on accessing customer details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $("#BillPayOption").on("change", function () {
            $("#BillPayOptionDesc").val($("#BillPayOption option:selected").text());
        });

        $("#Remarks").keyup(function (e) {
            var maxCharacters = 250;
            var inputCharacters = $(this).val().length;
            var remainingCharacters = maxCharacters - inputCharacters;
            $("#txtRemainigWords").html(remainingCharacters);

            if (remainingCharacters <= 0 && e.keyCode != 8) {
                $("#Remarks").addClass("input-has-exceeded");
                $("#Remarks").prop("readonly", true);
            } else {
                $("#Remarks").removeClass("input-has-exceeded");
                $("#Remarks").prop("readonly", false);
            }
        });

        $('#CostingId').on("change", function () {
            var costingId = $("#CostingId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCosting", "Costings")',
                data: { id: costingId },
                success: function (data, status, jqXHR) {
                    $("#CostCode").val(data.CostCode);
                    $("#CostName").val(data.CostName);
                    $("#CostDesc").val(data.CostDesc);
                    $("#UOM").val(data.UOM);
                    //$("#BillValidDays").val(data.BillValidDays);
                    $("#GLAccountReceivable").val(data.GLAccountReceivable);
                    $("#GLAccountRevenue").val(data.GLAccountRevenue);
                    $("#SubCostingId option").remove();
                    $("#SubCostingId").append('<option value="">Select Sub Revenue Source</option>');
                    $.each(data.SubCostings, function (i, subCosting) {
                        $("#SubCostingId").append('<option value="'
                                                   + subCosting.SubCostingId + '">'
                                             + subCosting.SubCostDesc + '</option>');
                    });
                    $("#SubCostDesc").val("");
                    var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
                    var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
                    var hasVat = $("#HasVat").is(':checked');
                    var netAmount = GetNetAmount(num1, num2);
                    var vatAmount = GetVatAmount(num1, num2, hasVat);
                    var totalAmount = GetTotalAmount(num1, num2, hasVat);
                    $("#NetAmount").autoNumeric('set', netAmount);
                    $("#VatAmount").autoNumeric('set', vatAmount);
                    $("#TotalAmount").autoNumeric('set', totalAmount);
                    $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
                    $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
                    $('#txtTotalAmount').html(numeral(totalAmount).format("0,0.00"));
                },
                error: function () {
                    swal({
                        text: "Error on accessing costing details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#SubCostingId').on("change", function () {
            var subCostingId = $("#SubCostingId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSubCosting", "SubCostings")',
                data: { id: subCostingId },
                success: function (data, status, jqXHR) {
                    $("#SubCostCode").val(data.SubCostCode);
                    $("#SubCostName").val(data.SubCostName);
                    $("#SubCostDesc").val(data.SubCostDesc);
                    $("#UnitCost").autoNumeric('set', data.UnitCost);
                    var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
                    var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
                    var hasVat = $("#HasVat").is(':checked');
                    var netAmount = GetNetAmount(num1, num2);
                    var vatAmount = GetVatAmount(num1, num2, hasVat);
                    var totalAmount = GetTotalAmount(num1, num2, hasVat);
                    $("#NetAmount").autoNumeric('set', netAmount);
                    $("#VatAmount").autoNumeric('set', vatAmount);
                    $("#TotalAmount").autoNumeric('set', totalAmount);
                    $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
                    $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
                    $('#txtTotalAmount').html(numeral(totalAmount).format("0,0.00"));
                },
                error: function () {
                    swal({
                        text: "Error on accessing sub costing details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $("#UnitCost").keyup(function () {
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var totalAmount = GetTotalAmount(num1, num2, hasVat);
            $("#NetAmount").autoNumeric('set', netAmount);
            $("#VatAmount").autoNumeric('set', vatAmount);
            $("#TotalAmount").autoNumeric('set', totalAmount);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $('#txtTotalAmount').html(numeral(totalAmount).format("0,0.00"));
        });

        $("#Quantity").keyup(function () {
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));;
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var totalAmount = GetTotalAmount(num1, num2, hasVat);
            $("#NetAmount").autoNumeric('set', netAmount);
            $("#VatAmount").autoNumeric('set', vatAmount);
            $("#TotalAmount").autoNumeric('set', totalAmount);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $('#txtTotalAmount').html(numeral(totalAmount).format("0,0.00"));
        });

        $('#HasVat').click(function () {
            $("#divVat").toggle(this.checked);
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetVatDetails")',
                async: false,
                success: function (data, status, jqXHR) {
                    var vatPercentage = 0;
                    var glAccountVat = "";
                    vatPercentage = data.VatPercentage;
                    glAccountVat = data.GlAccountVat;
                    $("#VatPercentage").val(vatPercentage);
                    $("#GlAccountVat").val(glAccountVat);
                    $('#txtVatPercentage').html(numeral(vatPercentage).format("0,0.00"));
                },
                error: function () {
                    swal({
                        text: "Error on accessing VAT details",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {

                }
            });

            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));;
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var totalAmount = GetTotalAmount(num1, num2, hasVat);
            $("#NetAmount").autoNumeric('set', netAmount);
            $("#VatAmount").autoNumeric('set', vatAmount);
            $("#TotalAmount").autoNumeric('set', totalAmount);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $('#txtTotalAmount').html(numeral(totalAmount).format("0,0.00"));

            if (hasVat && $("#VatPercentage").val() == 0) {
                $("#divHasVat").show();
                $("#btnAddBillItem").prop("disabled", false);
                $("#btnSave").prop("disabled", false);
            } else {
                $("#divHasVat").hide();
                $("#btnAddBillItem").prop("disabled", false);
                $("#btnSave").prop("disabled", false);
            }

            if (hasVat && ($("#GlAccountVat").val() == "" || $("#GlAccountVat").val() == null)) {
                $("#divGlAccountVat").show();
                $("#btnAddBillItem").prop("disabled", false);
                $("#btnSave").prop("disabled", false);
            } else {
                $("#divGlAccountVat").hide();
                $("#btnAddBillItem").prop("disabled", false);
                $("#btnSave").prop("disabled", false);
            }
        });

        function GetNetAmount(num1, num2) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            return num1 * num2;
        }

        function GetVatAmount(num1, num2, hasVat) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            if (hasVat) {
                var vatPercentage = $("#VatPercentage").val();
                return (num1 * num2) * (vatPercentage / 100);
            }

            return 0;
        }

        function GetTotalAmount(num1, num2, hasVat) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            if (hasVat) {
                var vatPercentage = $("#VatPercentage").val();
                return (num1 * num2) + ((num1 * num2) * (vatPercentage / 100));
            }

            return num1 * num2;
        }

    </script>
}