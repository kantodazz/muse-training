@model IFMIS.Areas.IFMISTZ.Models.CreatePaymentBatchVM

<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Payment batch</h2>
                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.AOfficerPaymentReference)
                                @Html.HiddenFor(model => model.AOfficerCurrency)

                                if (Model.RequireApprovalType == true)
                                {

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ApprovalType, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(model => model.ApprovalType, Model.ApprovalTypes, "Select Approval Type", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ApprovalType, "", new { @class = "text-danger" })
                                        </div>

                                    </div>

                                }

                                <div class="form-group" id="divEOffice">
                                    @Html.LabelFor(model => model.AOfficerApprovalId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.AOfficerApprovalId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Select Approval Reference" } })
                                        @Html.ValidationMessageFor(model => model.AOfficerApprovalId, "", new { @class = "text-danger" })

                                    </div>
                                    @Html.LabelFor(model => model.AOfficerTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.AOfficerTitle, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.AOfficerTitle, "", new { @class = "text-danger" })

                                    </div>

                                </div>
                                <div class="form-group" id="eOffice" style="display:none">
                                    @Html.LabelFor(model => model.AOfficerApprovedAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        <div class="input-group">

                                            <span class="input-group-addon currencyDispEoffice"></span>
                                            @Html.EditorFor(model => model.AOfficerApprovedAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.AOfficerApprovedAmount, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    @Html.LabelFor(model => model.AOfficerAvailableBalance, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        <div class="input-group">
                                            <span class="input-group-addon currencyDispEoffice"></span>
                                            @Html.EditorFor(model => model.AOfficerAvailableBalance, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.AOfficerAvailableBalance, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>


                                <div class="form-group">

                                    @Html.LabelFor(model => model.PaymentCategoryName, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-4">

                                        @Html.DropDownListFor(model => model.PaymentCategoryName, Model.PaymentCategoryNames, "Select Payment Category", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PaymentCategoryName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.InstitutionId, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.InstitutionId, Model.InstitutionNameList, "Select Institution Name", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.InstitutionId, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.BatchNo, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.BatchNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.BatchNo, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.BatchDesc, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.BatchDesc, new { htmlAttributes = new { @class = "form-control", @width = "200", @height = "400" } })
                                        @Html.ValidationMessageFor(model => model.BatchDesc, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.TransactionCurrency, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-right: 5px" })
                                    <div class="col-md-4">

                                        @Html.DropDownListFor(model => model.TransactionCurrency, Model.CurrencyList, "Select Currency", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.TransactionCurrency, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.PaymentChannel, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.PaymentChannel, Model.PaymentChannels, "Select Payment Channel", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PaymentChannel, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-group" id="trustAc" style="display:none">

                                    @Html.LabelFor(model => model.OperatorName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.OperatorName, Model.OperatorNameList, "Select Operator Name", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.OperatorName, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <button class="btn btn-info" type="submit" style="float: left">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PaymentBatchList","PaymentBatches")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">

        $("#eOffice").hide();
        $("#divEOffice").hide();

        $('#ApprovalType').on("change", function () {

            var invoiceType = $("#ApprovalType").val();
            if (invoiceType == "Electronic") {

                $("#eOffice").show();
                $("#divEOffice").show();

            } else  {

                $("#eOffice").hide();
                $("#divEOffice").hide();
            }


        });

        $('#PaymentChannel').on("change", function () {

            var paymentChannel = $("#PaymentChannel").val();
            if (paymentChannel == "MOBILE") {

                $("#trustAc").show();
            } else {

                $("#trustAc").hide();
            }
        });


        $("#InstitutionId").change(function () {

            var id = $(this).val();
            //var paymentCategory = $("#PaymentCategories option:selected").text();
            var paymentCategory = $("#PaymentCategoryName").val();
            var url = '@Url.Action("GetPaymentBatchNoPerInstitution")';

            $.ajax({
                type: "GET",
                url: url,
                contentType: "html",
                data: { id: id, paymentCategory: paymentCategory },
                success: function (response) {
                    $("#BatchNo").val("");
                    $("#BatchNo").val(response);
                }
            })
        });

        var availableBalanceEOffice = Number.MAX_SAFE_INTEGER;
        var approvedEOfficeAmount = Number.MAX_SAFE_INTEGER;

        $(function () {
            if ($("#AOfficerApprovalId")[0]) {
                availableBalanceEOffice = 0;
                approvedEOfficeAmount = 0;
            }
            $("#AOfficerApprovalId").select2({
                minimumInputLength: 2,
                width: 'resolve',
                ajax: {
                    url: '@Url.Action("GetApprovalByApprovalCategory", "DfundApprovals")',
                    type: "GET",
                    dataType: 'json',
                    data: function (term, approvalCategory) {
                        return { term: term, approvalCategory:"AO" };
                    },
                    results: function (data, page) {
                        return { results: data.approvals };
                    }
                }
            });
        });

        $("#AOfficerApprovalId").change(function () {
           $.ajax({
               type: "GET",
               url: '@Url.Action("GetApprovalByApprovalId", "DfundApprovals")',
               data: { id: $("#AOfficerApprovalId").val()},
               contenttype: "application/json; charset=utf-8",
               datatype: "json",
               success: function (response) {

                   if (response.success) {

                       console.log(response)

                       $("#AOfficerTitle").val(response.title);
                       $("#AOfficerPaymentReference").val(response.paymentRef);
                       $(".currencyDispEoffice").text(response.currency);
                       $("#AOfficerCurrency").val(response.currency);
                       $("#eOffice").show();
                       $("#AOfficerAvailableBalance").val(0)
                       availableBalanceEOffice = 0
                       approvedEOfficeAmount = 0;
                       if (response.balanceAmount) {

                           availableBalanceEOffice = response.balanceAmount;
                           $("#AOfficerAvailableBalance").val(toLabel(availableBalanceEOffice));

                       }
                       if (response.balanceAmount) {
                           approvedEOfficeAmount = response.approvedAmount;
                           $("#AOfficerApprovedAmount").val(toLabel(approvedEOfficeAmount));
                       }
                   }
               },
               failure: function (error) {
                   swal(error);
               }
           });
        });

        //End Eoffice

        //dfund


        var availableBalanceDfund = Number.MAX_SAFE_INTEGER;
        var approvedDfundAmount = Number.MAX_SAFE_INTEGER;

        $(function () {
            if ($("#DfundApprovalId")[0]) {
                availableBalanceDfund = 0;
                approvedDfundAmount = 0;
            }
            $("#DfundApprovalId").select2({
                minimumInputLength: 2,
                width: 'resolve',
                ajax: {
                    url: '@Url.Action("GetApprovalByApprovalCategory", "DfundApprovals")',
                    type: "GET",
                    dataType: 'json',
                    data: function (term, approvalCategory) {
                        return { term: term, approvalCategory:"DFUND" };
                    },
                    results: function (data, page) {
                        return { results: data.approvals };
                    }
                }
            });
        });

        $("#DfundApprovalId").change(function () {
           $.ajax({
               type: "GET",
               url: '@Url.Action("GetApprovalByApprovalId", "DfundApprovals")',
               data: { id: $("#DfundApprovalId").val()},
               contenttype: "application/json; charset=utf-8",
               datatype: "json",
               success: function (response) {

                   if (response.success) {
                       $("#DfundTitle").val(response.title);
                       $("#DFundPaymentReference").val(response.reference);
                       $(".currencyDispDfund").text(response.currency);
                       $("#dfund").show();
                       $("#AvailableBalanceDFund").val(0)
                       availableBalanceDfund = 0
                       approvedDfundAmount = 0;
                       if (response.balanceAmount) {
                           availableBalanceDfund = response.balanceAmount;
                           $("#AvailableBalanceDFund").val(toLabel(availableBalanceDfund));

                       }
                       if (response.balanceAmount) {
                           approvedDfundAmount = response.approvedAmount;
                           $("#ApprovedAmountDFund").val(toLabel(approvedDfundAmount));
                       }
                   }
               },
               failure: function (error) {
                   swal(error);
               }
           });
       });

    </script>
}
