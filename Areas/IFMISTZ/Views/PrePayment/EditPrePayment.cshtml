@model IFMIS.Areas.IFMISTZ.Models.PurchaseOrderVM
@{
    ViewBag.Title = "Edit PrePayment";
}
<style>



    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }


    .search-icon {
        padding: 0.5rem;
    }


    input[type=text] {
        padding: 5px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
</style>


<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <br />
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>@ViewBag.Title </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">

                            <div align="center">
                                <img src="/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitSummary(this)" }))
                            {
                                @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.HiddenFor(model => model.PurchaseOrderId)
                            @Html.HiddenFor(model => model.PayeeDetailId)
                            @Html.HiddenFor(model => model.ForceAccountPaymentRegistrationId)
                            @Html.HiddenFor(model => model.EOfficeApprovalId)
                            @Html.HiddenFor(model => model.DfundApprovalId)
                            @Html.HiddenFor(model => model.CrossTrxToOperationExchangeRate)
                            @Html.HiddenFor(model => model.CrossTrxToDFundExchangeRate)
                            @Html.HiddenFor(model => model.OperationalCurrency)
                            @Html.HiddenFor(model => model.PaymentType)
                            <div class="form-group">
                                <label class="col-md-2 control-label" style="text-align:left">Supplier</label>
                                <div class="col-md-4">

                                    <div class="input-group">

                                        <span class="input-group-addon" onclick="SearchPayee()"><i class="fa fa-search"></i></span>
                                        @Html.EditorFor(model => model.PayeeName, new { htmlAttributes = new { @class = "form-control", @required = "required", autocomplete = "off", @placeholder = "Search", @onclick = "SearchPayee()" } })
                                        @Html.ValidationMessageFor(model => model.PayeeName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @Html.LabelFor(model => model.PayeeType, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.PayeeType, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.PayeeType, "", new { @class = "text-danger" })
                                </div>

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.EOfficePaymentReference, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.EOfficePaymentReference, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @*@Html.DropDownListFor(model => model.EOfficeApprovalId, Model.SubWarrantsList, "Select ---", new { @class = "form-control", @required = "required" })*@

                                    @Html.ValidationMessageFor(model => model.EOfficeApprovalId, "", new { @class = "text-danger" })

                                </div>
                                @Html.LabelFor(model => model.AvailableBalanceEOffice, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    <div class="input-group">

                                        <span class="input-group-addon currencyDispEoffice">@Html.DisplayFor(model => model.EOfficeCurrency)</span>
                                        @Html.EditorFor(model => model.AvailableBalanceEOffice, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.AvailableBalanceEOffice, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.EOfficeTitle, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.EOfficeTitle, new { htmlAttributes = new { @class = "form-control", @readonly = "@readonly" } })
                                    @Html.ValidationMessageFor(model => model.EOfficeTitle, "", new { @class = "text-danger" })

                                </div>
                                @Html.LabelFor(model => model.PrepaymentTypeId, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.PrepaymentTypeId, Model.ProcurementTypeList, "Select ---", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(model => model.PrepaymentTypeId, "", new { @class = "text-danger" })

                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.SubBudgetClass, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.SubBudgetClass, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                    @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })

                                </div>
                                @Html.LabelFor(model => model.PayerBankAccount, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.PayerBankAccount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                    @Html.ValidationMessageFor(model => model.PayerBankAccount, "", new { @class = "text-danger" })

                                </div>
                            </div>

                            @if (Model.RequireDFundApproval)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DFundPaymentReference, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.DFundPaymentReference, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                        @Html.ValidationMessageFor(model => model.DFundPaymentReference, "", new { @class = "text-danger" })

                                    </div>
                                    @Html.LabelFor(model => model.AvailableBalanceDFund, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <div class="input-group">

                                            <span class="input-group-addon dFundCurrency">@Html.DisplayFor(model => model.DFundCurrency)</span>
                                            @Html.EditorFor(model => model.AvailableBalanceDFund, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.AvailableBalanceDFund, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DfundTitle, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.DfundTitle, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.DfundTitle, "", new { @class = "text-danger" })

                                    </div>
                                    @Html.LabelFor(model => model.DfundAmountCommitment, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <div class="input-group">

                                            <span class="input-group-addon dFundCurrency">@Html.DisplayFor(model => model.DFundCurrency)</span>
                                            @Html.EditorFor(model => model.DfundAmountCommitment, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.DfundAmountCommitment, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="form-group">
                                @Html.LabelFor(model => model.TransactionAmount, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    <div class="input-group">

                                        <span class="input-group-addon currencyDispEoffice">@Html.DisplayFor(model => model.EOfficeCurrency)</span>
                                        @Html.EditorFor(model => model.TransactionAmount, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.TransactionAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @Html.LabelFor(model => model.PurchaseOrderAmount, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    <div class="input-group">

                                        <span class="input-group-addon currencyDisp">@Html.DisplayFor(model => model.OperationalCurrency)</span>
                                        @Html.EditorFor(model => model.PurchaseOrderAmount, new { htmlAttributes = new { @class = "form-control", @required = "required", @readonly = "readonly", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.PurchaseOrderAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.PurchaseOrderDesc, htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">

                                    @Html.EditorFor(model => model.PurchaseOrderDesc, new { htmlAttributes = new { @class = "form-control", @required = "required", rows = "2", maxlength = 250 } })

                                    @Html.ValidationMessageFor(model => model.PurchaseOrderDesc, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })

                                </div>
                            </div>


                            @if (Model.IsST)
                            {
                                <div class="form-group">
                                    @Html.Label("Is ST Payment ?", htmlAttributes: new { @class = "control-label   col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">


                                        @if (Model.IsStPayment)
                                        {
                                            <input type="checkbox" checked style="width:30px" id="IsStPayment">
                                            <input id="StPayment" name="StPayment" style="width:40px;font-weight:bold" type="text" readonly value="YES">

                                        }
                                        else
                                        {
                                            <input type="checkbox" style="width:30px" id="IsStPayment">
                                            <input id="StPayment" name="StPayment" style="width:40px;font-weight:bold" type="text" readonly value="NO">
                                        }

                                    </div>
                                    <div class="IsStPayment">
                                        @Html.LabelFor(model => model.ParentInstitutionCode, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            @if (Model.IsStPayment)
                                            {
                                                @Html.DropDownList("ParentInstitutionCode", Model.ParentInstitutionsList, "Select ---", new { @class = "form-control" })
                                            }
                                            else
                                            {
                                                <select name="ParentInstitutionCode" id="ParentInstitutionCode" class="form-control"></select>
                                            }

                                            @Html.ValidationMessageFor(model => model.ParentInstitutionCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="form-group">
                                @if (Model.IsST)
                                {
                                    if (Model.IsStPayment)
                                    {
                                        <div class="IsStPayment">
                                            @Html.LabelFor(model => model.SubWarrantCode, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                            <div class="col-md-4">
                                                @Html.DropDownListFor(model => model.SubWarrantCode, Model.SubWarrantsList, "Select ---", new { @class = "form-control", @required = "required" })

                                                @Html.ValidationMessageFor(model => model.SubWarrantCode, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="IsStPayment">
                                            @Html.LabelFor(model => model.SubWarrantCode, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                            <div class="col-md-4">
                                                <select name="SubWarrantCode" id="SubWarrantCode" class="form-control"></select>
                                                @Html.ValidationMessageFor(model => model.SubWarrantCode, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                }
                            </div>

                            @if (Model.ForceAccount == "YES")
                            {
                                <div class="form-group">
                                    @Html.Label("Is Force Account ?", htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">

                                        <input type="checkbox" style="width:30px" id="IsForceAccount" checked>
                                        @Html.EditorFor(model => model.ForceAccount, new { htmlAttributes = new { @style = "width:40px;font-weight:bold" } })
                                    </div>
                                    <div class="force-account">
                                        @Html.LabelFor(model => model.ProjectNumber, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            <div class="input-group">

                                                <span class="input-group-addon" onclick="SearchProject()"><i class="fa fa-search"></i></span>
                                                @Html.EditorFor(model => model.ProjectNumber, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Search Force Account Project", @onclick = "SearchProject()" } })
                                                @Html.ValidationMessageFor(model => model.ProjectNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group" id="available" style="display:none">
                                        @Html.Label("F.A Available Amount", htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            <input id="AvailableAmount" class="form-control" type="text" disabled>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    @Html.Label("Is Force Account ?", htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <input type="checkbox" style="width:30px" id="IsForceAccount">
                                        @Html.EditorFor(model => model.ForceAccount, new { htmlAttributes = new { @style = "width:40px;font-weight:bold" } })
                                    </div>
                                    <div class="force-account" style="display:none">
                                        @Html.LabelFor(model => model.ProjectNumber, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                        <div class="col-md-4">
                                            <div class="input-group">

                                                <span class="input-group-addon" onclick="SearchProject()"><i class="fa fa-search"></i></span>
                                                @Html.EditorFor(model => model.ProjectNumber, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Search Force Account Project", @onclick = "SearchProject()" } })
                                                @Html.ValidationMessageFor(model => model.ProjectNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="form-group force-account" style="display:none">
                                    @Html.Label("F.A Available Amount", htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                                    <div class="col-md-4">
                                        <input id="AvailableAmount" class="form-control" type="text" disabled>
                                    </div>
                                </div>


                            }

                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-offset-2">
                                        <a href="@Url.Action("PrePayments","PrePayment")" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        <button type="submit" id="save_summary" class="btn btn-info" style="float: left; margin-left: 5px">
                                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                            }

                        </div>

                    </div>


                </div>
            </article>

        </div>
    </section>

</div>


<!----------- Search Payee ----------------->
<div class="modal fade" id="payeeModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Payee</h3>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container submit-btn" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." autocomplete="off" id="searchbox">
                        </div>
                    </div>
                </div>
                <div align="center">
                    <img src="/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                </div>
                <table class="table" id="dt_search_payee">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>PaymentId</th>
                            <th>BIC</th>
                            <th>Payee Name</th>
                            <th>Payee Code</th>
                            <th>Bank Name</th>
                            <th>Bank Account No</th>
                            <th>Payee Type</th>
                            <th>Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>
<!----------- End Search Payee----------------->

<div class="modal fade" id="projectModal" style="left:4%">
    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">
            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Project</h3>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." id="searchbox_project">
                        </div>
                    </div>
                </div>
                <table class="table" id="dt_search_project">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Project Number</th>
                            <th>Project Description</th>
                            <th>Project Manager</th>
                            <th>Total Amount</th>
                            <th>Commited Amount</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>


@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">

        $(document).ready(function () {
            $("#dt_search_project_wrapper .dt-toolbar").remove();

            $("#PurchaseOrderAmount").autoNumeric('init');
            $("#AvailableBalanceEOffice").autoNumeric('init');
            $("#AvailableBalanceDFund").autoNumeric('init');
            $("#DFundAmount").autoNumeric('init');
            $("#TransactionAmount").autoNumeric('init');
                $("#PurchaseOrderDesc").on('keypress', function (event) {
                    var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                    var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                    if (!regex.test(key)) {
                        event.preventDefault();
                        return false;
                    }
                });


                $('#PurchaseOrderDesc').bind('copy paste cut', function (e) {
                    e.preventDefault();
                    swal('Paste option is disabled !!');
                });

                $("#IsStPayment").change((e) => {
                    $("#StPayment").val(e.target.checked ? "YES" : "NO")
                    if (e.target.checked) {
                        $(".IsStPayment").toggle(true)
                        GetParentInstitutions();
                    } else {
                        $(".IsStPayment").toggle(false)
                    }
                });
                $("#ParentInstitutionCode").change(function () {
                    var institutionCode = $(this).val();
                    if (institutionCode) {
                        GetSubWarrants(institutionCode);
                    }

                });

                // ============= SHOW PAYEE===============

                var dt_selected_payee = $('#dt_selected_payee').dataTable({
                    "data": [],
                    "columnDefs": [{
                        "targets": [0, 1],
                        "visible": false
                    }],
                    "columns": [
                        { title: "Payee DetailId" },
                        { title: "Payee BIC" },
                        { title: "Payee Name" },
                        { title: "Payee Code" },
                        { title: "Bank Name" },
                        { title: "Payee Type" },
                        { title: "Bank Account No" },
                        { title: "Address" }
                    ]
                });

            });

        function SearchPayee() {
            $('#payeeModal').modal('show');
        }

        // ============= SEARCH PAYEEE ===========

        var dt_search_payee = $('#dt_search_payee').dataTable({
            "aoColumnDefs": [{ "bVisible": false, "aTargets": [1, 2] }],
        });
        $("#dt_search_payee_wrapper .dt-toolbar").remove();
        $("#searchbox").on("keyup search input paste cut", function () {
            if (!this.value) {
                dt_search_payee.fnClearTable();
            } else {
                searchPayeeTableUpdate(this.value);
            }
        });

    function searchPayeeTableUpdate(search) {
        var url = '@Url.Action("GetPayee", "Procurement")';
        $.ajax({
            type: "get",
            url: url + "/?search=" + search + "",
            contenttype: "application/json; charset=utf-8",
            datatype: "json",
            success: function (response) {
                data = response.data;
                dt_search_payee.fnClearTable();
                for (var i = 0; i < data.length; i++) {
                    dt_search_payee.fnAddData([i + 1,
                       data[i]["PayeeDetailId"],
                       data[i]["BIC"],
                       data[i]["AccountName"],
                       data[i]["PayeeCode"],
                       data[i]["PayeeName"],
                       data[i]["Accountnumber"],
                       data[i]["PayeeType"],
                       data[i]["Address1"],
                       '<a href="#" onclick="payeeClicked(' + i + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                    ]);
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
    }


        function payeeClicked(rowId) {
            var data = dt_search_payee.DataTable().rows().data();
            var row = data[rowId];
            $("#PayeeDetailId").val(row[1]);
            $("#PayeeName").val(row[3]);
            $("#PayeeType").val(row[7]);
            $("#payeeModal").modal("hide");
        }

         // =========== END SEARCH PAYEE ====================

           function SubmitSummary(formData) {
            $("#save_summary").prop('disabled', true);
            var url = '@Url.Action("SavePrePayment", "PrePayment")';
                           var ajaxConfig = {
                               type: "post",
                               url: url,
                               data: new FormData(formData),
                               success: function (response) {

                                   if (response == "Success") {
                                       swal("Basic information updated successfully", { icon: "success" })
                                           .then((value) => {
                                            var url = '@Url.Action("PrePayments", "PrePayment")';
                                             window.location.replace(url);
                                           });
                                   }
                                   else {
                                    $("#save_summary").prop('disabled', false);
                                       swal(response);
                                   }
                               },
                               error: function (xhr) {
                                   $("#save_summary").prop('disabled', false);
                                   swal(error);
                               },
                           }
            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }


        function GetParentInstitutions() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetParentInstitutions", "PaymentVoucher")",
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                if (response.data) {
                      $('#ParentInstitutionCode').empty();
                      $('<option value="">Select...</option>').appendTo('#ParentInstitutionCode');
                      $.each(response.data, function (i, d) {
                       $('<option value="' + d.ParentInstitutionCode + '">' + d.ParentInstitutionCode+'-'+d.ParentInstitutionName+ '</option>').appendTo('#ParentInstitutionCode');
                        });
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }

        function GetSubWarrants(institutionCode) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetSubWarrants", "PaymentVoucher")",
                data: { institutionCode },
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                if (response.data) {
                       $('#SubWarrantCode').empty();
                      $('<option value="">Select...</option>').appendTo('#SubWarrantCode');
                      $.each(response.data, function (i, d) {
                       $('<option value="' + d.SubWarrantCode + '">' + d.SubWarrantCode+'-'+d.SubWarrantDescription+ '</option>').appendTo('#SubWarrantCode');
                        });
                }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }

         //===================================== PROJECT SEARCH

        function SearchProject() {
            $('#projectModal').modal('show');
        }

        var dt_search_project = $('#dt_search_project').dataTable();

        $("#searchbox_project").on("keyup search input paste cut", function () {
            if (!this.value) {
                dt_search_project.fnClearTable();
            } else {
                searchProjectTableUpdate(this.value);
            }
        });

            var projects = []
        function searchProjectTableUpdate(search) {
            $.ajax({
                type: "GET",
                url:'@Url.Action("SearchProject", "ForceAccountPayment")/?query='+search,
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (response) {
                    projects = response.data;
                    dt_search_project.fnClearTable();
                    for (var i = 0; i < projects.length; i++) {
                        dt_search_project.fnAddData([i + 1,
                            projects[i]["ProjectNumber"],
                            projects[i]["ProjectDescription"],
                            projects[i]["ProjectManager"],
                            toLabel(projects[i]["EstimatedProjectAmount"]),
                            toLabel(projects[i]["AmountCommitted"]),
                            '<a href="#" onclick="projectClicked(' + projects[i]["ForceAccountPaymentRegistrationId"] + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                      ]);
                    }
                },
                failure: function (error) {
                    swal(error);
                }
            });
        }

        var selectedProjectId = 0
        function projectClicked(projectId) {
            selectedProjectId = projectId;
            $("#ForceAccountPaymentRegistrationId").val(projectId);
            var project = projects.filter(p => p.ForceAccountPaymentRegistrationId == projectId)[0]
            $("#ProjectNumber").val(project.ProjectNumber);
            $("#available").show();
            $("#AvailableAmount").val(toLabel(project.EstimatedProjectAmount - project.AmountCommitted));
            $("#projectModal").modal("hide");
        }

        $("#IsForceAccount").change((e) => {
            $("#ForceAccount").val(e.target.checked ? "YES" : "NO")
            if (e.target.checked) {
                $(".force-account").toggle(true)
            } else {
                $(".force-account").toggle(false)
            }
        });

           var payerAccounts = [];
   var operationalCurrency =null;
   var dfundCurrency = "";
   var trxCurrency = "";
    var availableBalanceEOffice = 0;
    var availableBalanceDFund = 0;

       $(function () {
           if ($("#EOfficeApprovalId")[0]) {
           availableBalanceEOffice = 0;
       }
       $("#EOfficeApprovalId").select2({
           minimumInputLength: 2,
           width: 'resolve',
           ajax: {
               
               url: '@Url.Action("GetApprovalByApprovalType", "DfundApprovals")',
               type: "GET",
               dataType: 'json',
               data: function (term) {
                   return { term: term, approvalType:"AO" };
               },
               results: function (data, page) {
                   return { results: data.approvals };
               }
           }
       });
       });

    $("#EOfficeApprovalId").change(function () {
        var id = $(this).val();
          $.ajax({
              type: "GET",
              url: '@Url.Action("GetApprovalByApprovalId", "DfundApprovals")',
              data: { id: id},
              contenttype: "application/json; charset=utf-8",
              datatype: "json",
              success: function (response) {

                  if (response.success) {
                      $(".currencyDispEoffice").text(response.currency);
                      $("#AvailableBalanceEOffice").val(0);
                      $("#EOfficeTitle").val(response.title);
                      availableBalanceEOffice = 0;
                      trxCurrency = response.currency;
                      $("#TransactionAmount").val("");
                      $("#OperationalAmount").val("");
                      $("#DFundAmount").val("");
                      if (response.balanceAmount) {
                          availableBalanceEOffice = response.balanceAmount;
                          $("#AvailableBalanceEOffice").val(toLabel(availableBalanceEOffice));
                          if (operationalCurrency != null) {
                              getExchangeRate(operationalCurrency, response.currency);
                          }
                      }

                  }
              },
              failure: function (error) {
                  swal(error);
              }
          });
      });

   $(function () {
 if ($("#DfundApprovalId")[0]) {
     availableBalanceDFund = 0;
   }
      $("#DfundApprovalId").select2({
       minimumInputLength: 2,
       width: 'resolve',
       ajax: {
           url: '@Url.Action("GetApprovalByApprovalType", "DfundApprovals")',
           type: "GET",
           dataType: 'json',
           data: function (term) {
               return { term: term, approvalType:"DFUND" };
           },
           results: function (data, page) {
               return { results: data.approvals };
           }
       }
   });
   });

    $("#DfundApprovalId").change(function () {
    var id = $(this).val();
      $.ajax({
          type: "GET",
          url: '@Url.Action("GetApprovalByApprovalId", "DfundApprovals")',
          data: { id: id},
          contenttype: "application/json; charset=utf-8",
          datatype: "json",
          success: function (response) {

              if (response.success) {
                  $(".dFundCurrency").text(response.currency);
                  $("#AvailableBalanceDFund").val(0);
                  $("#DfundTitle").val(response.title);
                  availableBalanceDFund = 0;
                  $("#TransactionAmount").val("");
                  $("#OperationalAmount").val("");
                  $("#DFundAmount").val("");
                  if (response.balanceAmount) {
                      availableBalanceDFund = response.balanceAmount;
                      $("#AvailableBalanceDFund").val(toLabel(availableBalanceDFund));
                      getExchangeRateDFund(response.currency,trxCurrency);
                  }

              }
          },
          failure: function (error) {
              swal(error);
          }
      });
  });
    var tranExchangeRate = 0;
    var operationExchangeRate = 0;

        function getExchangeRate(operationalCurrency, currency) {

              $.ajax({
          type: "GET",
          url: '@Url.Action("GetExchangeRate", "Contract")',
          data: { operationCurrency: operationalCurrency, trxCurrency: currency },
          contenttype: "application/json; charset=utf-8",
          datatype: "json",
          success: function (response) {

              if (response.success) {
                  tranExchangeRate = response.traxExchangeRate;
                  operationExchangeRate = response.operationExchangeRate;
                  $("#TransactionExchangeRate").val(tranExchangeRate);
                  $("#OperationalExchangeRate").val(operationExchangeRate);
              }
              else {
                  swal(response.message);
              }
          },
          failure: function (error) {
              swal(error);
          }
      });
    }
    var dFundExchangeRate = 0;
    var dFundEquivalentAmount = 0;
        function getExchangeRateDFund(operationalCurrency, currency) {

              $.ajax({
          type: "GET",
          url: '@Url.Action("GetDFundExchangeRate", "Contract")',
          data: { operationCurrency: operationalCurrency, trxCurrency: currency },
          contenttype: "application/json; charset=utf-8",
          datatype: "json",
          success: function (response) {

              if (response.success) {
                  dFundExchangeRate = response.traxExchangeRate;
                  $("#DFundExchangeRate").val(dFundExchangeRate);
                  dFundExchangeRate = parseFloat(dFundExchangeRate);
              }
              else {
                  swal(response.message);
              }
          },
          failure: function (error) {
              swal(error);
          }
      });
    }


          // ON SUB BUDGET CLASS
      var payerAccounts = [];
  $("#SubBudgetClass").change(function () {
      var sbc = $(this).val();
      var url = '@Url.Action("GetPayerAccounts", "Contract")';
      $.ajax({
          type: "POST",
          url: url,
          data: {sbc:sbc },
          success: function (response) {
             debugger
              if (response.res == "Success") {
                  payerAccounts = response.data;
                  $("#PayerBankAccount").empty();
                  $('<option value="" selected>------Select-------</option>').appendTo('#PayerBankAccount');
                  $.each(payerAccounts, function (i, d) {
                      $('<option value=' + d.AccountNumber + '>' + d.AccountNumber + '-' + d.Currency + '-' + d.AccountName + '</option>').appendTo('#PayerBankAccount');
                  });

              }
              else {
                  swal(response.res);
              }

          }
      })
  });

$("#PayerBankAccount").change(function () {
    var account = $(this).val();

    var currency = "";
    if (account) {
        currency = search(account, payerAccounts);
    }
    $(".currencyDisp").text(currency);
    operationalCurrency = currency;
    if (operationalCurrency != null) {
        $("#OperationalCurrency").val(operationalCurrency);
        getExchangeRate(operationalCurrency, trxCurrency);
    }

    checkIsDeFundAccount(account);
});


      function search(nameKey, payerAccounts) {

              for (var j = 0; j < payerAccounts.length; j++) {
                  if (payerAccounts[j].AccountNumber == nameKey) {
                      return payerAccounts[j].Currency;
                  }

              }

      }

        $("#TransactionAmount").keyup(function () {
            //if (operationExchangeRate == 0) {
            //    swal("Please first select Accounting Officer approval", { icon: "warning" }).then((e) => {
            //        $("#TransactionAmount").val("");
            //    });

            //    return;
            //}
            var trxAmount = $(this).val();
            var toOprExchangeRate = $("#CrossTrxToOperationExchangeRate").val();
            var toDFundExchangeRate = $("#CrossTrxToDFundExchangeRate").val();
            var opearationAmt = 0;
            var dFundAmount = 0;
            if (trxAmount) {
                trxAmount = parseFloat(trxAmount.split(",").join(""));
              
                if (toOprExchangeRate > 0) { 
                    opearationAmt = trxAmount * toOprExchangeRate;
                    $("#PurchaseOrderAmount").val(opearationAmt);
                }
                else {
                    $("#PurchaseOrderAmount").val("");
                }
                if (toDFundExchangeRate > 0) {
                    dFundAmount = trxAmount * toDFundExchangeRate;
                    $("#DFundAmount").val(dFundAmount);
                }
                else {
                    $("#DFundAmount").val("");
                }
            }
            else {
                $("#PurchaseOrderAmount").val("");
                $("#DFundAmount").val("");
            }
        }
        );

           function checkIsDeFundAccount(account) {

          $.ajax({
         type: "GET",
         url: '@Url.Action("IsDfundAccount", "Contract")',
         data: { account: account },
         contenttype: "application/json; charset=utf-8",
         datatype: "json",
              success: function (response) {
                  if (response.resp == "Success") {
                      debugger
                  if (response.success) {
                      $("#dFundField").show();
                  }
                  else {
                      $("#dFundField").hide();
                  }
              }
              else{
                swal(response.resp, { icon: "warning" })
              }
         },
         failure: function (error) {
             swal(error);
         }
     });

        }


        //SHOW LOADER ICON
        $(document).ajaxStart(function () {
            $("#divLoader").show();
        });
        //HIDE LOADER ICON
        $(document).ajaxStop(function () {
            $("#divLoader").hide();
        });


    </script>
}












