@model IFMIS.Areas.IFMISTZ.Models.CreateDummyExchequerVM

<div id="divLoader"></div>

<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

            <!-- PAGE HEADER -->
            <!--
            <i class="fa-fw fa fa-pencil-square-o"></i>
            Payments
            <span>
            >
            Bills
            </span>
            -->
            </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Dummy Exchequer</h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form class="form-horizontal" name="dummyPaymentForm" id="dummyPaymentForm" method="POST">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.InstitutionCodeTo)
                                @Html.HiddenFor(model => model.InstitutionNameTo)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.InstitutionIdTo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.InstitutionIdTo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.InstitutionIdTo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SubBudgetClass, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-5">
                                        @Html.DropDownListFor(model => model.SubBudgetClass, new SelectList(""), "Select Sub Budget Class", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ExchequerType, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ExchequerType,
                                        new SelectList(new List<SelectListItem>
                                            {
                                            new SelectListItem { Text = "Retention", Value = "Retention"},
                                            new SelectListItem { Text = "Direct Fund", Value = "Direct Fund"},
                                            }, "Value", "Text"),
                                            "Select Exchequer Type", new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NetAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-5">
                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float:left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingDummyExchequers", "DummyExchequers")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!----------- Search GL Items ----------------->
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">
        $(function () {

        $('#NetAmount').autoNumeric('init');

        $("#ApplyDate")
            .wrap('<div class="input-group">')
            .datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showOn: "both",
                buttonImage: '@Url.Content("~/Content/img/calendar.gif")',
                maxDate: "+0D"
            })
            .next("button").button({
                icons: { primary: "ui-icon-calendar" },
                label: "Select a date",
                text: false
            })
            .addClass("btn btn-default")
            .wrap('<span class="input-group-btn">')
            .find('.ui-button-text')
            .css({
                'visibility': 'hidden',
                'display': 'inline'
            });

            $("#InstitutionIdTo").select2({
            minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
            width: 'resolve',   // to adjust proper width of select2 wrapped elements
            placeholder: "Select Institution",
            allowClear: false,
            initSelection: function (element, callback) {
                var id = $(element).val();
                if (id !== "") {
                    $.ajax('@Url.Action("GetSelectedInstitution", "Institutions")', {
                        data: { id: id },
                        dataType: "json"
                    }).done(function (data) {
                        callback(data);
                    });
                }
            },
            ajax: {
                url: '@Url.Action("GetInstitutionsV3", "Institutions")', // Controller - Select2Demo and Action -AccessRemoteData
                type: "GET",
                dataType: 'json',
                data: function (term) {
                    return {
                        term: term
                    };
                },
                results: function (data, page) {
                    return { results: data.refs };
                }
            },
        });
        });

        $("#InstitutionIdTo").change(function () {
            var id = $(this).val();
            $.ajax({
                type: "get",
                url: '@Url.Action("GetSubBudgetClassesByInstitutionId", "SubBudgetClasses")',
                data: { id: id },
                success: function (response) {
                    if (response.success) {
                        $("#InstitutionCodeTo").val(response.InstitutionCode);
                        $("#InstitutionNameTo").val(response.InstitutionName);
                        $("#SubBudgetClass option").remove();
                        $("#SubBudgetClass").append('<option value="">Select Sub Budget Class</option>');
                        $.each(response.sbcs, function (i, sbc) {
                            $("#SubBudgetClass").append('<option value="'
                                + sbc.SubBudgetClass + '">'
                                + sbc.SubBudgetClassSubBudgetClassDesc + '</option');
                        })
                    }
                    else {
                        swal({
                            text: "An error occured while processing your request, please contact system support",
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function (response) {
                    swal({
                        text: "An error occured while processing your request, please contact system support",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {

                }
            });
        });

        $("#ApplyDate")
    .wrap('<div class="input-group">')
    .datepicker({
        dateFormat: "yy-mm-dd",
        changeMonth: true,
        changeYear: true,
        showOn: "both",
        buttonImage: '@Url.Content("~/Content/img/calendar.gif")',
        maxDate: "+0D"
    })
    .next("button").button({
        icons: { primary: "ui-icon-calendar" },
        label: "Select a date",
        text: false
    })
    .addClass("btn btn-default")
    .wrap('<span class="input-group-btn">')
    .find('.ui-button-text')
    .css({
        'visibility': 'hidden',
        'display': 'inline'
    });

        $("#Description").on("keyup", function (e) {
            $("#maxchars_c").text(250 - this.value.length)

            if (this.value.length > 250) {
                swal("Maximum Characters reached!");
            }
        });

        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }

        $("#btnSave").click(function () {
        $("#divLoader").show();
        $('#btnSave').prop("disabled", true);

        if (!$("#dummyPaymentForm").valid()) {
                $("#divLoader").hide();
                $('#btnSave').prop("disabled", false);
                return false;
        }

        var token = $("[name='__RequestVerificationToken']").val();
        var data = {
            __RequestVerificationToken: token,
            ReferenceNo: $('#ReferenceNo').val(),
            InstitutionIdTo: $('#InstitutionIdTo').val(),
            InstitutionCodeTo: $("#InstitutionCodeTo").val(),
            InstitutionNameTo: $('#InstitutionNameTo').val(),
            SubBudgetClass: $('#SubBudgetClass').val(),
            ExchequerType: $('#ExchequerType').val(),
            NetAmount: $('#NetAmount').val(),
            ApplyDate: $('#ApplyDate').val(),
            Description: $('#Description').val().trim(),
        }

        var url = '@Url.Action("CreateDummyExchequer", "DummyExchequers")';
        $.ajax({
            url: url,
            type: "POST",
            //data: JSON.stringify(data),
            data: data,
            dataType: "JSON",
            //contentType: "application/json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (response) {
                //check is successfully save to database
                if (response == "Success") {
                    //will send status from server side
                    swal({
                        text: "Dummy exchequer successfully saved.",
                        icon: "success",
                        button: "OK",
                    }).then(function () {
                        window.location = '@Url.Action("PendingDummyExchequers", "DummyExchequers")';
                    });
                } else if (response == "Error") {
                    swal({
                        text: "An error occured while processing your request, contact system support",
                        icon: "warning",
                        button: "OK",
                    })
                }
                else {
                    swal(response);
                }
            },
            error: function (response) {
                swal({
                    text: "An error occured while processing your request, contact system support",
                    icon: "error",
                    button: "OK",
                })
            },
            complete: function () {
                $("#divLoader").hide();
                $('#btnSave').prop("disabled", false);
            }
        });
    });

    </script>
}


