@model IFMIS.Areas.IFMISTZ.Models.InventoryDetailVM
<style>
     /**Date Picker Styles --- START */
     input[type=date] {
         padding: 8px;
         border: 1px solid #ccc;
         border-radius: 4px;
         resize: vertical;
     }
</style>
@Html.HiddenFor(model => model.ItemName)
@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitInventory(this)" }))
    {
@Html.AntiForgeryToken()
@Html.HiddenFor(model => model.InventoryDetailId)
<div class="form-horizontal">
    <div class="form-group">
        @Html.LabelFor(model => model.InventoryCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.InventoryCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.InventoryCode, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.ItemCard, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            <div class="input-group">
                <span class="input-group-addon" onclick="SearchInventoryCard()"><i class="fa fa-search"></i></span>
                @Html.EditorFor(model => model.ItemCard, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Search", autocomplete = "off", @onclick = "SearchInventoryCard()" } })
            </div>
        </div>
    </div>
    <div class="form-group">

        @Html.LabelFor(model => model.ItemCategory, htmlAttributes: new { @class = "control-label   col-md-2" })
        <div class="col-md-3">
            @Html.DropDownListFor(model => model.ItemCategory, Model.ItemCategoriesList, "Select ", new { @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.ItemCategory, "", new { @class = "text-danger" })
        </div>
        @Html.Label("Class", htmlAttributes: new { @class = "control-label   col-md-2" })
        <div class="col-md-3">
            @Html.DropDownList("ItemClassificationId", Model.ItemClassificationsList, "Select ", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ItemClassificationId, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.BatchNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.BatchNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.BatchNo, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.Manufacturer, htmlAttributes: new { @class = "control-label col-md-2" })

        <div class="col-md-3">
            @Html.EditorFor(model => model.Manufacturer, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Manufacturer, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @readonly="@readonly", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label   col-md-2" })
        <div class="col-md-3">
            @Html.DropDownListFor(model => model.Condition, Model.ConditionList, "Select ", new { @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
        </div>
    </div>
    <div id="InventoryForSale" style="display:none">
        <div class="form-group">
            @Html.LabelFor(model => model.UnitSalePrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.UnitSalePrice, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.UnitSalePrice, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.TotalAmount, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-3">
                @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div id="EngeneInventory" style="display:none">
        <div class="form-group">
            @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Capacity, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-3">
                @Html.EditorFor(model => model.Capacity, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BodyType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.BodyType, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.BodyType, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.ManufactureYear, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-3">
                @Html.EditorFor(model => model.ManufactureYear, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off",@min="1995" } })
                @Html.ValidationMessageFor(model => model.ManufactureYear, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Stored, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3" style="padding-top:8px">

            Yes :@Html.RadioButtonFor(m => m.Stored, "Yes") &nbsp;&nbsp;&nbsp;
            No:@Html.RadioButtonFor(m => m.Stored, "No")
        </div>
        <div class="store">
            @Html.LabelFor(model => model.StoreId, htmlAttributes: new { @class = "control-label   col-md-2" })
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.StoreId, Model.StoresList, "Select ", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StoreId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.CanExpire, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3" style="padding-top:8px">

            Yes :@Html.RadioButtonFor(m => m.CanExpire, "Yes") &nbsp;&nbsp;&nbsp;
            No:@Html.RadioButtonFor(m => m.CanExpire, "No")
        </div>
        @*@Html.LabelFor(model => model.LedgerFolio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.LedgerFolio, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.LedgerFolio, "", new { @class = "text-danger" })
            </div>*@
    </div>

    <div class="form-group">
        <div class="form-group">
            <div class="expire">
                @Html.LabelFor(model => model.ManufactureDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.ManufactureDate, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.ManufactureDate, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.ExpireDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.ExpireDate, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.ExpireDate, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-offset-2">
        <button type="submit" class="btn btn-info" style="margin-right:2px">
            <i class="glyphicon glyphicon-floppy-disk"></i> Save
        </button>
    </div>
    <br />
</div>

    }
<div class="modal-footer">
    <button class="btn btn-info btn-flat modal-close" data-dismiss="modal">Close</button>
</div>
<!----------- Search  Item Card----------------->
<div class="modal fade" id="search_item_card" style="left:4%">

    <div class="modal-dialog" style="width:60%;">
        <div class="modal-content panel-info">
            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Item Card</h3>
            </div>
            <div class="modal-body">

                <div>
                    <div class="row" style="padding-top:1%;padding-bottom:1%">
                        <div class="col-md-8">

                        </div>
                        <div class="col-md-4">
                            <div class="input-group" style="float:right">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="search" name="search" class="form-control" autocomplete="off" placeholder="Search..." id="search_card">
                            </div>
                        </div>
                    </div>
                    <table id="dt_search_item_card" class="table table-striped table-bordered table-hover table-condensed">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Item Card</th>
                                <th>Description</th>
                                <th>UOM</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>

                </div>
                <div class="modal-footer">

                    <button class="btn btn-info" data-dismiss="modal">
                        <i class="fa  fa-times"></i>Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
        var uom = "";
          var dt_search_item_card = $('#dt_search_item_card').dataTable();
              $("#dt_search_item_card_wrapper .dt-toolbar").remove();
             $("#search_item_card").on("keyup search input paste cut", function () {
              dt_search_item_card.DataTable().search(this.value).draw();
             });

       function SearchInventoryCard() {
          dt_search_item_card.fnClearTable();
          $('#search_item_card').modal('show');
          if ($("#ItemName").val()) {
              var searchDesc = $("#ItemName").val();
              var stringLength = searchDesc.length;
              var desc = "";
              if (stringLength == 1) {
                 desc=searchDesc.substr(0, 1);
              } else if (stringLength == 2) {
                 desc=searchDesc.substr(0, 2);
              } else if (stringLength >= 3) {
                 desc=searchDesc.substr(0, 3);
              }
                var uom = '@(Model.UOM)';
              SearchItemCards(desc,uom);
          }

          }

               function ItemCardClicked(rowId) {
                  var data = dt_search_item_card.DataTable().rows().data();
                      var row = data[rowId];
                      $("#ItemCard").val(row[1]);
                   $("#search_item_card").modal("hide");
                        uom = row[3];
                   var selected_uom = $("#UOM").val();
                   if (selected_uom) {
                       if (selected_uom !=uom) {
                      $("#UOM").prop('selectedIndex',0);
                          }
                       }
                  }
                  $("#search_card").on("keyup search input paste cut", function () {
                          if (!this.value) {
                              dt_search_item_card.fnClearTable();
                          } else {
                                     var uom = '@(Model.UOM)';
                              SearchItemCards(this.value,uom);
                          }
                  });
                $("#search_item_card .new_card").on('click', function () {
                    var inventory_name = $("#ItemName").val();
                    $("#new_item_card #ItemDescription").val(inventory_name);
                      var uom = '@(Model.UOM)';
                      $("#new_item_card #UOM").val(uom);
                  });
               function SearchItemCards(search,uom) {
                   var formData = {
                       "ItemName": search,
                       "UOM":uom
                   };
          var url = '@Url.Action("GetItemCardsWithUOM", "Inventories")';
                  $.ajax({
                      type: "get",
                      url: url,
                      data: formData,
                      contenttype: "application/json; charset=utf-8",
                      datatype: "json",
                      success: function (response) {
                         if (response == "DbException") {
                            swal("Db Exception,Please contact technical supporter ");
                          }
                          else {
                              data = response.data;
                              dt_search_item_card.fnClearTable();
                              for (var i = 0; i < data.length; i++) {

                                  dt_search_item_card.fnAddData([i + 1,
                                  data[i]["ItemCard"],
                                   data[i]["ItemDescription"],
                                   data[i]["UOM"],
                                  '<a href="#" onclick="ItemCardClicked(' + i + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                                  ]);
                              }
                          }
                      },
                      failure: function (error) {
                          swal(error);
                      }
                  });
                      }




      $(document).ready(function () {
          var stored = '@(Model.Stored)';
          if (stored=="No") {
            $(".store").hide();
           }

           var can_expire = '@(Model.CanExpire)';
          if (can_expire=="No") {
              $(".expire").hide();
           }

          //$(function(){
          //  $('input[type="radio"]').click(function(){
          //    if ($(this).is(':checked'))
          //    {
          //      alert($(this).val());
          //    }
          //  });
          // });

          $(function(){
            $('input[type="radio"][name="Stored"]').click(function(){
              if ($(this).is(':checked'))
              {
                  if ($(this).val()=="Yes") {
                      $(".store").show();
                  } else {
                         $(".store").hide();
                  }
              }
            });
          });

          $(function(){
            $('input[type="radio"][name="CanExpire"]').click(function(){
              if ($(this).is(':checked'))
              {
                if ($(this).val()=="Yes") {
                      $(".expire").show();
                  } else {
                      $(".expire").hide();
                  }
              }
            });
           });

              //MANAGE SELECTED DATE
              $(function () {
                  $("#ExpireDate").change(function () {
                      var expire_date = $(this).val();
                      var manufacture_date = $("#ManufactureDate").val();
                      if (manufacture_date) {
                          if (expire_date) {
                              if (manufacture_date > expire_date) {
                                  swal("Please select date which is greater than the manufacture date");
                                  $("#ExpireDate").val("");
                              }

                          }
                      }


                  });
              });
              $(function () {
                  $("#ManufactureDate").change(function () {
                      var manufacture_date = $(this).val();
                      var expire_date = $("#ExpireDate").val();
                      if (expire_date) {
                          if (manufacture_date) {
                              if (manufacture_date > expire_date) {
                                  swal("Please select date which is less than the expire date");
                                  $("#ManufactureDate").val("");
                              }

                          }
                      }


                  });
              });


           $(function () {
                 $("#UOM").change(function () {
                     var selected_uom = $(this).val();
                     if (uom) {
                     if (selected_uom != uom) {
                         $(this).prop('selectedIndex', 0);
                         swal("Please unit of measure must match with that of item card.Otherwise create new item card with UOM of " + selected_uom + ' !');
                     }
                            }
                  });
              });



      });

            var itemCategory = '@(Model.InventoryType)';
          if (itemCategory=="Inventory for Sale") {
                 $("#InventoryForSale").show();
          }

        $(function () {
          $("#ItemCategory").change(function () {
              var category = $(this).val();
              if (category == "Inventory for Sale") {
                  $("#InventoryForSale").show();
              }
              else {
                  $("#InventoryForSale").hide();
                  $("#EngeneInventory").hide();
              }
              if (category) {
                var url = '@Url.Action("GetItemClasses", "Procurement")';
              $.ajax({
                  type: "GET",
                  url: url,
                  data: { category : category },
                  success: function (data) {
                      if (data.response == "Success") {
                         $('#ItemClassificationId').empty();
                          $('<option value="">Select...</option>').appendTo('#ItemClassificationId');
                          $.each(data.itemClasses, function (i, d) {
                              $('<option value="' + d.ItemClassificationId + '">' + d.ClassificationDesc + '</option>').appendTo('#ItemClassificationId');
                          });
                      }
                      else {
                         swal("Failed to fetch data due to DB Exception.Please refresh page");
                      }
                  }
              });
              }

          });
        });

         var itemClass = $("#ItemClassificationId").find('option:selected').text();
               if (itemClass == "Motor Vehicle") {
                  $("#EngeneInventory").show();
              }
              else if (itemClass == "Motor Cycle") {
                  $("#EngeneInventory").show();
               }
               else if (itemClass == "Plants") {
                  $("#EngeneInventory").show();
               }
                else if (itemClass == "Machinery") {
                  $("#EngeneInventory").show();
              }
              else {
                  $("#EngeneInventory").hide();
              }

        $(function () {
            $("#ItemClassificationId").change(function () {
                var itemClass = $(this).find('option:selected').text();
               if (itemClass == "Motor Vehicle") {
                  $("#EngeneInventory").show();
              }
              else if (itemClass == "Motor Cycle") {
                  $("#EngeneInventory").show();
               }
               else if (itemClass == "Plants") {
                  $("#EngeneInventory").show();
               }
                else if (itemClass == "Machinery") {
                  $("#EngeneInventory").show();
              }
              else {
                  $("#EngeneInventory").hide();
              }
          });
        });
         $(function () { // this will be called when the DOM is ready
           $("#UnitSalePrice").keyup(function () {

                var quantity = parseFloat($("#Quantity").val());
                if (quantity > 0) {
                    var unit_sale_price = parseFloat($(this).val().split(",").join(""));
                    var total = unit_sale_price * quantity;
                        $("#TotalAmount").val(total.toLocaleString('en'));
                     }

                });

        });


      //SHOW LOADER ICON
      $(document).ajaxStart(function () {
          $("#divLoader").show();
      });
      //HIDE LOADER ICON
      $(document).ajaxStop(function () {
          $("#divLoader").hide();
      });

</script>