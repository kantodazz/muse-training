@model IFMIS.Areas.IFMISTZ.Models.CreateDummyReceiptVM

<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Receipt </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form action="@Url.Action("CreateReceipt")" method="post" class="form-horizontal" name="dummyPaymentForm" id="dummyPaymentForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ReceivingBankBIC)
                                @Html.HiddenFor(model => model.DrGlAccount)
                                @Html.HiddenFor(model => model.DrGlAccountDesc)
                                @Html.HiddenFor(model => model.FundType)
                                @Html.HiddenFor(model => model.SubBudgetClassDesc)
                                @Html.HiddenFor(model => model.PvNo)
                                <input type="hidden" id="GlAccountDesc" />

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceNo, "Reference No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.ReferenceNo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivingBankName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ReceivingBankAccountNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankAccountNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankAccountNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivingBankAccountName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankAccountName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankAccountName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ReceiptDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceiptDate, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceiptDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceiptType, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(model => model.ReceiptType, Model.ReceiptTypes, "Select Receipt Type", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ReceiptType, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" id="divSubBudgetClass" style="display: none">
                                    @Html.LabelFor(model => model.SubBudgetClass, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(model => model.SubBudgetClass, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" id="divPvNo" style="display: none">
                                    @Html.LabelFor(model => model.PvId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(model => model.PvId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PvId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <hr />

                                <b>GL Items</b>
                                <hr />
                                <div id="dummyPaymentDetailItems"></div>

                                <fieldset style="border: 1px solid black; padding:1px 10px 1px 10px">
                                    <legend style="border: 0px"><b>Add GL Item</b></legend>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">Gl Account</label>
                                        <div class="col-md-10">
                                            <input type="text" id="GlAccount" class="form-control" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="control-label col-md-2">ExpensedAmount</label>
                                        <div class="col-md-3">
                                            <input type="text" id="ExpensedAmount" class="form-control" />
                                        </div>
                                        <label class="control-label col-md-2">ReturnedAmount</label>
                                        <div class="col-md-3">
                                            <input type="text" id="ReturnedAmount" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-offset-2" style="padding-left: 13px">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnAddGlItem">
                                                <i class="fa fa-plus"></i>
                                                Add GL Item
                                            </button>
                                        </div>
                                    </div>
                                    <div class="form-group" style="margin-top: 0px; margin-bottom: 0px">
                                        <div class="col-md-offset-2 col-md-7" id="divAddGlErrorMsg" style="display: none; color: darkred">
                                            <span>You can not continue to add GL items, operational amount is less than total expensed amount!</span>
                                        </div>
                                    </div>
                                </fieldset>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-8">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingReceipts","Receipts")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                    <div class="form-group" style="margin-top: 0px; margin-bottom: 0px">
                                        <div class="col-md-offset-2 col-md-7" id="divSaveErrorMsg" style="display: none; color: darkred">
                                            <span style="float: left">In order to save, operational amount must be equal to total expensed amount!</span>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
    <script type="text/javascript">
        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        $(function () {
            $("#ExpensedAmount").autoNumeric('init');
            $('#ReturnedAmount').autoNumeric('init');
            // This for dynamic table. Don't know why on load but it works
            var dummyPaymentDetails = [];

            $("#btnAddGlItem").click(function () {

                if ($("#GlAccount").val() == "" || $("#ExpensedAmount").val() == "" || $("#ReturnedAmount").val() == "") {
                    return false;
                }

                dummyPaymentDetails.push({
                    GlAccount: $('#GlAccount').val().trim(),
                    GlAccountDesc: $('#GlAccountDesc').val().trim(),
                    ExpensedAmount: $('#ExpensedAmount').val().trim(),
                    ReturnedAmount: $('#ReturnedAmount').val().trim(),
                });

                //Clear fields
                $("#GlAccount").select2("val", "");
                $("#ExpensedAmount").val("");
                $('#ReturnedAmount').val("");

                GeneratePaymentDetailsTable();

                //function for show added items in table
                function GeneratePaymentDetailsTable() {
                    debugger
                    if (dummyPaymentDetails.length > 0) {
                        var $table = $('<table class="table table-condensed table-stripped table-hover table-bordered"/>');
                        $table.append('<thead>' +
                            '<tr><th colspan="5">GL Items</th>' +
                            '<tr><th>#</th><th style="text-align: center">GL Account</th><th style="text-align: center">Expensed Amount</th><th style="text-align: center">Returned Amount</th><th style="text-align: center">Action</th></tr>' +
                            '</thead>');
                        var $tbody = $('<tbody/>');
                        var totalExpensedAmount = 0;
                        var totalReturnedAmount = 0;
                        var j = 0;
                        $.each(dummyPaymentDetails, function (i, val) {
                            ++j;
                            debugger
                            var expensedAmount = val.ExpensedAmount.replace(/,/g, "");
                            var returnedAmount = val.ReturnedAmount.replace(/,/g, "");
                            totalExpensedAmount = parseFloat(totalExpensedAmount) + parseFloat(expensedAmount);
                            totalReturnedAmount = parseFloat(totalReturnedAmount) + parseFloat(returnedAmount);
                            var $row = $('<tr/>');
                            $row.append($('<td/>').html(j));
                            $row.append($('<td/>').html(val.GlAccount));
                            $row.append($('<td style="text-align: right"/>').html(val.ExpensedAmount));
                            $row.append($('<td style="text-align: right"/>').html(val.ReturnedAmount));
                            //$row.append($('<td style="text-align: center"/>').html('<a href="#"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>'));
                            var $remove = $('<a href="#">Remove</a>');
                            $remove.click(function (e) {
                                //debugger
                                e.preventDefault();
                                dummyPaymentDetails.splice(i, 1);
                                GeneratePaymentDetailsTable();
                            });
                            $row.append($('<td/>').html($remove));
                            $tbody.append($row);
                        });
                        var $row1 = $('<tr/>');
                        $row1.append($('<td colspan="2" style="text-align: center"/>').html('<b>Total</b>'));
                        $row1.append($('<td id="totalExpensedAmount" style="text-align: right"/>').html(totalExpensedAmount));
                        $row1.append($('<td id="totalReturnedAmount" style="text-align: right"/>').html(totalReturnedAmount));
                        $row1.append($('<td/>').html(''));
                        $tbody.append($row1);
                        $table.append($tbody);
                        $('#dummyPaymentDetailItems').html($table);
                        $('#totalExpensedAmount').autoNumeric('init');
                        $('#totalReturnedAmount').autoNumeric('init');
                        var operationalAmount = $("#OperationalAmount").val().replace(/,/g, "") == "" ? 0 : parseFloat($("#OperationalAmount").val().replace(/,/g, ""));
                        if (operationalAmount < totalReturnedAmount) {
                            $("#btnAddGlItem").attr("disabled", true);
                            $("#divAddGlErrorMsg").show();
                        } else {
                            $("#btnAddGlItem").attr("disabled", false);
                            $("#divAddGlErrorMsg").hide();
                        }
                        if (operationalAmount !== totalReturnedAmount) {
                            $("#btnSave").attr("disabled", true);
                            $("#divSaveErrorMsg").show();
                        } else {
                            $("#btnSave").attr("disabled", false);
                            $("#divSaveErrorMsg").hide();
                        }
                    } else {
                        $('#dummyPaymentDetailItems').html('');
                        $("#btnSave").attr("disabled", false);
                        $("#btnAddGlItem").attr("disabled", false);
                        $("#divAddGlErrorMsg").hide();
                        $("#divSaveErrorMsg").hide();
                    }
                }
            });

            $("#btnSave").click(function () {
                //debugger
                $('#btnSave').val('Please wait');

                if (!$("#dummyPaymentForm").valid()) {
                    return false;
                }

                var data = {
                    ReferenceNo: $('#ReferenceNo').val().trim(),
                    OperationalAmount: $('#OperationalAmount').val().trim(),
                    ReceivingBankName: $('#ReceivingBankName').val().trim(),
                    ReceivingBankBIC: $('#ReceivingBankBIC').val().trim(),
                    ReceivingBankAccountNo: $('#ReceivingBankAccountNo').val().trim(),
                    ReceivingBankAccountName: $('#ReceivingBankAccountName').val().trim(),
                    ReceiptDate: $('#ReceiptDate').val(),
                    ReceiptType: $('#ReceiptType').val(),
                    SubBudgetClass: $('#SubBudgetClass').val(),
                    SubBudgetClassDesc: $('#SubBudgetClassDesc').val(),
                    PvId: $('#PvId').val(),
                    PvNo: $('#PvNo').val(),
                    Remarks: $('#Remarks').val().trim(),
                    DrGlAccount: $('#DrGlAccount').val(),
                    DrGlAccountDesc: $('#DrGlAccountDesc').val(),
                    ReceiptDetails: dummyPaymentDetails
                }

                var url = '@Url.Action("CreateReceipt", "DummyReceipts")';
                $.ajax({
                    url: url,
                    type: "POST",
                    data: JSON.stringify(data),
                    dataType: "JSON",
                    contentType: "application/json",
                    success: function (response) {
                        //check is successfully save to database
                        if (response == "Success") {
                            //will send status from server side
                            swal({
                                text: "Receipt successfully saved.",
                                icon: "success",
                                button: "OK",
                            }).then(function () {
                                window.location = '@Url.Action("PendingReceipts", "DummyReceipts")';
                            });
                        }
                        else {
                            swal({
                                text: "Error. Please try again..",
                                icon: "warning",
                                button: "OK",
                            })
                        }
                    },
                    error: function () {
                        swal({
                            text: "Error. Please try again..",
                            icon: "error",
                            button: "OK",
                        })
                    }
                });
            });

            // End of dynamic table

            $("#ReferenceNo").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Select Reference No",
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetReferenceNo", "DummyReceipts")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetReferenceNos", "DummyReceipts")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.refs }; // data.CountryList returning json data from Controlle
                    }
                },
            });

            $("#GlAccount").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Search Gl Account',
                allowClear: false,
                ajax: {
                    url: '@Url.Action("GetBudgetCoaStrings", "DummyReceipts")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "POST",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            receiptType: $("#ReceiptType").val(),
                            subBudgetClass: $("#SubBudgetClass").val(),
                            pvId: $("#PvId").val(),
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.coas }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $('#ReferenceNo').on("change", function () {
            var referenceNo = $("#ReferenceNo").val();

            $.ajax({
                type: "GET",
                url: "GetBankStatementDetail",
                data: { id: referenceNo },
                success: function (data, status, jqXHR) {
                    if (data.duplicate) {
                        swal({
                            text: "Reference number already exist",
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    }
                    var receiptDate = Date.now;
                    if (data.ReceiptDate !== null) {
                        receiptDate = ConvertJsonDate(data.ReceiptDate);
                    }
                    if (data.success) {
                        $("#OperationalAmount").val(data.OperationalAmount);
                        $("#ReceivingBankName").val(data.ReceivingBankName);
                        $("#ReceivingBankBIC").val(data.ReceivingBankBic);
                        $("#ReceivingBankAccountNo").val(data.ReceivingBankAccountNo);
                        $("#ReceivingBankAccountName").val(data.ReceivingBankAccountName);
                        $("#ReceiptDate").val(receiptDate);
                    } else {
                        swal({
                            text: "Error on accessing bank statement details",
                            icon: "warning",
                            button: "OK",
                        })
                    }
                    $("#OperationalAmount").autoNumeric({ aNeg: "-" }).trigger("change");
                },
                error: function () {
                    swal({
                        text: "Error on accessing bank statement details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#ReceiptType').on("change", function () {

            var receiptType = $("#ReceiptType").val();
            if (receiptType == "Normal Receipt") {
                $("#divSubBudgetClass").show();
                $("#divPvNo").hide();
                $("#ExpensedAmount").prop("readonly", false);
                $("#SubBudgetClass").select2({
                    minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                    width: 'resolve',   // to adjust proper width of select2 wrapped elements
                    placeholder: "Select Sub Budget Class",
                    allowClear: false,
                    initSelection: function (element, callback) {
                        var id = $(element).val();
                        if (id !== "") {
                            $.ajax('@Url.Action("GetSelectedSubBudgetClass", "DummyReceipts")', {
                                data: { id: id },
                                dataType: "json"
                            }).done(function (data) {
                                callback(data);
                            });
                        }
                    },
                    ajax: {
                        url: '@Url.Action("GetSubBudgetClasses", "DummyReceipts")', // Controller - Select2Demo and Action -AccessRemoteData
                        type: "GET",
                        dataType: 'json',
                        data: function (term) {
                            return {
                                term: term
                            };
                        },
                        results: function (data, page) {
                            return { results: data.subBudgetClasses }; // data.CountryList returning json data from Controlle
                        }
                    },
                });
            } else if (receiptType == "Return Receipt") {
                $("#divSubBudgetClass").hide();
                $("#divPvNo").show();
                $("#ExpensedAmount").prop("readonly", true);
                $("#PvId").select2({
                    minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                    width: 'resolve',   // to adjust proper width of select2 wrapped elements
                    placeholder: "Select PV No",
                    allowClear: false,
                    initSelection: function (element, callback) {
                        var id = $(element).val();
                        if (id !== "") {
                            $.ajax('@Url.Action("GetSelectedPvNo", "DummyReceipts")', {
                                data: { id: id },
                                dataType: "json"
                            }).done(function (data) {
                                callback(data);
                            });
                        }
                    },
                    ajax: {
                        url: '@Url.Action("GetPvNos", "DummyReceipts")', // Controller - Select2Demo and Action -AccessRemoteData
                        type: "GET",
                        dataType: 'json',
                        data: function (term) {
                            return {
                                term: term
                            };
                        },
                        results: function (data, page) {
                            return { results: data.pvNos }; // data.CountryList returning json data from Controlle
                        }
                    },
                });
            }
        })

        $('#SubBudgetClass').on("change", function () {
            var subBudgetClass = $("#SubBudgetClass").val();

            $.ajax({
                type: "GET",
                url: "GetSubBudgetClass",
                data: { id: subBudgetClass },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#DrGlAccount").val(data.DrGlAccount);
                        $("#DrGlAccountDesc").val(data.DrGlAccountDesc);
                        $("#FundType").val(data.FundType);
                        $("#SubBudgetClassDesc").val(data.SubBudgetClassDesc);
                    } else if (!data.success) {
                        swal({
                            text: data.response,
                            icon: "error",
                            button: "OK",
                        })
                    } else {
                        swal({
                            text: "Problem on accessing sub budget class details, contact system support",
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function () {
                    swal({
                        text: "Error on accessing sub budget class details, contact system support",
                        icon: "error",
                        button: "OK",
                    })
                }
            });
        });

        $('#GlAccount').on("change", function () {
            var glAccount = $("#GlAccount").val();
            var receiptType = $("#ReceiptType").val();
            var pvId = $("#PvId").val();

            $.ajax({
                type: "GET",
                url: "GetGlAccount",
                data: { glAccount: glAccount, receiptType: receiptType, pvId: pvId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#ExpensedAmount").val(data.ExpensedAmount);
                        $("#GlAccountDesc").val(data.GlAccountDesc);
                    } else {
                        swal({
                            text: "Error on accessing GL account details, contact system support",
                            icon: "warning",
                            button: "OK",
                        })
                    }

                    $("#ExpensedAmount").autoNumeric('set', $("#ExpensedAmount").val());
                },
                error: function () {
                    swal({
                        text: "Error on accessing GL account details, contact system support",
                        icon: "error",
                        button: "OK",
                    })
                }
            });
        });

        $("#ExpensedAmount").keyup(function () {
            var receiptType = $("#ReceiptType").val();
            if (receiptType == "Normal Receipt") {
                $("#ReturnedAmount").val($(this).val());
            }
            //$('#ExpensedAmount').autoNumeric('update', { mDec: '2', vMax: '999999999999.99', aSep: ',', aDec: '.' });
        });
        $("#ReturnedAmount").keyup(function () {
            //$('#ExpensedAmount').autoNumeric('update', { mDec: '2', vMax: '999999999999.99', aSep: ',', aDec: '.' });
        });

        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }

    </script>
}
