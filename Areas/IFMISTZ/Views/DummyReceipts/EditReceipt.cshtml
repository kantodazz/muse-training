@model IFMIS.Areas.IFMISTZ.Models.EditReceiptVM

<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Edit Receipt </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form action="@Url.Action("EditReceipt")" method="post" class="form-horizontal">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ReceiptId)
                                @Html.HiddenFor(model => model.ReceivingBankBIC)
                                @Html.HiddenFor(model => model.FundingSourceDesc)
                                @Html.HiddenFor(model => model.DrGlAccount)
                                @Html.HiddenFor(model => model.DrGlAccountDesc)
                                @Html.HiddenFor(model => model.FundType)
                                @Html.HiddenFor(model => model.SubBudgetClassDesc)
                                @Html.HiddenFor(model => model.CrGlAccount)
                                @Html.HiddenFor(model => model.CrGlAccountDesc)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceNo, "Reference No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.ReferenceNo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivingBankName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ReceivingBankAccountNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankAccountNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankAccountNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivingBankAccountName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankAccountName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankAccountName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ReceiptDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceiptDate, "_ShortDateTime", new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceiptDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.SubBudgetClass, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.SubBudgetClass, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CustomerAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(model => model.CustomerAddress, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CustomerAddress, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.IsAvailableForDistribution, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EnumDropDownListFor(model => model.IsAvailableForDistribution, "Please Select", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IsAvailableForDistribution, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.FundingSource, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.FundingSource, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.FundingSource, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CrGlAccountId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.CrGlAccountId, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CrGlAccountId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-8">
                                            <button class="btn btn-info" type="submit" style="float: left" ng-click="CreateBill()">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingReceipts","Receipts")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
    <script type="text/javascript">
        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        $(function () {
            $("#ReferenceNo").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Select Reference No",
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetReferenceNo", "Receipts")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetReferenceNos", "Receipts")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.refs }; // data.CountryList returning json data from Controlle
                    }
                },
            });

            $("#SubBudgetClass").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Select Sub Budget Class",
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedSubBudgetClass", "Receipts")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetSubBudgetClasses", "Receipts")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.subBudgetClasses }; // data.CountryList returning json data from Controlle
                    }
                },
            });

            $("#FundingSource").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Select Funding Source",
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedFundingSource", "Receipts")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetFundingSources", "Receipts")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.fundingSources }; // data.CountryList returning json data from Controlle
                    }
                }
            });

            $("#CrGlAccountId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Select GL Account",
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedCoa", "Receipts")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetCoas", "Receipts")/' + $("#FundingSource").val(), // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.coas }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $('#ReferenceNo').on("change", function () {
            var referenceNo = $("#ReferenceNo").val();

            $.ajax({
                type: "GET",
                url: "GetBankStatementDetail",
                data: { id: referenceNo },
                success: function (data, status, jqXHR) {
                    var receiptDate = Date.now;
                    if (data.ReceiptDate !== null) {
                        receiptDate = ConvertJsonDate(data.ReceiptDate);
                    }
                    if (data.success) {
                        $("#OperationalAmount").val(data.OperationalAmount);
                        $("#ReceivingBankName").val(data.ReceivingBankName);
                        $("#ReceivingBankBIC").val(data.ReceivingBankBic);
                        $("#ReceivingBankAccountNo").val(data.ReceivingBankAccountNo);
                        $("#ReceivingBankAccountName").val(data.ReceivingBankAccountName);
                        $("#ReceiptDate").val(receiptDate);                                    
                    } else {
                        swal({
                            text: "Error on accessing bank statement details",
                            icon: "warning",
                            button: "OK",
                        })
                    }
                    $("#OperationalAmount").autoNumeric({ aNeg: "-" }).trigger("change");
                },
                error: function () {
                    swal({
                        text: "Error on accessing bank statement details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#SubBudgetClass').on("change", function () {
            var subBudgetClass = $("#SubBudgetClass").val();

            $.ajax({
                type: "GET",
                url: "GetSubBudgetClass",
                data: { id: subBudgetClass },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#DrGlAccount").val(data.DrGlAccount);
                        $("#DrGlAccountDesc").val(data.DrGlAccountDesc);
                        $("#FundType").val(data.FundType);
                        $("#SubBudgetClassDesc").val(data.SubBudgetClassDesc);
                    } else {
                        swal({
                            text: "Error on accessing sub budget class details, contact system support",
                            icon: "warning",
                            button: "OK",
                        })
                    }
                },
                error: function () {
                    swal({
                        text: "Error on accessing sub budget class details, contact system support",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#FundingSource').on("change", function () {
            var fundingSource = $("#FundingSource").val();
            $("#FundingSourceDesc").val($("#FundingSource").select2("data").text);

            $("#CrGlAccountId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                ajax: {
                    url: '@Url.Action("GetCoas", "Receipts")/' + fundingSource, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.coas }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $('#CrGlAccountId').on("change", function (e) {
            var crGlAccountId = $("#CrGlAccountId").val();
            $.ajax({
                type: "GET",
                url: "GetCoa",
                data: { id: crGlAccountId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#CrGlAccount").val(data.CrGlAccount);
                        $("#CrGlAccountDesc").val(data.CrGlAccountDesc);
                    } else {
                        swal({
                            text: "Error on accessing GL details",
                            icon: "error",
                            button: "OK",
                        })

                    }
                },
                error: function () {
                    swal({
                        text: "Error on accessing GL details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }

    </script>
}