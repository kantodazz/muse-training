@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.SalaryAnomaliesSummary>

    @{
    // Layout = null;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var i = 0;
    }
    <div id="content" style="margin: 5px; padding-top: 30px">

        <div class="row">


        </div>


        <!-- widget grid -->
        <section id="widget-grid" class="">


            <!-- START ROW -->

            <div class="row">

                <!-- NEW COL START -->
                <article class="col-sm-12 col-md-12 col-lg-12">

                    <!-- Widget ID (each widget will need unique ID)-->
                    <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                        <header>
                            <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                            <h2>Salary Anomalies Summary(Missing Account/Unapplied/Unpaid)-Invalid Data</h2>

                        </header>


                        <div>
                            <div class="widget-body " style="padding-top:10px;width:100%">


                                <div align="center">
                                    <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                                </div>
                                <table class="table table-bordered table-hover table-condensed" id="dt_missing_accounts">
                                    <thead>
                                        <tr>
                                            <th style="text-align:right">
                                                S/NO
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.Description)
                                            </th>
                                            <th style="text-align:center">
                                                @Html.DisplayNameFor(model => model.ReferenceId)
                                            </th>
                                            <th style="text-align:center">
                                                @Html.DisplayNameFor(model => model.EmpNum)
                                            </th>
                                            <th style="text-align:right">
                                                @Html.DisplayNameFor(model => model.TotalAmount)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.SalaryMonthDesc)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.OverallStatus)
                                            </th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model)
                                        {
                                        i++;

                                        <tr>
                                            <td align="right">
                                                @i
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Description)
                                            </td>
                                            <td align="center">
                                                @Html.DisplayFor(modelItem => item.ReferenceId)
                                            </td>
                                            <td align="center">
                                                @Html.DisplayFor(modelItem => item.EmpNum)
                                            </td>
                                            <td align="right">
                                                @Html.DisplayFor(modelItem => item.TotalAmount)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.SalaryMonthDesc)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OverallStatus)
                                            </td>
                                            <td style="text-align:center">

                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" style="width:40px;border-radius:1px;" aria-haspopup="true" aria-expanded="false">
                                                        <span class="caret"></span>
                                                        <span class="sr-only">Toggle Dropdown</span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#" onclick="showMoreDetails(@item.SalaryAnomaliesSummaryId)" class="btn-xs edit"> <i class="fa fa-search-minus"></i>  Details</a></li>
                                                         <li><a href="#" onclick="reverseEntry(@item.SalaryAnomaliesSummaryId,'@item.ReferenceId')" class="btn-xs edit"><i class="fa fa-edit"></i> Reverse</a></li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                        }

                                    </tbody>

                                </table>

                            </div>





                        </div>


                    </div>
                </article>

            </div>
        </section>

    </div>
    <div class="modal fade" id="dedution_model" style="left:4%">

        <div class="modal-dialog" style="width:35%;">
            <div class="modal-content panel-info">

                <div class="modal-header panel-heading">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h3 class="modal-title" style="text-align:center"> Confirm Deduction</h3>
                    <h4 align="center"> <span id="deduction_type"></span></h4>
                </div>
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "ConfirmEntry" }))
                {
                <div class="modal-body form-horizontal">

                    <br />

                    <input type="hidden" name="Id" id="Id" value="">
                    <div class="form-group">

                        <div class="col-md-12">
                            <textarea name="Reason" id="Reason" placeholder="Rejection reason" required rows="4" class="form-control"></textarea>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-default" data-dismiss="modal">Cancel</a>
                    <input class="btn btn-info" type="submit" id="btnSubmit" value="Save" />
                    @*<input type="submit" value="Submit" class="btn btn-success" id="btnSubmit" />*@

                </div>

                }
            </div>
        </div>
    </div>
    <div class="modal fade" id="divModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
        <div class="modal-dialog modal-lg" style="width:80%;">
            <div width="90%" class="modal-content">
                <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="lblmodal">
                        Preview
                    </h4>
                </div>
                <div class="modal-body" id="divModalBody">

                </div>

                <div id="divPaymentStatusLoader" style="text-align:center; display:none">
                    <img src="~/assets/img/avatars/ajax_loader.gif" />
                </div>
            </div>
        </div>

    </div>
    @section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">
                /* // DOM Position key index //
         l - Length changing (dropdown)
         f - Filtering input (search)
         t - The Table! (datatable)
         i - Information (records)
         p - Pagination (paging)
         r - pRocessing
         < and > - div elements
         <"#id" and > - div with an id
         <"class" and > - div with a class
         <"#id.class" and > - div with an id and class
         Also see: http://legacy.datatables.net/usage/features
         */
                /* BASIC ;*/
                var responsiveHelper_dt_missing_accounts = undefined;
                var responsiveHelper_datatable_fixed_column = undefined;
                var responsiveHelper_datatable_col_reorder = undefined;
                var responsiveHelper_datatable_tabletools = undefined;

                var breakpointDefinition = {
                    tablet: 1024,
                    phone: 480
                };

                var dt_missing_accounts = $('#dt_missing_accounts').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_dt_missing_accounts) {
                            responsiveHelper_dt_missing_accounts = new ResponsiveDatatablesHelper($('#dt_missing_accounts'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_dt_missing_accounts.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_dt_missing_accounts.respond();
                    }
                });
                     $("#dt_missing_accounts_wrapper .dt-toolbar").remove();
                /* END BASIC */

                /* COLUMN FILTER  */
                var otable = $('#datatable_fixed_column').DataTable({
                    //"bFilter": false,
                    //"bInfo": false,
                    //"bLengthChange": false
                    //"bAutoWidth": false,
                    //"bPaginate": false,
                    //"bStateSave": true // saves sort state using localStorage
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_fixed_column) {
                            responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_fixed_column.respond();
                    }
                });

                // custom toolbar
                $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

                // Apply the filter
                $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {
                    otable
                        .column($(this).parent().index() + ':visible')
                        .search(this.value)
                        .draw();
                });
                /* END COLUMN FILTER */

                /* COLUMN SHOW - HIDE */
                $('#datatable_col_reorder').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_col_reorder) {
                            responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_col_reorder.respond();
                    }
                });

                /* END COLUMN SHOW - HIDE */

                /* TABLETOOLS */
                $('#datatable_tabletools').dataTable({

                    // Tabletools options:
                    //   https://datatables.net/extensions/tabletools/button_options
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "oTableTools": {
                        "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                           {
                               "sExtends": "pdf",
                               "sTitle": "SmartAdmin_PDF",
                               "sPdfMessage": "SmartAdmin PDF Export",
                               "sPdfSize": "letter"
                           },
                           {
                               "sExtends": "print",
                               "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                           }
                        ],
                        "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                    },
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_tabletools) {
                            responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_tabletools.respond();
                    }
                });
                /* END TABLETOOLS */


                $("#ConfirmEntry").on('submit', function (e) {
                    e.preventDefault();

                    swal({
                        title: 'Confirmation',
                        text: "Do you confirm this Deduction Type ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                            var url = '@Url.Action("ConfirmRejected", "SalaryDeductionPayment")';
                            var id = $("#Id").val();
                            var reason = $("#Reason").val();
                            var formData = {
                                "Id": id,
                                "Reason": reason
                            }
                            $('#dedution_model').modal('hide');
                            $.ajax(
                        {
                            type: "POST",
                            url: url,
                            data: formData,
                            success: function (result) {
                                if (result == "Success") {

                                    swal("Data Confirmed  successfully!", { icon: "success" })
                                              .then((value) => {
                                           location.reload();
                                              });


                                }
                                else {

                                    swal(result);
                                }
                            },
                            error: function (xhr) {
                                swal(error);

                            },

                        });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });
                });



            //SHOW LOADER ICON
            $(document).ajaxStart(function () {
                $(".loadingImg").show();

            });
            //HIDE LOADER ICON
            $(document).ajaxStop(function () {
                $(".loadingImg").hide();
            });

      var showMoreDetails = function (id) {
            var url = '@Url.Action("PreviewSalaryAnomalies", "SalaryAnomaliesPayment")';
            $("#divModalBody").load(url, { id: id }, function (response, status, xhr) {
                if (status == "error") {
                    $("#divModalBody").html("Error on accessing this details, contact system support.");
                }
                dt_preview_deduction = $('#divModalBody #dt_preview_missingac').dataTable();
                    $("#dt_preview_missingac_wrapper .dt-toolbar").remove();
                $("#divModal").modal("show");
            });
        };


        var reverseEntry = function (id, ReferenceId) {
            debugger;
                    swal({
                        title: 'Confirmation',
                        text: "Do you reverse missing Account of ReferenceID " + ReferenceId + " ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                            debugger;
                          var url = '@Url.Action("ReverseEntry", "SalaryAnomaliesPayment")';
                            $.ajax(
                {
                    type: "GET",
                    url: url,
                    data: {id:id },
                    success: function (response) {
                        if (response == "Success") {
                            swal("Data reverse to be matched again", { icon: "success" })
                                      .then((value) => {
                                          location.reload();
                                      });


                        }
                        else {

                            swal(response);
                        }
                    },
                    error: function (xhr) {
                        swal(error);
                        $("#divLoader").hide();
                    },

                });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });
        };
       var confirmRejected = function (id, deductionType) {
                 $("#deduction_type").text(deductionType);
                 $(".modal-body #Id").val(id);
                 $('#dedution_model').modal('show');
        }

           function MissingAccounts() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("PerfomVerification", "SalaryMissingAccounts")",
                contenttype: "application/json; charset=utf-8",
                datatype: "json",
                success: function (result) {
                    if (result.response== "Success") {
                        if (result.data) {
                            data = result.data;
                            dt_missing_accounts.fnClearTable();
                            for (var i = 0; i < data.length; i++) {

                                dt_missing_accounts.fnAddData([i + 1,
                                data[i]["Description"],
                               '<div align="right">' + data[i]["ValidEmployees"] + '</div>',
                                '<div align="right">' + toLabel(data[i]["TotalAmount"]) + '</div>',
                                ToJavaScriptDate(data[i]["CreatedAt"]),
                                data[i]["OverallStatus"],
                                '<div align="center"><div class="btn-group">\
                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
                                         <span class="caret"></span\
                                             <span class="sr-only"></span>\
                                    </button>\
                                  <ul class="dropdown-menu">\
                                        <li><a href="#" onclick= "showMoreDetails(' + data[i]["MissingAccountSummaryId"] + ')"><i class="fa fa-search-minus"></i>Details</a></li>\
                                        <li><a href="#" onclick= "confirmEntry(' + data[i]["MissingAccountSummaryId"] + ')"><i class="fa fa-edit"></i>Confirm</a></li>\
                                  </ul>\
                                </div> </div>'
                                ]);
                            }
                        }

                    }
                      else {
                            swal(result);
                        }
            },
            failure: function (error) {
                swal(error);
            }
        });
        }
          function ToJavaScriptDate(value) {
            if (value != null && value != '') {
                var pattern = /Date\(([^)]+)\)/;
                var results = pattern.exec(value);
                var dt = new Date(parseFloat(results[1]));
                return dt.getDate() + "/" + (dt.getMonth() + 1) + "/" + dt.getFullYear();
            }
          }
    </script>
    }
