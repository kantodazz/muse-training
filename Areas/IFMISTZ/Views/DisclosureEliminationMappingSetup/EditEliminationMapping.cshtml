@model IFMIS.Areas.Consolidation.Models.DisclosureEliminationMapping
@{
    ViewBag.Title = "Edit Elimination Mapping";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .input[type="text"], select {
        border: 1px solid lightgray;
        width: 100%;
        height: 35px;
    }

    .textarea {
        border: 1px solid lightgray;
        width: 100%;
    }

    .input[type="text"]:focus {
        border: 1px solid lightblue;
    }

    th {
        text-align: left;
    }
</style>
<!-- widget grid -->
<div id="divLoader"></div>
<div id="content" style="margin: 5px; padding-top: 50px">

    <section id="widget-grid" class="">
        <div class="row">

            <article class="col-sm-12 col-md-12 col-lg-12">

                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>

                        <h2 style="color:black;">Edit Elimination Mapping</h2>

                    </header>
                    <div>
                        <div class="widget-body" style="padding-top:10px; width:100%;">

                            <table style="width:100%;">
                                <tr>
                                    <td colspan="1">
                                        @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal" }))
                                        {
                                            <div class="form-horizontal" style="text-align: center">
                                                @Html.AntiForgeryToken()
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                @Html.HiddenFor(model=>model.Id)

                                                <div class="form-group">
                                                    @Html.Label("Base Category", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("BaseCategoryId", null, "Select Base Category", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.BaseCategoryId, "", new { @class = "text-danger" })
                                                    </div>

                                                    @Html.Label("Counter Part Category", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("CounterPartCategoryId",null, "Select Counter Part Category", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.CounterPartCategoryId, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>
                                                <div class="form-group">
                                                    @Html.Label("Base Note", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("BaseNote", null, "Select Base Note", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.BaseNote, "", new { @class = "text-danger" })
                                                    </div>

                                                    @Html.Label("Counter Part Note", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("CounterPartNote", null, "Select Counter Part Note", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.CounterPartNote, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>
                                                <div class="form-group">
                                                    @Html.Label("Base GfsCode From", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("BaseGfsCodeFrom",null, "Select Base GfsCode From", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.BaseGfsCodeFrom, "", new { @class = "text-danger" })
                                                    </div>

                                                    @Html.Label("Counter Part GfsCode From", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("CounterPartGfsCodeFrom", null, "Select Counter Part GfsCode From", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.CounterPartGfsCodeFrom, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>

                                                <div class="form-group">
                                                    @Html.Label("Base GfsCode To", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("BaseGfsCodeTo", null, "Select Base GfsCode To", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.BaseGfsCodeTo, "", new { @class = "text-danger" })
                                                    </div>

                                                    @Html.Label("Counter Part GfsCode To", htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-4">
                                                        @Html.DropDownList("CounterPartGfsCodeTo", null, "Select Counter Part GfsCode to", new { @class = "form-control  select2", style = "width:370px;text-align:left", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.CounterPartGfsCodeTo, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>

                                            </div>
                                            <div class="row" style="padding-bottom:20px">
                                                <div class="col-md-2"></div>
                                                <div class="col-md-6">
                                                    <a class="btn btn-info" onclick="window.history.back()" style="margin-right:5px">
                                                        <i class="fa fa-arrow-left"></i>Back
                                                    </a>
                                                    <button type="button" class="btn btn-info" onclick="SubmitData(this)" id="submit">
                                                        <i class="fa fa-save"></i>Save
                                                        <img src="~/Content/img/loading.gif" id="saveLoader" />
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </td>
                                    <td colspan="1"></td>
                                </tr>
                            </table>

                        </div>
                        
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>

@section pagespecific {
    <script type="text/javascript">

        function SubmitData(formData) {
            if (!$("#BaseCategoryId").val() ||
                !$("#CounterPartCategoryId").val() ||
                !$("#BaseNote").val() ||
                !$("#CounterPartNote").val() ||
                !$("#BaseGfsCodeFrom").val() ||
                !$("#BaseGfsCodeTo").val() ||
                !$("#CounterPartGfsCodeFrom").val() ||
                !$("#CounterPartGfsCodeTo").val()
            ) {
                swal("Please fill all fields!", { icon: "warning" });
                return false;
            }
            $("#saveLoader").toggle(true);
            $('#submit').attr("disabled", true);
            var Id = $("#Id").val();
            var BaseCategoryId = $("#BaseCategoryId").val();
            var CounterPartCategoryId = $("#CounterPartCategoryId").val();
            var BaseNote = $("#BaseNote").val();
            var CounterPartNote = $("#CounterPartNote").val();
            var BaseGfsCodeFrom = $("#BaseGfsCodeFrom").val();
            var BaseGfsCodeTo = $("#BaseGfsCodeTo").val();
            var CounterPartGfsCodeFrom = $("#CounterPartGfsCodeFrom").val();
            var CounterPartGfsCodeTo = $("#CounterPartGfsCodeTo").val();
            var url = '@Url.Action("SaveEditEliminationMapping", "DisclosureEliminationMappingSetup")';
            var url1 = '@Url.Action("EliminationMappingList", "DisclosureEliminationMappingSetup")';
            $.ajax(
            {
                type: "POST",
                url: url,
                    data: {
                        Id,
                        BaseCategoryId,
                        CounterPartCategoryId,
                        BaseNote,
                        CounterPartNote,
                        BaseGfsCodeFrom,
                        BaseGfsCodeTo,
                        CounterPartGfsCodeFrom,
                        CounterPartGfsCodeTo
                    },
                    contenttype: "application/json; charset=utf-8",
                    datatype: "json",
                    success: function (response) {
                        $("#saveLoader").toggle(false);
                        $('#submit').attr("disabled", false);
                    if (response == "Success") {
                        swal("Saved  successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.href = url1;
                            });
                    }
                    else {
                        swal(response, { icon: "warning" });
                    }
                },
                error: function (xhr) {
                    //console.log(xhr.responseText);
                    $("#saveLoader").toggle(false);
                    $('#submit').attr("disabled", false);
                    swal("An error has occured, contact system support");

                },

            });
        }
        @*$("form").submit(function () {
            if (!$("#BaseCategoryId").val() ||
                !$("#CounterPartCategoryId").val() ||
                !$("#BaseNote").val() ||
                !$("#CounterPartNote").val() ||
                !$("#BaseGfsCodeFrom").val() ||
                !$("#BaseGfsCodeTo").val() ||
                !$("#CounterPartGfsCodeFrom").val() ||
                !$("#CounterPartGfsCodeTo").val()
                ) {
                return false;
            }
            $("#saveLoader").toggle(true);
            $('#submit').attr("disabled", true);
            var Id = $("#Id").val();
            var BaseCategoryId = $("#BaseCategoryId").val();
            var CounterPartCategoryId = $("#CounterPartCategoryId").val();
            var BaseNote = $("#BaseNote").val();
            var CounterPartNote = $("#CounterPartNote").val();
            var BaseGfsCodeFrom = $("#BaseGfsCodeFrom").val();
            var BaseGfsCodeTo = $("#BaseGfsCodeTo").val();
            var CounterPartGfsCodeFrom = $("#CounterPartGfsCodeFrom").val();
            var CounterPartGfsCodeTo = $("#CounterPartGfsCodeTo").val();
            var url = '@Url.Action("SaveEliminationMapping", "DisclosureEliminationMappingSetup")';
            var url1 = '@Url.Action("EliminationMappingList", "DisclosureEliminationMappingSetup")';
            $.ajax(
            {
                type: "POST",
                url: url,
                    data: {
                        Id,
                        BaseCategoryId,
                        CounterPartCategoryId,
                        BaseNote,
                        CounterPartNote,
                        BaseGfsCodeFrom,
                        BaseGfsCodeTo,
                        CounterPartGfsCodeFrom,
                        CounterPartGfsCodeTo
                    },
                    success: function (response) {
                        $("#saveLoader").toggle(false);
                        $('#submit').attr("disabled", false);
                    if (response == "Success") {
                        swal("Saved  successfully!", { icon: "success" })
                            .then((value) => {
                                window.location.href = url1;
                                });
                    }
                    else {
                        swal(response, { icon: "warning" });
                    }
                },
                error: function (xhr) {
                    //console.log(xhr.responseText);
                    $("#saveLoader").toggle(false);
                    $('#submit').attr("disabled", false);
                    swal("An error has occured, contact system support");

                },

            });
        });*@

        $("#saveLoader").toggle(false);
        $("#submit").prop('disabled', false);




        $(document).ready(function () {

            var responsiveHelper_dt_basic = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };
            $('#dt_basic').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_dt_basic) {
                        responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#dt_basic'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_dt_basic.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_dt_basic.respond();
                }
            });

            var otable = $('#datatable_fixed_column').DataTable({

                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_fixed_column) {
                        responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_fixed_column.respond();
                }

            });

            // custom toolbar
            $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');
            $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });
            $('#datatable_col_reorder').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_col_reorder) {
                        responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_col_reorder.respond();
                }
            });

            $('#datatable_tabletools').dataTable({

                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                        {
                            "sExtends": "pdf",
                            "sTitle": "SmartAdmin_PDF",
                            "sPdfMessage": "SmartAdmin PDF Export",
                            "sPdfSize": "letter"
                        },
                        {
                            "sExtends": "print",
                            "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                        }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            /* END TABLETOOLS */

        })

    </script>
}
