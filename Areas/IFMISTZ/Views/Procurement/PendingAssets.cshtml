@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.ReceivedAssetsVM>
@{
    ViewBag.Title = "Pending Assets ";
}



<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Pending Assets </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">


                            <table class="table  table-bordered table-hover table-condensed" id="dt_assets">
                                <thead>
                                    <tr>
                                        <th style="text-align:right;width:4%"></th>
                                        <th style="text-align:left">Code</th>
                                        <th style="text-align:left;">Receiving Number</th>
                                        <th style="text-align:left">Inventory Desc</th>                   
                                        <th style="text-align:center">No of Assets</th>  
                                        <th style="text-align:left">Assets Class</th>
                                        <th style="text-align:left">BatchNo</th>
                                        <th style="text-align:left">Status</th>
                                        <th style="text-align:center">Action</th>

                                    </tr>
                                </thead>

                                <tbody>
                                    @{var i = 0;}
                                    @foreach (var item in Model)
                                    {
                                        i++;
                                        <tr>
                                            <td style="text-align:right">
                                                @i
                                            </td>
                                            <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.AssetsCode)
                                            </td>
                                            <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.ReceivingNumber)
                                            </td>
                                            <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.AssetName)
                                            </td>
                                            <td style="text-align:center">
                                                @if (item.AssetClassId == 1)
                                                {
                                                   
                                                        <a href="@Url.Action("PreviewMotorsMachinery","Procurement",new {id=item.ReceivedAssetsId})">
                                                            <span class="badge inbox-badge margin-right-13">@Html.DisplayFor(modelItem => item.Quantity)</span>
                                                        </a>
                                                  
                                                }
                                                else
                                                {
                                                
                                                        <a href="@Url.Action("PreviewAssets","Procurement",new {id=item.ReceivedAssetsId})">
                                                            <span class="badge inbox-badge margin-right-13">@Html.DisplayFor(modelItem => item.Quantity)</span>
                                                        </a>
                                                  

                                                }
                                            </td>
                                            <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.ClassName)
                                            </td>
                                           <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.BatchNo)
                                            </td>                                       
                                            <td style="text-align:left">
                                                @Html.DisplayFor(modelItem => item.OverallStatus)
                                            </td>
                                            <td style="text-align:center">

                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-info  btn-xs" style="width:50px;border-radius:1px;">Action</button>
                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" style="width:40px;border-radius:1px;" aria-haspopup="true" aria-expanded="false">
                                                        <span class="caret"></span>
                                                        <span class="sr-only">Toggle Dropdown</span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                  @if (item.ClassName != null)
                                  {
                                      if (item.AssetClassId == 1)
                                      {
                                          if (item.OverallStatus.ToUpper() == "INCOMPLETE")
                                          {
                                            <li>
                                                <a href="@Url.Action("EditMotorsMachinery","Procurement",new {id=item.ReceivedAssetsId})" class="btn-xs edit">
                                                    <i class="fa fa-edit"></i>  Edit Assets
                                                </a>
                                            </li>

                                          }
                                          else
                                          {
                                            <li>
                                                <a href="@Url.Action("ModifyMotorsMachinery","Procurement",new {id=item.ReceivedAssetsId})" class="btn-xs edit">
                                                    <i class="fa fa-edit"></i>  Edit Assets
                                                </a>
                                            </li>

                                          }

                                      }
                                      else
                                      {
                                          if (item.OverallStatus.ToUpper() == "INCOMPLETE")
                                          {
                                            <li>
                                                <a href="@Url.Action("EditAsssets","Procurement",new {id=item.ReceivedAssetsId})" class="btn-xs edit">
                                                    <i class="fa fa-edit"></i>  Edit Assets
                                                </a>
                                            </li>

                                          }
                                          else
                                          {
                                            <li>
                                                <a href="@Url.Action("ModifyAsssets","Procurement",new {id=item.ReceivedAssetsId})" class="btn-xs edit">
                                                    <i class="fa fa-edit"></i>  Edit Assets
                                                </a>
                                            </li>

                                          }


                                      }

                                  }
                                                        <li><a href="#" data-toggle="modal" data-target="#AssetClass" data-id=@item.ReceivedAssetsId data-bcode='@item.AssetsCode' data-assetclassid='@item.AssetClassId' class="asssetClass  btn-xs edit"><i class="fa fa-edit"></i> Set Asset Class</a></li>
                                                        @if (item.AssetClassId == 1)
                                                        {
                                                            <li>
                                                                <a href="@Url.Action("PreviewMotorsMachinery","Procurement",new {id=item.ReceivedAssetsId})" class="btn-xs edit">
                                                                    <i class="fa fa-search-minus"></i>  Preview
                                                                </a>
                                                            </li>
                                                        }
                                                        else
                                                        {
                                                            <li>
                                                                <a href="@Url.Action("PreviewAssets","Procurement",new {id=item.ReceivedAssetsId})" class="btn-xs edit">
                                                                    <i class="fa fa-search-minus"></i>  Preview
                                                                </a>
                                                            </li>

                                                        }
                                                    
                                                        @if (item.OverallStatus.ToUpper() == "PENDING")
                                                        {
                                                            <li><a href="#" data-toggle="modal" data-id=@item.ReceivedAssetsId data-assetsno='@item.AssetsCode' class="asssetConfirm  btn-xs edit"><i class="fa fa-edit"></i> Confirm</a></li>
                                                        }
                                                    </ul>
                                                </div>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                         
                        </div>





                    </div>


                </div>
            </article>

        </div>
    </section>

</div>


<div class="modal fade" id="AssetClass">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 align="center">Asset(s) Batch Code: <span id="bcode"></span></h4>
            </div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "AssetClassform" }))
{
    @Html.AntiForgeryToken()
   
            <div class="modal-body">
                <input type="hidden" name="AssetbatchId" id="AssetbatchId" value="">
                <input type="hidden" name="PrevAssetClassId" id="PrevAssetClassId" value="">
                <div class="form-group">
                    @Html.Label("Asset(s) Class", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-7">
                        @Html.DropDownList("AssetClassId", ViewBag.AsssetClassesList as SelectList, "Select ", new { @class = "form-control",@required= "required" })
                        </div>

                    </div>
                </div>
            <div class="modal-footer">
               
                    <button type="submit" class="btn action-btn"
                            style="background-color:#2196F3;color:white">
                        Save
                    </button>
                    <button class="btn btn-warning action-btn" data-dismiss="modal">
                        Cancel
                    </button>
                </div>
           
}

        </div>
    </div>
</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">

            $(document).ready(function () {
                /* // DOM Position key index //
 l - Length changing (dropdown)
 f - Filtering input (search)
 t - The Table! (datatable)
 i - Information (records)
 p - Pagination (paging)
 r - pRocessing
 < and > - div elements
 <"#id" and > - div with an id
 <"class" and > - div with a class
 <"#id.class" and > - div with an id and class
 Also see: http://legacy.datatables.net/usage/features
 */
                /* BASIC ;*/
                var responsiveHelper_dt_assets = undefined;
                var responsiveHelper_datatable_fixed_column = undefined;
                var responsiveHelper_datatable_col_reorder = undefined;
                var responsiveHelper_datatable_tabletools = undefined;

                var breakpointDefinition = {
                    tablet: 1024,
                    phone: 480
                };

                $('#dt_assets').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_dt_assets) {
                            responsiveHelper_dt_assets = new ResponsiveDatatablesHelper($('#dt_assets'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_dt_assets.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_dt_assets.respond();
                    }
                });

                /* END BASIC */

                /* COLUMN FILTER  */
                var otable = $('#datatable_fixed_column').DataTable({
                    //"bFilter": false,
                    //"bInfo": false,
                    //"bLengthChange": false
                    //"bAutoWidth": false,
                    //"bPaginate": false,
                    //"bStateSave": true // saves sort state using localStorage
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_fixed_column) {
                            responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_fixed_column.respond();
                    }
                });

                // custom toolbar
                $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

                // Apply the filter
                $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {
                    otable
                        .column($(this).parent().index() + ':visible')
                        .search(this.value)
                        .draw();
                });
                /* END COLUMN FILTER */

                /* COLUMN SHOW - HIDE */
                $('#datatable_col_reorder').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_col_reorder) {
                            responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_col_reorder.respond();
                    }
                });

                /* END COLUMN SHOW - HIDE */

                /* TABLETOOLS */
                $('#datatable_tabletools').dataTable({

                    // Tabletools options:
                    //   https://datatables.net/extensions/tabletools/button_options
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "oTableTools": {
                        "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                           {
                               "sExtends": "pdf",
                               "sTitle": "SmartAdmin_PDF",
                               "sPdfMessage": "SmartAdmin PDF Export",
                               "sPdfSize": "letter"
                           },
                           {
                               "sExtends": "print",
                               "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                           }
                        ],
                        "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                    },
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_tabletools) {
                            responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_tabletools.respond();
                    }
                });
                /* END TABLETOOLS */

                $(".asssetConfirm").on('click', function () {
                    var id = $(this).data('id');
                    var assets_number = $(this).data('assetsno');
                    swal({
                        title: 'Confirmation',
                        text: "Do you what to confirm Asset(s)   " + assets_number + " ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                         var url = '@Url.Action("ConfirmAsset", "Procurement")';
                            $.ajax(
                {
                    type: "POST",
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        if (response == "Success") {

                            swal("Confirmed successfully", { icon: "success" })
                                      .then((value) => {
                                          location.reload();
                                      });


                        }
                        else {

                            swal("Failed to confirm ,DbException");
                        }
                    },
                    error: function (xhr) {
                        swal(error);
                        $("#divLoader").hide();
                    },

                });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });

                });
               
                         
                $(".asssetClass").on('click', function () {
                    var id = $(this).data('id');
                    var asset_class_id = $(this).data('assetclassid');
                    var bcode = $(this).data('bcode');
                    $("#bcode").text(bcode);
                    $("#AssetClassId").val(asset_class_id);
                    $("#AssetbatchId").val(id);
                    $("#PrevAssetClassId").val(asset_class_id);


                });

                $("#AssetClassform").on('submit', function (e) {
                    e.preventDefault();
                    var prev_id=$("#PrevAssetClassId").val();
                    var current_id = $("#AssetClassId").val();
                    if (prev_id == 1 && prev_id != current_id) {
                        var r = confirm("All previous inserted information of Motors Machinery class  will be cleared ?");
                        if (!r) {
                            return;
                        }

                    }
                    var formData = $(this).serialize();
                    $('#AssetClass').modal('hide');
                    var url = '@Url.Action("SetAssetsClass", "Procurement")';
                    $.ajax(
                    {
                        type: "POST",
                        url: url,
                        data: formData,
                        success: function (response) {
                            if (response == "Success") {
                                alert("Assets Class set  successfully");
                                location.reload();
                            }
                            else {
                                alert("Failed to set Assets Class,DbException");
                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            alert("An error has occured, contact system support");
                            $("#divLoader").hide();
                        },

                    });

                });
                var $rows = $('#lpo tr');
                $('#search').keyup(function () {
                    var val = $.trim($(this).val()).replace(/ +/g, ' ').toLowerCase();

                    $rows.show().filter(function () {
                        var text = $(this).text().replace(/\s+/g, ' ').toLowerCase();
                        return !~text.indexOf(val);
                    }).hide();
                });


                        });
        var confirmEntry = function (id, code) {
                swal({
                        title: 'Confirmation',
                        text: "Do you what to confirm Asset(s)   " + code + " ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                         var url = '@Url.Action("ConfirmAsset", "Procurement")';
                            $.ajax(
                {
                    type: "POST",
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        if (response == "Success") {

                            swal("Confirmed successfully", { icon: "success" })
                                      .then((value) => {
                                          location.reload();
                                      });


                        }
                        else {

                            swal("Failed to confirm ,DbException");
                        }
                    },
                    error: function (xhr) {
                        swal(error);
                        $("#divLoader").hide();
                    },

                });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });

        }


            //function myFunction() {
            //    // Declare variables
            //    var input, filter, table, tr, td, i, txtValue;
            //    input = document.getElementById("lpo_search");
            //    filter = input.value.toUpperCase();
            //    table = document.getElementById("lpo");
            //    tr = table.getElementsByTagName("tr");

            //    // Loop through all table rows, and hide those who don't match the search query
            //    for (i = 0; i < tr.length; i++) {
            //        td = tr[i].getElementsByTagName("td")[2];
            //        if (td) {
            //            txtValue = td.textContent || td.innerText;
            //            if (txtValue.toUpperCase().indexOf(filter) > -1) {
            //                tr[i].style.display = "";
            //            } else {
            //                tr[i].style.display = "none";
            //            }
            //        }
            //    }
            //}
    </script>
}










