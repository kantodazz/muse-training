@model IFMIS.Areas.IFMISTZ.Models.PurchaseOrderVM
@{
    ViewBag.Title = "PurchaseOrder";
}

<style>
    .submit-btn {
        background-color: white;
        color: black;
        border: 1px solid #538AC5;
        border-radius: 12px;
        padding: 3px;
        padding-right: 10px;
    }

    .searchContainer {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
    }

    .searchIcon {
        padding: 0.5rem;
    }

    .searchBox {
        border: 0;
        /*padding: 0.5rem 0.5rem 0.5rem 0;*/
        padding: 8px;
        flex: 1;
    }

    .searchButton {
        background: #538AC5;
        border: 0;
        color: white;
        /*padding: 0.5rem;*/
        padding: 8px;
        border-radius: 0;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        resize: vertical;
    }

    .action-btn {
        width: 100px;
        border-radius: 10px;
    }

    .action-btn2 {
        border-radius: 10px;
    }
</style>
<div id="content">

    <section id="widget-grid">
        <div class="row">
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-editbutton="false">

                <header style="background-color:#2196F3">
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>Supplier Details</h2>
                </header>

                <div>
                    <div class="widget-body " style="padding-top:10px">
                        <a class="submit-btn" onclick="SearchPayee()" href="#">
                            <i class="fa fa-search searchIcon"></i>
                            Select Suppliers
                        </a>
                        <table id="dt_basic" class="table table-striped table-bordered table-hover table-condensed"></table>
                      
                      
                    </div>
                    <!-- end widget content -->

                </div>
                <!-- end widget div -->

            </div>
        </div>
    </section>

    <section id="widget-grid">
        <div class="row">
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-editbutton="false">

                <header style="background-color:#2196F3">
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>Basic Information </h2>
                </header>

                <div>
                    <div class="widget-body " style="padding-top:10px">
                        @using (Html.BeginForm("PurchaseOrder", "Procurement", FormMethod.Post, new { @class = "well form-horizontal" }))
                        {
                            <table class="table table-striped">
                                <tr>
                                    <td colspan="1">
                                        @Html.AntiForgeryToken()
                                       @Html.HiddenFor(model => model.PayeeId)                                           
                                        <fieldset>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">LPO Number</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.EditorFor(model => model.PurchaseOrderNo, new { htmlAttributes = new { @readOnly = "readOnly", @style = "background-color:white;width:230px;", @placeholder = "Auto generated" } })
                                                        @Html.ValidationMessageFor(model => model.PurchaseOrderNo, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">LPO Description</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.EditorFor(model => model.PurchaseOrderDesc, new { htmlAttributes = new { @style = "background-color:white;width:230px;", rows = "3", @placeholder = "Type here LPO description" } })
                                                        @Html.ValidationMessageFor(model => model.PurchaseOrderDesc, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">LPO Amount</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.EditorFor(model => model.PurchaseOrderAmount, new { htmlAttributes = new { @style = "background-color:white;width:230px;", @placeholder = "Amount" } })
                                                        @Html.ValidationMessageFor(model => model.PurchaseOrderAmount, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">VAT</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                       @Html.EditorFor(model => model.Vat, new { htmlAttributes = new { @min="0", @style = "background-color:white;width:230px;", @placeholder = "Amount" } })
                                                        @Html.ValidationMessageFor(model => model.Vat, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                        </fieldset>

                                    </td>
                                    <td colspan="1">

                                        <fieldset>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">With Holding</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.CheckBoxFor(model => model.WithHolding)
                                                        @Html.ValidationMessageFor(model => model.WithHolding, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Sub Budget Class</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        <div>
                                                            @Html.DropDownList("SubBudgetClass", Model.SubBudgetClassList, "Select Sub Budget Class", new { @class = "selectpicker", @style = "background-color:white;width:230px;" })
                                                            @Html.ValidationMessageFor(model => model.SubBudgetClassList, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Currency</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.DropDownList("OperationalCurrencyId", Model.CurrenciesList, null, new { @class = "selectpicker", @style = "background-color:white;width:230px;" })
                                                        @Html.ValidationMessageFor(model => model.CurrenciesList, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Supplier</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.EditorFor(model => model.Supplier, new { htmlAttributes = new { @readOnly = "readOnly", @style = "background-color:white;width:230px;height:40px;", @placeholder = "Select Supplier on top" } })
                                                        @Html.ValidationMessageFor(model => model.Supplier, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Validity Period (In days)</label>
                                                <div class="col-md-8 inputGroupContainer">
                                                    <div class="input-group">
                                                        @Html.EditorFor(model => model.ValidityPeriodDays, new { htmlAttributes = new { @min = 0, @style = "background-color:white;width:230px;height:40px;", @placeholder = "Enter Number of Days" } })
                                                        @Html.ValidationMessageFor(model => model.ValidityPeriodDays, "", new { @class = "text-danger" })

                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <div class="col-md-offset-4 savebutton col-md-1 inputGroupContainer">
                                                    <button type="submit" class="btn btn-primary">
                                                        Save
                                                    </button>
                                                </div>
                                                <div class="col-md-offset-4 editbutton col-md-1 inputGroupContainer" style="display:none">
                                                    <a href="#" data-toggle="modal" data-target="#editLPO" class="editLPO btn btn-primary">Edit</a>
                                                </div>
                                            </div>

                                        </fieldset>

                                    </td>

                                </tr>

                            </table>
                        }
                    </div>



                </div>
                <!-- end widget div -->

            </div>
        </div>
    </section>

</div>





<div class="modal fade" id="payeeModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Supplier</h3>

            </div>
            <div class="modal-body">

                <table class="table" id="dt_search_payee">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>PayeeId</th>
                            <th>Supplier Name</th>
                            <th>TIN Number</th>
                            <th>Bank Name</th>
                            <th>Bank Account No</th>
                            <th>Payee Type</th>
                            <th>Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button type="submit" class="btn action-btn2"
                        style="background-color:#2196F3;color:white"
                        id="btn_add_payee" onclick="alert('Under Construction')">
                    Add New Payee
                </button>

            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="editLPO">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 align="center">Edit Purchase Order</h4>
            </div>
            <div class="modal-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <td colspan="1">
                                <form class="well form-horizontal" style="background-color:#EDECEC" id="editLPOForm">
                                    <fieldset>
                                        @Html.HiddenFor(model => model.PurchaseOrderId)
                                        @Html.HiddenFor(model => model.PayeeId)
                                        <div class="form-group">
                                            <label class="col-md-4 control-label">LPO Number</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.EditorFor(model => model.PurchaseOrderNo, new { htmlAttributes = new { @class = "form-control", @readOnly = "readOnly", @style = "background-color:white" } })
                                                </div>
                                            </div>
                                        </div>
         
                                        <div class="form-group">
                                            <label class="col-md-4 control-label">LPO Description</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.EditorFor(model => model.PurchaseOrderDesc, new { htmlAttributes = new { @class = "form-control", @style = "background-color:white", rows = "3", @placeholder = "Type here LPO description" } })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-md-4 control-label">LPO Amount</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.EditorFor(model => model.PurchaseOrderAmount, new { htmlAttributes = new { @class = "form-control", @style = "background-color:white", @placeholder = "Amount" } })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label">VAT</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.EditorFor(model => model.Vat, new { htmlAttributes = new { @class = "form-control", @style = "background-color:white", @placeholder = "VAT" } })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label">With Holding</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.EditorFor(model => model.WithHolding, new { htmlAttributes = new { @class = "form-control", @style = "background-color:white", @placeholder = "VAT" } })
                                                    @Html.CheckBox("WithHolding", false)
                                                 </div>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label">Sub Budget Class</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon" style="max-width: 100%;"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.DropDownList("SubBudgetClass", Model.SubBudgetClassList, "Select Sub Budget Class", new { @class = "selectpicker form-control", @style = "background-color:white" })

                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label">Currency</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon" style="max-width: 100%;"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.DropDownList("OperationalCurrencyId", Model.CurrenciesList, "Select Sudget Class", new { @class = "selectpicker form-control", @style = "background-color:white" })

                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-md-4 control-label">Validity Period</label>
                                            <div class="col-md-8 inputGroupContainer">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="glyphicon glyphicon-list"></i></span>
                                                    @Html.EditorFor(model => model.ValidityPeriodDays, new { htmlAttributes = new { @class = "form-control", @style = "background-color:white", @placeholder = "Enter Number of Days" } })
                                                </div>
                                            </div>
                                        </div>


                                    </fieldset>
                                    <div class="modal-footer">
                                        <a href="#" class="btn btn-default" data-dismiss="modal">Cancel</a>
                                        <input class="btn btn-info" type="submit" id="btnSubmit" value="Submit" />
                                        @*<input type="submit" value="Submit" class="btn btn-success" id="btnSubmit" />*@

                                    </div>
                                </form>
                            </td>

                        </tr>
                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>



@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->
    <script src="/scripts/plugin/bootstrap-wizard/jquery.bootstrap.wizard.min.js"></script>
    <script src="/scripts/plugin/fuelux/wizard/wizard.min.js"></script>

    <script type="text/javascript">

        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        $(document).ready(function () {
            var lpoamount = parseFloat($(".purchaseOrder #PurchaseOrderAmount").val());      
            $(".lpoAmount").text(lpoamount);

            var grandTotal = 0;
            var url = '@Url.Action("ItemsList", "Procurement")';
            $.ajax(
{
    type: "POST",
    url: url,
    success: function (data) {
        $('#items').empty();
        var number = data.length;

        $(".itemnumber").text(number);
        if (number > 0) {
            $('<tr><th style="text-align: center">#</th><th style="text-align: center">Item </th><th style="text-align: center">Quantity</th><th style="text-align: center">Unit Price</th><th style="text-align: center">Total Amount</th><th style="width:134px;text-align: center">Action</th></tr>').appendTo('#items');
        }
        var j = 0;
        var sum = 0;
        $.each(data, function (i, d) {
            sum = sum + parseFloat(d.TotalAmount);
            j++;
            $('<tr><td align="center">' + j + '</th><td align="center">' + d.ItemDescription + '</td><td align="center">' + d.Quantity + '</td><td align="center">' + d.UnitPrice + '</td><td align="center">' + d.TotalAmount + '</td><td><a href="#" data-toggle="modal" data-target="#editAdjust" data-id="' + d.PurchaseOrderDetailId + '" class="editAdjust btn btn-info btn-xs edit"><i class="fa fa-edit"></i> Edit</a><a href="#" data-toggle="modal" class="removeItems btn btn-danger btn-xs delete" data-id="' + d.PurchaseOrderDetailId + '" data-itemdesc="' + d.ItemDescription + '" ><i class="fa fa-trash-o"></i> Delete</a></td></tr>').appendTo('#items');

        });
        if (number > 0) {
            grandTotal = 0;
            grandTotal = sum;
            var lpo_amount = parseFloat($(".purchaseOrder #PurchaseOrderAmount").val());
            $(".purchaseDetails #TotalItemsValues").val(grandTotal);
            var bal = lpo_amount - grandTotal;
            $(".totalValues").text(grandTotal);
            $(".balance").text(bal);
            $('<tr><td align="right" colspan="4">Grand Total<td align="center">' + sum + '</td><td></td></tr>').appendTo('#items');
          }
    },
    error: function (xhr) {
        //console.log(xhr.responseText);
        alert("An error has occured, contact system support");
        $("#divLoader").hide();
    },

});
            $(".editLPO").on('click', function () {
               var lpoNo=$(".purchaseOrder #PurchaseOrderNo").val();
               var id = $(".purchaseOrder #PurchaseOrderId").val();
               var desc = $(".purchaseOrder #PurchaseOrderDesc").val();
               var amount = $(".purchaseOrder #PurchaseOrderAmount").val();
               var validity = $(".purchaseOrder #ValidityPeriodDays").val();
               var payee = $(".purchaseOrder #PayeeId").val();
               var  subBudgetClass= $(".purchaseOrder #SubBudgetClass").val();
               var currency = $(".purchaseOrder #OperationalCurrencyId").val();
               var Vat = $(".purchaseOrder #Vat").val();
               var WithHolding = $(".purchaseOrder #WithHolding").val();
                $(".modal-body #PurchaseOrderNo").val(lpoNo);
                $(".modal-body #PurchaseOrderId").val(id);
                $(".modal-body #PurchaseOrderDesc").val(desc);
                $(".modal-body #PurchaseOrderAmount").val(amount);
                $(".modal-body #ValidityPeriodDays").val(validity);
                $(".modal-body #PayeeId").val(payee);
                $(".modal-body #SubBudgetClass").val(subBudgetClass);
                $(".modal-body #Vat").val(Vat);
                $(".modal-body #WithHolding").val(WithHolding);


            });
            $(function () {
                $(".purchaseOrder").on('submit', function (e) {
                    e.preventDefault();
                    var supplier = $(".purchaseOrder #PayeeId").val();
                    if (!supplier) {
                        alert("Please select supplier on top first !!!");
                        return;
                    } 
                    var formData = $(this).serialize();
                    var url = '@Url.Action("UpdatePurchaseOrder", "Procurement")';
                    $.ajax(
                    {
                        type: "POST", //HTTP POST Method
                        url: url, // Controller/View
                        data: formData,
                        success: function (response) {
                            if (response == "DbException") {
                                alert(" An error has occured DbException, contact system support");
                                $("#divLoader").hide();
                            } else {
                                alert("LPO saved successfully");
                                $('.purchaseOrder #PayeeId').attr("disabled", true);
                                $('.purchaseOrder #SubBudgetClass').attr("disabled", true);
                                $('.purchaseOrder #OperationalCurrencyId').attr("disabled", true);
                                $(".purchaseOrder #PurchaseOrderDesc").prop("readonly", true);
                                $(".purchaseOrder #PurchaseOrderAmount").prop("readonly", true);
                                $(".purchaseOrder #ValidityPeriodDays").prop("readonly", true);
                                $(".purchaseOrder #Vat").prop("readonly", true);
                                $(".purchaseOrder #WithHolding").prop("readonly", true);
                                $(".purchaseOrder #PurchaseOrderNo").val(response.PurchaseOrderNo);
                                $(".purchaseOrder #PurchaseOrderId").val(response.PurchaseOrderId);
                                $(".purchaseDetails #PurchaseOrderId").val(response.PurchaseOrderId);
                                $(".savebutton").hide();
                                $(".editbutton").show();
                                $(".lpo").text(response.PurchaseOrderNo);
                                $(".Vat").text(response.Vat);
                                $(".WithHolding").text(response.WithHolding);
                                var lpoamount = parseFloat( $(".purchaseOrder #PurchaseOrderAmount").val());
                                var Vat = parseFloat($(".purchaseOrder #Vat").val());
                                var TotalBalance=lpoamount;
                                $(".lpoAmount").text(lpoamount);
                                $(".balance").text(TotalBalance);
                                $(".purchaseDetails #TotalItemsValues").val(0);
                                $(".totalValues").text(0);
                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            alert("An error has occured, contact system support");
                            $("#divLoader").hide();
                        },

                    });

                });
            });

            $(function () {
                $("#editLPOForm").on('submit', function (e) {
                    e.preventDefault();
                    var total_values = parseFloat($(".purchaseDetails #TotalItemsValues").val());
                    var lpoamountNeW = parseFloat($(".modal-body #PurchaseOrderAmount").val());
                    if (lpoamountNeW < total_values) {
                        alert("Please LPO Amount can not be less than the item values " + total_values + " !");
                        var amount = $(".purchaseOrder #PurchaseOrderAmount").val();
                       return
                    }
                    $('#editLPO').modal('hide');
                    var formData = $(this).serialize();
                    var url = '@Url.Action("EditPurchaseOrder", "Procurement")';
                    $.ajax(
                    {
                        type: "POST", //HTTP POST Method
                        url: url, // Controller/View
                        data: formData,
                        success: function (response) {
                            if (response == "DbException") {
                                alert(" An error has occured DbException, contact system support");
                                $("#divLoader").hide();
                            } else {
                                alert("LPO updated successfully");
                                $(".purchaseOrder #PayeeId").val(response.PayeeId);
                                $(".purchaseOrder #PurchaseOrderDesc").val(response.PurchaseOrderDesc);
                                $(".purchaseOrder #PurchaseOrderAmount").val(response.PurchaseOrderAmount);
                                $(".purchaseOrder #SubBudgetClass").val(response.SubBudgetClass);
                                $(".purchaseOrder #OperationalCurrencyId").val(response.OperationalCurrencyId);
                                $(".purchaseOrder #ValidityPeriodDays").val(response.ValidityPeriodDays);
                                $(".purchaseOrder #Vat").val(response.Vat);
                                $(".purchaseOrder #WithHolding").val(response.WithHolding);
                                $(".lpoAmount").text(response.PurchaseOrderAmount);
                                var lpo_amount = parseFloat(response.PurchaseOrderAmount);
                                var total_values = parseFloat($(".purchaseDetails #TotalItemsValues").val());
                                var bal = lpo_amount - total_values;
                                $(".balance").text(bal);
                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            alert("An error has occured, contact system support");
                            $("#divLoader").hide();
                        },

                    });

                });
            });



            $(function () {
                $(".purchaseDetails").on('submit', function (e) {
                    e.preventDefault();
                    var formData = $(this).serialize();
                    var url = '@Url.Action("InsertPOrderDetails", "Procurement")';
                    $.ajax(
                    {
                        type: "POST", //HTTP POST Method
                        url: url, // Controller/View
                        data: formData,
                        success: function (response) {
                            if (response == "DbException") {
                                alert(" An error has occured DbException, contact system support");
                                $("#divLoader").hide();
                            } else {
                                alert("Item added successfully");
                                $('.purchaseDetails #ItemDesc').val("");
                                $('.purchaseDetails #Quantity').val("");
                                $('.purchaseDetails #UnitPrice').val("");
                                $('.purchaseDetails #TotalAmount').val("");
                                $('#items').empty();
                                var number = response.length;
                                $(".itemnumber").text(number);
                                if (number > 0) {
                                    $('<tr><th style="text-align: center">#</th><th style="text-align: center">Item </th><th style="text-align: center">Quantity</th><th style="text-align: center">Unit Price</th><th style="text-align: center">Total Amount</th><th style="width:134px;text-align: center">Action</th></tr>').appendTo('#items');
                                }
                                var j = 0;
                                var sum = 0;
                                $.each(response, function (i, d) {
                                    sum = sum + parseFloat(d.TotalAmount);
                                    j++;
                                    $('<tr><td align="center">' + j + '</th><td align="center">' + d.ItemDescription + '</td><td align="center">' + d.Quantity + '</td><td align="center">' + d.UnitPrice + '</td><td align="center">' + d.TotalAmount + '</td><td><a href="#" data-toggle="modal" data-target="#editAdjust" data-id="' + d.PurchaseOrderDetailId + '" class="editAdjust btn btn-info btn-xs edit"><i class="fa fa-edit"></i> Edit</a><a href="#" data-toggle="modal" class="removeItems btn btn-danger btn-xs delete" data-id="' + d.PurchaseOrderDetailId + '" data-itemdesc="' + d.ItemDescription + '" ><i class="fa fa-trash-o"></i> Delete</a></td></tr>').appendTo('#items');

                                });
                                if (number > 0) {
                                    grandTotal = 0;
                                    grandTotal = sum;
                                    var lpo_amount = parseFloat($(".purchaseOrder #PurchaseOrderAmount").val());
                                    $(".purchaseDetails #TotalItemsValues").val(grandTotal);
                                    var bal = lpo_amount - grandTotal;
                                    $(".totalValues").text(grandTotal);
                                    $(".balance").text(bal);
                                    $('<tr><td align="right" colspan="4">Grand Total<td align="center">' + sum + '</td><td></td></tr>').appendTo('#items');
                                }
                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            alert("An error has occured, contact system support");
                            $("#divLoader").hide();
                        },

                    });

                });
            });


            $('#items').on("click", ".removeItems", function (e) { //user click on remove
                e.preventDefault();
                var id = $(this).data('id');
                var itemDesc = $(this).data('itemdesc');

                var r = confirm("Do you what to delete  " + itemDesc + " ?");
                if (!r) {
                    return;
                }
                var url = '@Url.Action("DeleteItem", "Procurement")';
                $.ajax(
{
    type: "POST",
    url: url,
    data: { ProcOrdDetID: id },
    success: function (response) {
        if (response == "DbException") {
            alert(" An error has occured DbException, contact system support");
            $("#divLoader").hide();
        } else {
            alert("Deleted successfully");
            $('#items').empty();
            var number = response.length;
            $(".itemnumber").text(number);
            if (number > 0) {
                $('<tr><th style="text-align: center">#</th><th style="text-align: center">Item </th><th style="text-align: center">Quantity</th><th style="text-align: center">Unit Price</th><th style="text-align: center">Total Amount</th><th style="width:134px;text-align: center">Action</th></tr>').appendTo('#items');
            }
            var j = 0;
            var sum = 0;
            $.each(response, function (i, d) {
                sum = sum + parseFloat(d.TotalAmount);
                j++;
                $('<tr><td align="center">' + j + '</th><td align="center">' + d.ItemDescription + '</td><td align="center">' + d.Quantity + '</td><td align="center">' + d.UnitPrice + '</td><td align="center">' + d.TotalAmount + '</td><td><a href="#" data-toggle="modal" data-target="#editAdjust" data-id="' + d.PurchaseOrderDetailId + '" class="editAdjust btn btn-info btn-xs edit"><i class="fa fa-edit"></i> Edit</a><a href="#" data-toggle="modal" class="removeItems btn btn-danger btn-xs delete" data-id="' + d.PurchaseOrderDetailId + '" data-itemdesc="' + d.ItemDescription + '" ><i class="fa fa-trash-o"></i> Delete</a></td></tr>').appendTo('#items');

            });
            if (number > 0) {
                grandTotal = 0;
                grandTotal = sum;
               var lpo_amount = parseFloat($(".purchaseOrder #PurchaseOrderAmount").val());
                $(".purchaseDetails #TotalItemsValues").val(grandTotal);
                var bal = lpo_amount - grandTotal;
                $(".totalValues").text(grandTotal);
                $(".balance").text(bal);
                $('<tr><td align="right" colspan="4">Grand Total<td align="center">' + sum + '</td><td></td></tr>').appendTo('#items');
            }
            else {
                grandTotal = 0;
                var lpo_amount = parseFloat($(".purchaseOrder #PurchaseOrderAmount").val());
                $(".totalValues").text(grandTotal);
                $(".purchaseDetails #TotalItemsValues").val(grandTotal);
                $(".balance").text(lpo_amount);
               }
        }
    },
    error: function (xhr) {
        //console.log(xhr.responseText);
        alert("An error has occured, contact system support");
        $("#divLoader").hide();
    },

});
            });

            $(function () { // this will be called when the DOM is ready
                $("#UnitPrice").keyup(function () {
                    var unit_price = parseFloat($("#UnitPrice").val());
                    var quantity = parseInt($("#Quantity").val());
                    var total = unit_price * quantity;

                    var lpo_amount = parseFloat($(".purchaseOrder #PurchaseOrderAmount").val());
                    if (grandTotal + total <= lpo_amount) {
                        $("#TotalAmount").val(total);
                        var totalVal = grandTotal + total;
                        var balance = lpo_amount - totalVal;
                        $("#lpoAmount").text(lpo_amount + "/=Tsh");
                        $("#balance").text(balance + "/=Tsh");
                        $(".totalValues").text(totalVal);
                        $(".balance").text(balance);
                    }else{
                        alert("Total value of items can not exceed Purchase Order amount " + "(" + lpo_amount + "Tsh)");
                        $('.purchaseDetails #UnitPrice').val("");
                        $('.purchaseDetails #TotalAmount').val("");
                     }

                });

            });

            @*$(".purchaseOrder #SubBudgetClass").change(function () {

                var subBudgetClass = $(".purchaseOrder #SubBudgetClass").val();
                $('.itemCharges #SubBudgetClass').val(subBudgetClass);
                var url = '@Url.Action("GetGIAccount", "Procurement")';

                $.ajax({
                    type: "POST",
                    url: url,
                    data: { SubBudgetClass: subBudgetClass },
                    success: function (response) {
                        $("#CoaId").empty();
                        $("#CoaId").append(response);
                    }
                })
            });*@
            @*$(".modal-body #SubBudgetClass").change(function () {

                var subBudgetClass = $(".modal-body #SubBudgetClass").val();
                $('.itemCharges #SubBudgetClass').val(subBudgetClass);
                var url = '@Url.Action("GetGIAccount", "Procurement")';

                $.ajax({
                    type: "POST",
                    url: url,
                    data: { SubBudgetClass: subBudgetClass },
                    success: function (response) {
                        $("#CoaId").empty();
                        $("#CoaId").append(response);
                    }
                })
            });*@
            $(".itemCharges #CoaId").change(function () {

                @*var subBudgetClass = $(".itemCharges #SubBudgetClass").val();
                var url = '@Url.Action("GetFundingRef", "Procurement")';

                $.ajax({
                    type: "POST",
                    url: url,
                    data: { SubBudgetClass: subBudgetClass },
                    success: function (response) {
                        $("#FundReceivingId").empty();
                        $("#FundReceivingId").append(response);
                    }
                })*@
            });
            //Bootstrap Wizard Validations

            var $validator = $("#wizard-1").validate({

                rules: {
                    email: {
                        required: true,
                        email: "Your email address must be in the format of name@domain.com"
                    },
                    fname: {
                        required: true
                    },
                    lname: {
                        required: true
                    },
                    country: {
                        required: true
                    },
                    city: {
                        required: true
                    },
                    postal: {
                        required: true,
                        minlength: 4
                    },
                    wphone: {
                        required: true,
                        minlength: 10
                    },
                    hphone: {
                        required: true,
                        minlength: 10
                    }
                },

                messages: {
                    fname: "Please specify your First name",
                    lname: "Please specify your Last name",
                    email: {
                        required: "We need your email address to contact you",
                        email: "Your email address must be in the format of name@domain.com"
                    }
                },

                highlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
                },
                errorElement: 'span',
                errorClass: 'help-block',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else {
                        error.insertAfter(element);
                    }
                }
            });

            $('#bootstrap-wizard-1').bootstrapWizard({
                'tabClass': 'form-wizard',
                'onNext': function (tab, navigation, index) {
                    var $valid = $("#wizard-1").valid();
                    if (!$valid) {
                        $validator.focusInvalid();
                        return false;
                    } else {
                        $('#bootstrap-wizard-1').find('.form-wizard').children('li').eq(index - 1).addClass(
                          'complete');
                        $('#bootstrap-wizard-1').find('.form-wizard').children('li').eq(index - 1).find('.step')
                        .html('<i class="fa fa-check"></i>');
                    }
                }
            });


            // fuelux wizard
            var wizard = $('.wizard').wizard();

            wizard.on('finished', function (e, data) {
                //$("#fuelux-wizard").submit();
                //console.log("submitted!");
                $.smallBox({
                    title: "Congratulations! Your form was submitted",
                    content: "<i class='fa fa-clock-o'></i> <i>1 seconds ago...</i>",
                    color: "#5F895F",
                    iconSmall: "fa fa-check bounce animated",
                    timeout: 4000
                });

            });


        })

        //SUPPLIER DETAILS
        var breakpointDefinition = {
            tablet: 1024,
            phone: 480
        };

        // ============= SHOW PAYEE===============
        var dt_basic = $('#dt_basic').dataTable({
            "autoWidth": true,
            "searching": false,
            "bPaginate": false,
            "info": false,
            "data": [],
            "columnDefs":[
            { "targets":[0],
                "visible":false
            }
            ],
            "columns": [
                 { title: "Payee Detail Id" },
                { title: "Supplier Name" },
                { title: "TIN Number" },
                { title: "Bank Name" },
                { title: "Payee Type" },
                { title: "Bank Account No" },
                { title: "Address" }
            ]
        });
        // ============= SEARCH PAYEEE ===========

        $(function () {
            BindDataTable();
        });

        var dt_search_payee = undefined;
        var BindDataTable = function (response) {
            var url = '@Url.Action("GetPayee", "PaymentVoucher")';
            dt_search_payee = $("#dt_search_payee").DataTable({
                "bServerSide": true,
                "sAjaxSource": url,
                "fnServerData": function (sSource, aoData, fnCallback) {
                    $.ajax({
                        type: "GET",
                        url: sSource,
                        data: aoData,
                        success: fnCallback
                    });
                },
                "columnDefs": [{
                    "targets": [1],
                    "visible":false
                }],
                "aoColumns": [
                    {
                        render: function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    { "mData": "PayeeDetailId" },
                     { "mData": "AccountName" },
                    { "mData": "PayeeCode" },
                    { "mData": "BankName" },
                    { "mData": "Accountnumber" },
                    { "mData": "PayeeType" },
                    { "mData": "Address1" },
                    {
                        "mData": "PayeeDetailId",
                        "bSortable": false,
                        "render": function (Id, type, full, meta) {
                            return '<a href="#" onclick="payeeClicked(' + meta.row + ')"><i class="glyphicon glyphicon-download-alt"></i></a>'
                        }
                    },
                ]
            });
        };


        function payeeClicked(rowId) {
            var data = dt_search_payee.rows().data();
            var row = data.rows(rowId).data()[0];
            console.log(row);
            $(".purchaseOrder #PayeeId").val(row["PayeeDetailId"]);
            //PayeeDetailId
            dt_basic.fnClearTable();
            dt_basic.fnAddData([row["PayeeDetailId"],row["AccountName"], row["PayeeCode"], row["BankName"], row["PayeeType"], row["Accountnumber"], row["Address1"]]);
            $("#payeeModal").modal("hide");
        }


        // =========== END SEARCH PAYEE ====================

        // =========== START VOUCHER DETAILS ===============
        var dt_voucher_detail = $('#dt_voucher_detail').dataTable({
            "autoWidth": true,
            "searching": false,
            "bPaginate": false,
            "info": false,
            "data": [],
            "columns": [
                { title: "Expenditure Line Item" },
                { title: "Item Description" },
                { title: "Funding Reference" },
                { title: "Expense Amount" }
            ]
        });

        // =========== END VOUCHER DETAILS ====================

        function SearchPayee() {
            $('#payeeModal').modal('show');
        }


        ///========== SEARCH GL =====
        var responsiveHelper_dt_search_gl_item = undefined;
        var dt_search_gl_item = $('#dt_search_gl_item').DataTable({
            "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                "t" +
                "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
            "autoWidth": true,
            "searching": true,
            "bPaginate": true,
            "info": true,
            "preDrawCallback": function () {
                // Initialize the responsive datatables helper once.
                if (!responsiveHelper_dt_search_gl_item) {
                    responsiveHelper_dt_search_gl_item = new ResponsiveDatatablesHelper($('#dt_search_gl_item'), breakpointDefinition);
                }
            },
            "rowCallback": function (nRow) {
                responsiveHelper_dt_search_gl_item.createExpandIcon(nRow);
            },
            "drawCallback": function (oSettings) {
                responsiveHelper_dt_search_gl_item.respond();
            }
        });

        function SearchGl() {
            $('#glItemsModal').modal('show');
            $('#total_voucher_amount2').val($('#total_voucher_amount').val());
            if (parseFloat($('#difference').val()) == 0) {
                $('#difference').val($('#total_voucher_amount').val());
            }
        }
        /////// ==== END OF SEARCH GL ==============

        //==== START OF ADD GL Items to Voucher Details ======
        function remove(array, val) {
            var found = array.indexOf(val);
            while (found !== -1) {
                array.splice(found, 1);
                found = array.indexOf(val);
            }
        }

        var form_data_status = [];

        function amountChanged(i) {
            var original_amount = parseFloat($("#amount-" + i).text());
            var entered_amount = parseFloat($("#Id-" + i).val());
            var balance = original_amount - entered_amount;
            if (balance < 0) {
                form_data_status.push(i);
                $("#row-" + i).css({ 'color': 'red' });
            } else {
                $("#row-" + i).css({ 'color': 'black' });
                remove(form_data_status, i);
                computeTotalAmount();
            }

        }

        function computeTotalAmount() {
            var total_amount = 0;
            var difference = 0;
            var data = dt_search_gl_item.rows().data();
            var obj = [];
            for (var i = 0; i < data.length; i++) {
                amount = $("#Id-" + i).val();
                if (amount.trim()) {
                    total_amount = parseFloat(total_amount) + parseFloat(amount);
                    $("#total_line_amount").val(total_amount);
                }
            }
            try {
                difference = parseFloat($('#total_voucher_amount').val()) - parseFloat(total_amount);
                $('#difference').val(difference);
            } catch (e) { }
        }

        $("#btn_save_gl_items").click(function () {
            var total_amount = 0;
            var difference = 0;
            if (form_data_status.length == 0) {
                var data = dt_search_gl_item.rows().data();
                var obj = [];
                dt_voucher_detail.fnClearTable();
                for (var i = 0; i < data.length; i++) {
                    amount = $("#Id-" + i).val();
                    obj.push({ "id": i, "amount": amount.trim() });
                    if (amount.trim()) {
                        var row = data.rows(i).data()[0];
                        dt_voucher_detail.fnAddData([row[1], row[2], row[4], amount]);
                        total_amount = parseFloat(total_amount) + parseFloat(amount);
                        $("#total_amount").text(total_amount);
                        $("#total_amount").text(total_amount);
                    }
                }
                //    alert(JSON.stringify(obj));
                difference = parseFloat($('#total_voucher_amount').val()) - parseFloat(total_amount);
                if (difference < 0) {
                    alert("Difference Cannot be negative..");
                } else {
                    $('#glItemsModal').modal('hide');
                }
            } else {
                alert("Please Fix Form Errors....");
            }


        });
        //==== END OF ADD GL Items to Voucher Details ======


        // =========== FORM SUBMISSION ==================

        $("#form_submision").click(function () {
            var data = dt_basic.DataTable().rows().data();
            var row = data.rows(0).data()[0];

            var form_data = {
                "PayeeDetailId": '',
                "PayeeName": row[0],
                "PayeeCode": row[1],
                "BankName": row[2],
                "PayeeType": row[3],
                "BankAccountNo": row[4],
                "Address": row[5],
                "PaymentDescription": $("#PaymentDescription").val(),
                "InvoiceNo": $("#InvoiceNo").val(),
                "ControlNumber": $("#ControlNumber").val(),
                "Comments": $("#Comments").val(),
                "SubBudgetClass": $("#SubBudgetClass").val(),
                "TotalAmount": $("#total_voucher_amount").val(),
                "ApplyDate": $("#ApplyDate").val(),
                "InvoiceDate": $("#InvoiceDate").val(),
                "PaymentMethod": $("#PaymentMethod").val(),
                "VoucherDetails": [
                    {
                        "ExpenditureLineItem": '',
                        "ItemDescription": '',
                        "FundingReference": '',
                        "ExpenseAmount": ''

                    }
                ]
            }

            console.log(form_data);

        });

        //END SUPPLIER DETAILS

    </script>
}
