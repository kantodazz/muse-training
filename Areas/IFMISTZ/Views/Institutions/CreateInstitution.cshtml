@model IFMIS.Areas.IFMISTZ.Models.Institution

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="divLoader"></div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Institution </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form name="createInstitutionForm" id="createInstitutionForm">
                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.ImplementorName)
                                    @Html.HiddenFor(model => model.ProjectName)

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.InstitutionCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.InstitutionCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.InstitutionCode, "", new { @class = "text-danger" })
                                        </div>

                                        <label class="col-md-2 control-label" style="text-align:right;">
                                            Upload Logo
                                            <i class="fa fa-times" style="color:white" id="logo_1"></i>
                                        </label>
                                        <div class="col-md-4">
                                            <input style="width:300px" id="logo" type="file" name="file" class="btn btn-default">
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.InstitutionName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.InstitutionName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.InstitutionName, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.InstitutionCategory, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownList("InstitutionCategory", ViewBag.InstitutionCategory as SelectList, "", new { @Class = "select2 form-control", style = "width:300px", })
                                            @Html.ValidationMessageFor(model => model.InstitutionCategory, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.SectorCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownList("SectorCode", ViewBag.Sector as SelectList, "", new { @Class = "select2 form-control", style = "width:300px", required = "required" })
                                            @Html.ValidationMessageFor(model => model.SectorCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.VoteCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.VoteCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.VoteCode, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.SubSectorCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            <select name="SubSectorCode" id="SubSectorCode" class="form-control"></select>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.InstitutionLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownList("InstitutionLevel", ViewBag.Institutionlevel as SelectList, "", new { @Class = "select2 form-control", id = "InstitutionLevel", style = "width:300px", required = "required" })
                                            @Html.ValidationMessageFor(model => model.InstitutionLevel, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Level1Code, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level1Code, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level1Code, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Level1Desc, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level1Desc, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level1Desc, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Level2Code, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level2Code, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level2Code, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Level2Desc, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level2Desc, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level2Desc, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Level3Code, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level3Code, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level3Code, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Level3Desc, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level3Desc, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level3Desc, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Level4Code, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level4Code, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level4Code, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Level4Desc, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Level4Desc, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Level4Desc, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Address3, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Address3, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Address3, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AoTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.AoTitle, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.AoTitle, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownList("Country", ViewBag.Country as List<SelectListItem>, "", new { @Class = "select2 form-control", style = "width:300px", autocomplete = "off", })
                                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Telephone, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.AoTin, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.AoTin, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.AoTin, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SpCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.SpCode, new { htmlAttributes = new { @class = "form-control", @placeholder = "Eg. SP148 Given by GPG" } })
                                            @Html.ValidationMessageFor(model => model.SpCode, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.SubSpCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.SubSpCode, new { htmlAttributes = new { @class = "form-control", @placeholder = "Eg.1001 Given by GPG" } })
                                            @Html.ValidationMessageFor(model => model.SubSpCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CollectionCenterCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CollectionCenterCode, new { htmlAttributes = new { @class = "form-control", @placeholder = "Eg. Given by GePG" } })
                                            @Html.ValidationMessageFor(model => model.CollectionCenterCode, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.CollectionCenterName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.CollectionCenterName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CollectionCenterName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PaymentOfficeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownList("PaymentOfficeId", ViewBag.poffice as SelectList, "", new { @Class = "select2 form-control", style = "width:300px", autocomplete = "off", required = "required" })
                                            @Html.ValidationMessageFor(model => model.PaymentOfficeId, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.SpSysId, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.SpSysId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Eg.TMUSE Given by GePG" } })
                                            @Html.ValidationMessageFor(model => model.SpSysId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ConsolidationFlag, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.CheckBoxFor(m => m.ConsolidationFlag)
                                            @Html.ValidationMessageFor(model => model.ConsolidationFlag, "", new { @class = "text-danger" })
                                        </div>

                                        @Html.LabelFor(model => model.VoteGroupID, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.DropDownList("VoteGroupID", ViewBag.Votegroup as SelectList, "", new { @Class = "select2 form-control", autocomplete = "off", })
                                            @Html.ValidationMessageFor(model => model.VoteGroupID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <fieldset class="scheduler-border">

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.IsDFUND, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-4">
                                                @Html.CheckBoxFor(m => m.IsDFUND)
                                                @Html.ValidationMessageFor(model => model.IsDFUND, "", new { @class = "text-danger" })
                                            </div>

                                            <div class="col-md-4">

                                            </div>
                                        </div>

                                        <div class="form-group" id="dfund">
                                            @Html.LabelFor(model => model.ImplementorCode, "Implementor Code", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.ImplementorCode, new { @class = "select2 form-control" })
                                                @Html.ValidationMessageFor(model => model.ImplementorCode, "", new { @class = "text-danger" })
                                            </div>
                                            @Html.LabelFor(model => model.ProjectCode, "Project Code", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-4">
                                                <select id="ProjectCode" class="form-control select2">
                                                    <option value="Select Project Name" selected="selected">--Select Project Name--</option>
                                                    @foreach (var projectlist in ViewBag.ProjectCode)
                                                    {
                                                        <option value="@projectlist.ProjectCode">
                                                            @projectlist.ProjectCodeProjectName
                                                        </option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>


                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <a href='@Url.Action("InstitutionList", "Institutions")' class="btn btn-info" style="   width:80px;border-radius:1px;color:black">
                                                <i class="glyphicon glyphicon-arrow-left"></i>
                                                Back
                                            </a>
                                            <button type="button" class="btn btn-info" onclick="save()" id="form_submision" style="width:80px;">
                                                <i class="fa fa-save"></i>Save
                                            </button>
                                        </div>
                                    </div>
                                </div>


                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->

@section pagespecific{

    <script>

        $("#AoTin").keyup(function () {
            debugger
            var tin = $("#AoTin").val();
            if (tin.length == 11) {
                $("#AoTin").css("background-color", "white");
                var url = '@Url.Action("ValidateTIN", "Institutions")';
                $.ajax({

                    type: "GET",
                    url: url,
                    data: { tin: tin },
                    contenttype: "application/json; charset=utf-8",
                    datatype: "json",
                    success: function (data) {
                        console.log(data);

                        if (data.response == "Success") {
                            $("#divLoader").hide();
                            swal(data.responseDescription, { icon: "success" }).then((e) => {

                                $("#AoTin").css({ 'border-color': '' });
                            });
                        }
                        else {
                            $("#divLoader").hide();
                            swal(data.responseDescription, {icon:"warning"}).then((e) => {
                                $("#AoTin").val("");
                                $("#AoTin").focus();
                                $("#AoTin").css({ 'border-color': 'red' });

                            });
                        };

                    },
                    error: function (err) {
                        console.log(err);
                        swal(err.statusText)
                        $("#saveLoader").toggle(false);
                    }
                });
            }

        });


        $('#dfund').toggle(false)
        $('#IsDFUND').change(function () {
            var isChecked = $(this).is(':checked');
            if ($(this).prop("checked")) {
                $('#dfund').toggle(true);
            } else {
                $('#dfund').toggle(false)
                $("#ProjectCode").empty();
                $("#ImplementorCode").empty();
            }
        });


        $("#SectorCode").change(function () {
            debugger
            var code = $(this).val();
            getSubLevelCodes(code);
        });

        $("#InstitutionLevel").change(function () {
            toggleLevelCode();
        });

        function getSubLevelCodes(code) {
            debugger;
            var option = [];
            $.ajax({
                url: '@Url.Action("GetSectorCode", "Institutions")/?code=' + code + '',
                type: "GET",
                dataType: "json",
                success: function (data) {
                    data.forEach(d=> {
                        option.push('<option value=' + d["Value"] + '>' + d["Text"] + '</option>');
                    });
                    option = option.toString().replace(",", "").replace("[", "").replace("]", "");
                    $("#SubSectorCode").html(option);
                }
            })
        }

        function save() {

            if (voucherSummaryFormValidation()) {

                var formData = new FormData();
                formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
                formData.append('file', $('input[type=file]')[0].files[0]);
                formData.append('InstitutionCode', $("#InstitutionCode").val());
                formData.append('InstitutionName', $("#InstitutionName").val());
                formData.append('InstitutionLevel', $("#InstitutionLevel").val());
                formData.append('InstitutionCategory', $("#InstitutionCategory").val());
                formData.append('VoteCode', $("#VoteCode").val());
                formData.append('Level1Code', $("#Level1Code").val());
                formData.append('Level1Desc', $("#Level1Desc").val());
                formData.append('Level2Code', $("#Level2Code").val());
                formData.append('Level2Desc', $("#Level2Desc").val());
                formData.append('Level3Code', $("#Level3Code").val());
                formData.append('Level3Desc', $("#Level3Desc").val());
                formData.append('Level4Code', $("#Level4Code").val());
                formData.append('Level4Desc', $("#Level4Desc").val());
                formData.append('SectorCode', $("#SectorCode").val());
                formData.append('SectorDesc', $("#SectorDesc").val());
                formData.append('SubSectorCode', $("#SubSectorCode").val());
                formData.append('SubSectorDesc', $("#SubSectorDesc").val());
                formData.append('AoTitle', $("#AoTitle").val());
                formData.append('AoTin', $("#AoTin").val());
                formData.append('City', $("#City").val());
                formData.append('Zip', $("#Zip").val());
                formData.append('Country', $("#Country").val());
                formData.append('Telephone', $("#Telephone").val());
                formData.append('Address1', $("#Address1").val());
                formData.append('Address3', $("#Address3").val());
                formData.append('PaymentOfficeId', $("#PaymentOfficeId").val());
                formData.append('SpCode', $("#SpCode").val());
                formData.append('SubSpCode', $("#SubSpCode").val());
                formData.append('SpSysId', $("#SpSysId").val());
                formData.append('VoteGroupID', $("#VoteGroupID").val());
                formData.append('ConsolidationFlag', $("#ConsolidationFlag").val());
                formData.append('CollectionCenterCode', $("#CollectionCenterCode").val());
                formData.append('CollectionCenterName', $("#CollectionCenterName").val());
                formData.append('IsDFUND', $(this).is(':checked'));
                formData.append('ImplementorCode', $("#ImplementorCode").val());
                formData.append('ImplementorName', $("#ImplementorName").val());
                var projectCode = $("#ProjectCode :selected").text();

                if (projectCode && projectCode.trim() && projectCode.includes('--')) {
                    formData.append('ProjectCode', projectCode.split('--')[0]);
                    formData.append('ProjectName', projectCode.split('--')[1]);
                }

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("CreateInstitution", "Institutions")',
                    data: formData,
                    contentType: false,
                    processData: false,
                    datatype: 'json',
                    success: function (response) {
                        debugger;
                        if (response == "Success") {
                            swal("Saved Successfully!", { icon: "success" })
                                .then((value) => {
                                    window.location.href = '@Url.Action("InstitutionList", "Institutions")';
                                });
                        }
                        else {

                            swal(response, {icon:"warning"});
                        }
                    },
                    failure: function (error) {

                        swal(error, { icon: "warning" });

                    }
                });

            } else {

                swal("Please fill the whole form !!");
            }
        }

        $("#Level1Code").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8 || val.length < 8) {

                $("#Level1Code").val(val.substring(0, 8));
            }
        });
        $("#Level2Code").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 5) {
                $("#Level2Code").val(val.substring(0, 5));
            }
        });


        $("#Level3Code").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 7) {
                $("#Level2Code").val(val.substring(0, 7));
            }
        });
        $("#Level4Code").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 8) {
                $("#Level2Code").val(val.substring(0, 8));
            }
        });
        $("#Telephone").on("keyup input paste cut", function () {
            var val = this.value
            if (val.length > 10) {
                $("#Telephone").val(val.substring(0, 10));
            }
        });

        toggleLevelCode();
        function toggleLevelCode() {

            if ($("#InstitutionLevel").val() == 1) {
                levelcode = $("#InstitutionCode").val();
                $("#Level1Code").prop('disabled', false);
                $("#Level2Code").val("00000");
                $("#Level2Code").prop('disabled', true);
                $("#Level3Code").val("0000000");
                $("#Level3Code").prop('disabled', true);
                $("#Level4Code").val("00000000");
                $("#Level1Desc").prop('disabled', false);
                $("#Level2Desc").prop('disabled', true);
                $("#Level4Code").prop('disabled', true);
                $("#Level3Desc").prop('disabled', true);
                $("#Level4Desc").prop('disabled', true);
                $("#Level2Desc").val("N/A");
                $("#Level3Desc").val("N/A");
                $("#Level4Desc").val("N/A");
            }
            else if ($("#InstitutionLevel").val() == 2) {
                $("#Level2Code").prop('disabled', false);
                $("#Level1Code").prop('disabled', false);
                $("#Level3Code").val("0000000");
                $("#Level3Code").prop('disabled', true);
                $("#Level4Code").val("00000000");
                $("#Level4Code").prop('disabled', true);
                $("#Level3Desc").val("N/A");
                $("#Level4Desc").val("N/A");
                $("#Level2Desc").prop('disabled', false);
                $("#Level1Desc").prop('disabled', false);
                $("#Level3Desc").prop('disabled', true);
                $("#Level4Desc").prop('disabled', true);
                $("#Level2Code").val();
                $("#Level2Desc").val();
            }
            else if ($("#InstitutionLevel").val() == 3) {
                $("#Level2Code").prop('disabled', false);
                $("#Level1Code").prop('disabled', false);
                $("#Level1Code").val();
                $("#Level1Desc").val();
                $("#Level2Code").val();
                $("#Level2Desc").val();
                $("#Level3Code").val();
                $("#Level3Desc").val();
                $("#Level3Code").prop('disabled', false);
                $("#Level3Desc").prop('disabled', false);
                $("#Level4Code").val("00000000");
                $("#Level4Code").prop('disabled', true);
                $("#Level4Desc").val("N/A");
                $("#Level2Desc").prop('disabled', false);
                $("#Level1Desc").prop('disabled', false);
                $("#Level4Desc").prop('disabled', true);


            } else if ($("#InstitutionLevel").val() == 4) {
                $("#Level4Code").prop('disabled', false);
                $("#Level3Code").prop('disabled', false);
                $("#Level2Code").prop('disabled', false);
                $("#Level1Code").prop('disabled', false);
                $("#Level4Desc").prop('disabled', false);
                $("#Level3Desc").prop('disabled', false);
                $("#Level2Desc").prop('disabled', false);
                $("#Level1Desc").prop('disabled', false);
            }

        }
        function voucherSummaryFormValidation() {
            var isNotValid = validateInputsParameters([
                "#InstitutionCode",
                "#InstitutionName",
                "#logo",
                "#Zip",
                "#VoteCode",
                "#Address1",
                "#City",
                "#Address3",
                "#AoTitle",
                "#Country",
                "#Telephone",
                "#AoTin",
                "#VoteGroupID"

            ]);

            if (isNotValid) {
                $(isNotValid + "_1").attr("style", "color: red;");
                return false
            }
            return true
        }

        function validateInputsParameters(parameterList) {
            var resetStyle = function (parameterList) {
                for (var i = 0; i < parameterList.length; i++) {
                    $(parameterList[i] + "_1").attr("style", "color: white;");
                }
            }

            resetStyle(parameterList);
            for (var i = 0; i < parameterList.length; i++) {
                if (!$(parameterList[i]).val().trim()) {
                    return parameterList[i];
                }
            }
            return null;
        }


        //---------------------------------------


        $("#ImplementorCode").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Search implementor Code ",
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id != 0) {
                        $.ajax('@Url.Action("GetSelectedProjectCode", "Institutions")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetImplementorCode", "Institutions")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (implementorCode) {
                        return {

                            implementorCode: implementorCode
                        };
                    },
                    results: function (data, page) {
                        return { results: data.refs }; // data.CountryList returning json data from Controlle
                    }
                },
        });



      $("#ImplementorCode").change(function () {
          var implementorCode = $("#ImplementorCode").val();
          var option = [];
          $.ajax({
               url: '@Url.Action("GetProjectListByImplementor", "Institutions")/?implementorCode=' + implementorCode + '',
              type: "GET",
               dataType: "json",
              success: function (data) {

                  $("#ImplementorName").val(data.implementorName);

                  if (data.selectList != null) {

                      option.push('<option value="">--Select Project Name--</option>');

                      data.selectList.forEach(d => {
                          option.push(`<option value='${d.Value}'>${d.Text}</option>`);
                      });

                      option = option.toString().replace(",", "").replace("[", "").replace("]", "");
                  }
                  $("#ProjectCode").html(option);

              }
          });
      });

        $("#ProjectCode").change(function () {
           var projectCode = $("#ProjectCode :selected").text();
            console.log({ a: projectCode.split('-')[0] });
            console.log({ a: projectCode.split('-')[1] });
       });

    </script>
}
