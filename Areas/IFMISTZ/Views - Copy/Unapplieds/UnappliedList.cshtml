@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.Unapplied>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">

        @*<div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
                <!-- Button trigger modal -->
                <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
            </div>*@
    </div>
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Pending Unapplieds</h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->

                        <div class="widget-body">
                            @*<a href="@Url.Action("CreateUnapplied","Unapplieds")" style="margin-left:9px" class="btn btn-info"><i class="fa fa-lg fa-fw fa-plus"></i>Add New </a>*@
                            <a href="@Url.Action("CreateBulkUnapplied","Unapplieds")" style="margin-left:9px" class="btn btn-info"><i class="fa fa-lg fa-fw fa-plus"></i>Add New </a>
                            <div>
                                @*<button type="button" class="btn btn-info btn-info" onclick="clearUnapplied()">
                <span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span>
                Clear
            </button>*@
                            </div>
                            <hr class="simple" />
                            <table id="dt_basic" class="table table-striped table-bordered table-hover table-condensed" width="100%">
                                <thead>
                                    <tr style="background-color: #f5f5f5; color:black">
                                        <th>#</th>
                                        <th> Beneficiary Code </th>
                                        <th> Beneficiary Name </th>
                                        <th> Beneficiary Account </th>
                                        <th> Bank Name </th>
                                        <th> Unapplied Date</th>
                                        <th>Description</th>
                                        <th>OverallStatus</th>
                                        <th>Amount</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int i = 0;
                                        decimal? totalAmount = 0;
                                        decimal? totalNetAmount = 0;

                                    }
                                    @foreach (var item in Model)
                                    {
                                        i++;
                                        totalAmount += item.GrossAmount;
                                        totalNetAmount += item.TrxAmount;
                                        <tr>
                                            <td>@i</td>
                                            @*<td>
                            @if (item.OverallStatus == "Pending")
                            {
                                <input type="checkbox" value="@item.UnappliedId" class="checkBox" />
                            }
                        </td>*@
                                            <td>
                                                @Html.DisplayFor(modelItem => item.VendorCode)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BenName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.NewBankAccount)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.NewBankName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.UnappliedAt)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.BankingStatusDesc)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OverallStatus)
                                            </td>
                                            <td style="text-align:right">
                                                @Html.DisplayFor(modelItem => item.TrxAmount)
                                            </td>
                                            <td style="text-align: center">
                                                <!-- Split button -->
                                                <div class="btn-group">
                                                    @*<button type="button" class="btn btn-info btn-xs">Action</button>*@
                                                    <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <span class="caret"></span>
                                                        <span class="sr-only">Toggle Dropdown</span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        @*<li><a href="@Url.Action("EditBankAccount","Payees",new { payeeDetailId = item.PayeeDetailId })">Edit Details</a></li>*@
                                                        @*<li><a href="@Url.Action("PayeeDetails","Payees",new { payeecode = item.VendorCode })">Payee Details</a></li>*@
                                                        <li><a href="@Url.Action("Details","Unapplieds",new { id = item.UnappliedId })">Old Unapplied Details</a></li>
                                                        <li><a href="#" onclick="confirmUnapplieds(@item.UnappliedId)">Confirm</a></li>
                                                        <li><a href="#" onclick="cancelUnapplieds(@item.UnappliedId)">Cancel</a></li>
                                                        @if (User.IsInRole("Withdraw Unapplied"))
                                                        {
                                                            <li><a href="#" onclick="withdrawUnapplied(@item.UnappliedId)">Withdraw</a></li>
                                                        }
                                                    </ul>
                                                </div>
                                            </td>

                                        </tr>
                                    }

                                </tbody>
                                <tfoot>
                                    <tr style="background:#f5f5f5; color:#000000">
                                        <td style="text-align: right" colspan="8"><b>Total Amount</b></td>
                                        <td style="text-align: right"><b>@string.Format("{0:#,0.00}", totalNetAmount)</b></td>
                                        @*<td style="text-align: right"><b>@string.Format("{0:#,0.00}", totalAmount)</b></td>*@

                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
<!--Start of delete confirmation modal section-->
<div class="modal fade" id="responseModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

                <h4 class="modal-title" id="lblmodal">Confirm Unapplied</h4>
            </div>
            <div class="modal-body">
                <p class="success-message">Are you sure you want to Confirm? </p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info confirm-confirm">Ok</button>
                <button class="btn btn-info confirm-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="withdrawModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal"></h4>
            </div>
            <div class="modal-body">
                <p class="success-message"></p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-info delete-confirm" onclick="saveWithdraw()">Ok</button>
                <button class="btn btn-info delete-cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $(document).ready(function () {

            /* // DOM Position key index //

            l - Length changing (dropdown)
            f - Filtering input (search)
            t - The Table! (datatable)
            i - Information (records)
            p - Pagination (paging)
            r - pRocessing
            < and > - div elements
            <"#id" and > - div with an id
            <"class" and > - div with a class
            <"#id.class" and > - div with an id and class

            Also see: http://legacy.datatables.net/usage/features
            */

            /* BASIC ;*/
            var responsiveHelper_dt_basic = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            $('#dt_basic').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_dt_basic) {
                        responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#dt_basic'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_dt_basic.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_dt_basic.respond();
                }
            });

            /* END BASIC */

            /* COLUMN FILTER  */
            var otable = $('#datatable_fixed_column').DataTable({
                //"bFilter": false,
                //"bInfo": false,
                //"bLengthChange": false
                //"bAutoWidth": false,
                //"bPaginate": false,
                //"bStateSave": true // saves sort state using localStorage
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_fixed_column) {
                        responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_fixed_column.respond();
                }

            });

            // custom toolbar
            $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });
            /* END COLUMN FILTER */

            /* COLUMN SHOW - HIDE */
            $('#datatable_col_reorder').dataTable({
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_col_reorder) {
                        responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_col_reorder.respond();
                }
            });

            /* END COLUMN SHOW - HIDE */

            /* TABLETOOLS */
            $('#datatable_tabletools').dataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "SmartAdmin_PDF",
                           "sPdfMessage": "SmartAdmin PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            /* END TABLETOOLS */

        });
        $(".cbCheckAll").click(function () {
            $(".checkBox").prop('checked',
                $(this).prop('checked'));
        });

        var confirmUnapplied = function () {

            var csvIds = [];

            $("input:checkbox.checkBox").each(function () {
                if ($(this).prop("checked")) {
                    csvIds.push($(this).val());
                }
            });

            if (csvIds.length == 0) {
                alert("No record selected!");
                return false;
            }

            $("#responseModal").modal('show');

            $(".confirm-confirm").click(function () {
                debugger
                if (csvIds.length > 0) {
                    var url = '@Url.Action("ConfirmUnapplied", "Unapplieds")';
                    $.ajax({
                        url: url,
                        data: { ids: csvIds },
                        type: "POST",
                        success: function (response) {
                                if (response == "Success") {
                                    //now re-using the boostrap modal popup to show success message.
                                    //dynamically we will change background colour
                                    if ($('.modal-header').hasClass('alert-info')) {
                                        $('.modal-header').removeClass('alert-info').addClass('alert-info');
                                        //hide ok button as it is not necessary
                                        $('.confirm-confirm').css('display', 'none');
                                        $('.confirm-cancel').html('Ok').click(function () {
                                            location.reload();
                                        });
                                    }
                                    $('.success-message').html('Confirmed successfully!');
                                } else {
                                    alert(response);
                                }
                        }, error: function (err) {
                            if (!$('.modal-header').hasClass('alert-info')) {
                                $('.modal-header').removeClass('alert-success').addClass('alert-info');
                                $('.confirm-confirm').css('display', 'none');
                            }
                            $('.success-message').html(err.statusText);
                        }
                    });
                }
            });
        };
        //function to reset bootstrap modal popups
        $("#responseModal").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass(' ').addClass('alert-info');
            $('.confirm-confirm').css('display', 'inline-block');
            $('.success-message').html('').html('Are you sure you want to Confirm this?');
        });

        var clearUnapplied = function () {

            var csvIds = [];

            $("input:checkbox.checkBox").each(function () {
                if ($(this).prop("checked")) {
                    csvIds.push($(this).val());
                }
            });

            if (csvIds.length == 0) {
                alert("No record selected!");
                return false;
            }

            $("#clearModal").modal('show');

            $(".confirm-confirm").click(function () {
                debugger
                if (csvIds.length > 0) {
                    var url = '@Url.Action("ClearUnapplied", "Unapplieds")';
                    $.ajax({
                        url: url,
                        data: { ids: csvIds },
                        type: "POST",
                        success: function (response) {
                            if (response == "Success") {
                                //now re-using the boostrap modal popup to show success message.
                                //dynamically we will change background colour
                                if ($('.modal-header').hasClass('alert-info')) {
                                    $('.modal-header').removeClass('alert-info').addClass('alert-info');
                                    //hide ok button as it is not necessary
                                    $('.confirm-confirm').css('display', 'none');
                                    $('.confirm-cancel').html('Ok').click(function () {
                                        location.reload();
                                    });
                                }
                                $('.success-message').html('Cleared successfully!');
                            } else {
                                alert(response);
                            }
                        }, error: function (err) {
                            if (!$('.modal-header').hasClass('alert-info')) {
                                $('.modal-header').removeClass('alert-success').addClass('alert-info');
                                $('.confirm-confirm').css('display', 'none');
                            }
                            $('.success-message').html(err.statusText);
                        }
                    });
                }
            });
        };
        //function to reset bootstrap modal popups
        $("#responseModal").on("hidden.bs.modal", function () {
            $(".modal-header").removeClass(' ').addClass('alert-info');
            $('.confirm-confirm').css('display', 'inline-block');
            $('.success-message').html('').html('Are you sure you want to Clear this?');
        });

        var confirmUnapplieds = function (id) {
            swal({
                text: "Are you sure you want to Confirm?",
                buttons: [
                  "Yes",
                  "No"
                ],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (!isConfirm) {
                    var url = '@Url.Action("ConfirmUnapplied", "Unapplieds")';
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: { id: id },
                        success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Confirmed successfully!",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                    location.reload();
                                });
                            }
                            else {
                                swal({
                                    text: response,
                                    icon: "error",
                                    button: "OK",
                                }).then(function () {
                                    location.reload();
                                });
                            }
                        },
                        error: function (response) {
                            swal({
                                text: response,
                                icon: "error",
                                button: "OK",
                            }).then(function () {
                                location.reload();
                            });
                        }
                    });
                }
            });
        }

        var cancelUnapplieds = function (id) {
            swal({
                text: "Are you sure you want to cancel?",
                buttons: [
                  "Yes",
                  "No"
                ],
                closeOnClickOutside: false,
            }).then(function (isConfirm) {
                if (!isConfirm) {
                    var url = '@Url.Action("CancelUnapplied", "Unapplieds")';
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: { id: id },
                        success: function (response) {
                            if (response == "Success") {
                                swal({
                                    text: "Cancelled successfully!",
                                    icon: "success",
                                    button: "OK",
                                }).then(function () {
                                    location.reload();
                                });
                            }
                            else {
                                swal({
                                    text: response,
                                    icon: "error",
                                    button: "OK",
                                }).then(function () {
                                    location.reload();
                                });
                            }
                        },
                        error: function (response) {
                            swal({
                                text: response,
                                icon: "error",
                                button: "OK",
                            }).then(function () {
                                location.reload();
                            });
                        }
                    });
                }
            });
        }

        var withdrawUnapplied = function (id) {

            var url = "WithdrawUnapplied/" + id;

            $(".modal-body").load(url, function () {
                $("#withdrawModal").modal("show");
            });
        };

        var saveWithdraw = function () {

            $.validator.unobtrusive.parse("#withdrawUnapplied");
            if (!$("#withdrawUnapplied").valid()) {
                return false;
            }
            var url = '@Url.Action("WithdrawUnapplied", "Unapplieds")';
            var model = $("#withdrawUnapplied").serialize();
            $.ajax({
                type: "POST",
                url: url,
                data: model,
                success: function (response) {
                    if (response == "Success") {
                        swal({
                            text: "saved successfully!",
                            icon: "success",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    }
                    else {
                        swal({
                            text: response,
                            icon: "error",
                            button: "OK",
                        }).then(function () {
                            location.reload();
                        });
                    }
                },
                error: function (response) {
                    swal({
                        text: response,
                        icon: "error",
                        button: "OK",
                    }).then(function () {
                        location.reload();
                    });
                }
            });
        };
    </script>
}


