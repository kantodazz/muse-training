@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.InventoryDetailVM>
@{
    ViewBag.Title = "Receive Inventories";
}



<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Distribute Inventories </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">

                            <div align="center">
                                <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>

                            <table class="table  table-bordered table-hover table-condensed" id="dt_inventories">

                                <thead>
                                    <tr>
                                        <th style="text-align:right;width:4%"></th>
                                        <th style="text-align:left">Sub Vote/Cost Center</th>
                                        <th style="text-align:left">Item Name</th>
                                        <th style="text-align:center">Quantity</th>
                                        <th style="text-align:left">UOM</th>
                                        <th style="text-align:right">Unit Price(Tsh)</th>
                                        <th style="text-align:right">Inventory Value(Tsh)</th>
                                        <th style="text-align:left">Condition</th>
                                        <th style="text-align:left">Date Issued</th>
                                        <th style="text-align:center">Allocated</th>
                                        <th style="text-align:center">Balance</th>
                                        <th style="text-align:center">Action</th>

                                    </tr>
                                </thead>

                                <tbody>
                                    @{var i = 1;}
                                    @foreach (var item in Model)
                                    {
                                    <tr>
                                        <td style="text-align:right">
                                            @i
                                        </td>
                                        <td style="text-align:left">
                                            @Html.DisplayFor(modelItem => item.SubVote):
                                            @Html.DisplayFor(modelItem => item.SubVoteName)
                                        </td>
                                        <td style="text-align:left">
                                            @Html.DisplayFor(modelItem => item.ItemName)
                                        </td>

                                        <td style="text-align:center">
                                            @Html.DisplayFor(modelItem => item.Quantity)
                                        </td>

                                        <td style="text-align:left">
                                            @Html.DisplayFor(modelItem => item.UOM)

                                        </td>

                                        <td style="text-align:right">
                                            @Html.DisplayFor(modelItem => item.UnitPrice)
                                        </td>
                                        <td style="text-align:right">
                                            @Html.DisplayFor(modelItem => item.InventoryValue)
                                        </td>
                                        <td style="text-align:left">
                                            @Html.DisplayFor(modelItem => item.Condition)
                                        </td>
                                        <td style="text-align:left">
                                            @Convert.ToDateTime(item.IssuingDate).ToString("dd/MM/yyyy")

                                        </td>
                                        <td style="text-align:center">
                                            @Html.DisplayFor(modelItem => item.Allocated)
                                        </td>
                                        <td style="text-align:center">
                                            @Html.DisplayFor(modelItem => item.Balance)
                                        </td>
                                        <td style="text-align:center">

                                            <div class="btn-group">
                                                <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" style="width:40px;border-radius:1px;" aria-haspopup="true" aria-expanded="false">
                                                    <span class="caret"></span>
                                                    <span class="sr-only">Toggle Dropdown</span>
                                                </button>
                                                <ul class="dropdown-menu">

                                                    <li><a href="#" onclick="distributInventory(@item.InventoryIssuingId,@item.Balance)" class="btn-xs edit"><i class="fa fa-edit"></i> Allocate</a></li>

                                                </ul>
                                            </div>
                                        </td>

                                    </tr>
                                        i++;
                                    }
                                </tbody>
                            </table>

                        </div>





                    </div>


                </div>
            </article>

        </div>
    </section>

</div>

<div class="modal fade" id="divModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog modal-lg" style="width:80%;">
        <div width="90%" class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">
                   Inventory Allocation
                </h4>
            </div>
            <div class="modal-body" id="divModalBody">

            </div>

            <div id="divPaymentStatusLoader" style="text-align:center; display:none">
                <img src="~/assets/img/avatars/ajax_loader.gif" />
            </div>
        </div>
    </div>

</div>
<div class="modal fade" id="distributeInventory">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 align="center">Inventory Distribution Form</h4>
            </div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id="allocate", enctype = "multipart/form-data"}))
            {
                @Html.AntiForgeryToken()

        <div class="modal-body form-horizontal">
            <input type="hidden" name="InventoryIssuingId" id="InventoryIssuingId" value="">
            <div class="form-group">
                @Html.Label("Quantity", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-7">
                    <input type="text" id="Quantity" name="Quantity" class="form-control" autocomplete="off">
                </div>

            </div>
            <div class="form-group">
                @Html.Label("Asset", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-7">
                    @Html.DropDownList("AssetDetailId", ViewBag.MotorVehicles as SelectList, "Select Motor Vehicle", new { @class = "form-control", @required = "required" })
                </div>

            </div>
        </div>
                <div class="modal-footer">
                    <button class="btn btn-default action-btn" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-info">
                        Save
                    </button>
                </div>

            }

        </div>
    </div>
</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">
        var dt_inventories = null;
        var balance = 0;
            $(document).ready(function () {
                /* // DOM Position key index //
l - Length changing (dropdown)
f - Filtering input (search)
t - The Table! (datatable)
i - Information (records)
p - Pagination (paging)
r - pRocessing
< and > - div elements
<"#id" and > - div with an id
<"class" and > - div with a class
<"#id.class" and > - div with an id and class
Also see: http://legacy.datatables.net/usage/features
*/
                /* BASIC ;*/
                var responsiveHelper_dt_inventories = undefined;
                var responsiveHelper_datatable_fixed_column = undefined;
                var responsiveHelper_datatable_col_reorder = undefined;
                var responsiveHelper_datatable_tabletools = undefined;

                var breakpointDefinition = {
                    tablet: 1024,
                    phone: 480
                };

              

                /* END BASIC */

                /* COLUMN FILTER  */
                var otable = $('#datatable_fixed_column').DataTable({
                    //"bFilter": false,
                    //"bInfo": false,
                    //"bLengthChange": false
                    //"bAutoWidth": false,
                    //"bPaginate": false,
                    //"bStateSave": true // saves sort state using localStorage
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_fixed_column) {
                            responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_fixed_column.respond();
                    }
                });

                // custom toolbar
                $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

                // Apply the filter
                $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {
                    otable
                        .column($(this).parent().index() + ':visible')
                        .search(this.value)
                        .draw();
                });
                /* END COLUMN FILTER */

                /* COLUMN SHOW - HIDE */
                $('#datatable_col_reorder').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_col_reorder) {
                            responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_col_reorder.respond();
                    }
                });

                /* END COLUMN SHOW - HIDE */

                /* TABLETOOLS */
                $('#datatable_tabletools').dataTable({

                    // Tabletools options:
                    //   https://datatables.net/extensions/tabletools/button_options
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "oTableTools": {
                        "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                           {
                               "sExtends": "pdf",
                               "sTitle": "SmartAdmin_PDF",
                               "sPdfMessage": "SmartAdmin PDF Export",
                               "sPdfSize": "letter"
                           },
                           {
                               "sExtends": "print",
                               "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                           }
                        ],
                        "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                    },
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_tabletools) {
                            responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_tabletools.respond();
                    }
                });
                /* END TABLETOOLS */

                        });

        //SHOW LOADER ICON
        $(document).ajaxStart(function () {
            $(".loadingImg").show();

        });
        //HIDE LOADER ICON
        $(document).ajaxStop(function () {
            $(".loadingImg").hide();
        });
        var distributInventory = function (id, balance_qty) {
            balance = balance_qty;
                  var url = '@Url.Action("DistributeInventory", "Inventories")';

                  $("#divModalBody").load(url, { id: id }, function (response, status, xhr) {
                    dt_inventories = $('#divModalBody #dt_inventories').dataTable();
                if (status == "error") {
                    $("#divModalBody").html("Error on lunching form,contact system supporter.");
                }
                $("#divModal").modal("show");
            });
        };
        var acceptInventory = function (id) {

                    swal({
                        title: 'Confirmation',
                        text: "Do you what to receive Inventory ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                          var url = '@Url.Action("ReceiveInventory", "Inventories")';
                            $.ajax(
                {
                    type: "POST",
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        if (response == "Success") {
                            swal("Accepted successfully", { icon: "success" })
                                      .then((value) => {
                                          location.reload();
                                      });
                        }
                        else {

                            swal("Failed to accept ,DbException");
                        }
                    },
                    error: function (xhr) {
                        swal(error);
                        $("#divLoader").hide();
                    },

                });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });
        };
        var distribute = function (id) {
                 $("#distributeInventory #InventoryIssuingId").val(id);
                   $("#distributeInventory #Quantity").attr({
                     "max": balance,
                     "min": 0
                          });
                    $('#distributeInventory').modal('show');

        };

            $("#allocate").on('submit', function (e) {
                e.preventDefault();
                var id = $("#distributeInventory #InventoryIssuingId").val();
                var quantity = $("#distributeInventory #Quantity").val();
                var assetId = $("#distributeInventory #AssetDetailId").val();
                   var formData = {
                       "InventoryIssuingId": id,
                       "Quantity": quantity,
                       "AssetDetailId": assetId
                }
                      var url = '@Url.Action("SaveAllocation", "Inventories")';
                    $.ajax(
                    {
                        type: "POST",
                        url: url,
                        data: formData,
                        success: function (result) {
                            if (result.response == "Success") {
                           $('#distributeInventory').modal('hide');
                                swal("Saved successfully", { icon: "success" })
                                    .then((value) => {
                                  $("#divModal #allocated").text(result.allocated);
                                  $("#divModal #balance").text(result.balance);
                                  balance = result.balance;
                                  data = result.distributions;
                                dt_inventories.fnClearTable();
                                for (var i = 0; i < data.length; i++) {
                                    var num = i + 1;
                                    dt_inventories.fnAddData([
                                 '<span style="float:right">' + num + '</span>',
                                     data[i]["AssetNo"],
                                    '<div align="center">' + data[i]["Quantity"] + '</div>',
                                     data[i]["UOM"],
                                     '<span style="float:right">' + toLabel(data[i]["UnitPrice"]) + '</span>',
                                     '<span style="float:right">' + toLabel(data[i]["TotalValue"]) + '</span>'
                                    ]);
                                }


                                  });
                            }
                            else if (result == "Exceed") {
                           swal("Not saved because distribution of inventory will exceed available quantity");
                            }
                            else {
                                swal("Failed to save.Please Contact Technical supporter");
                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            alert("An error has occured, contact system support");
                            $("#divLoader").hide();
                        },

                    });
     
            });
            $("#distributeInventory #Quantity").keyup(function () {
                var quantiry = parseFloat($(this).val());
                var balance = parseFloat($(this).attr('max'));
                if (quantiry > balance) {
                    swal("Quantiry can not exceed " + balance);
                    $(this).val("");
                }
            });
        //$("#divModal").on("hidden", function () {
        //    swal("Jesus Help me");
        //});
        $("#divModal").on("hidden.bs.modal", function () {
                 location.reload();
       });
    </script>
}









