@model IFMIS.Areas.IFMISTZ.Models.CreateUnappliedVM

@{
    ViewBag.Title = "Edit Unapplied";
}



<div id="content" style="margin: 5px; padding-top: 50px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>  Edit Unapplied </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">

                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitData(this)" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.UnappliedId)
                                <div class="form-horizontal">

                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PaymentDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.PaymentDesc, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                            @Html.ValidationMessageFor(model => model.PaymentDesc, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Beneficiary Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.BenName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.BenName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Beneficiary Account", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.BenAcct, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.BenAcct, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Bank Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.BankName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Bank Bic", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.BenBic, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.BenBic, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ControlNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.ControlNumber, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ControlNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.BankingStatusDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.BankingStatusDesc, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                            @Html.ValidationMessageFor(model => model.BankingStatusDesc, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TrxAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.TrxAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                            @Html.ValidationMessageFor(model => model.TrxAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" id="save_button" value="Save" class="btn btn-info" />
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-8 col-md-offset-1">
                                        @if (ViewBag.Status == "SalaryDeductions")
                                        {
                                            <a href="@Url.Action("PendingUnapplied","SalaryDeductionUnapplied")" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("PendingUnappliedAS","SalaryDeductionUnapplied")" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        }

                                    </div>
                                </div>
                            </div>


                        </div>





                    </div>


                </div>
            </article>

        </div>
    </section>

</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->
    <script type="text/javascript">
        function SubmitData(formData) {
            var beneficiaryName = $("#BenName").val();
            if (!beneficiaryName) {
                swal("Please enter beneficiary name !");
                return false;
            }
            var beneficiaryAccount = $("#BenAcct").val();
            if (!beneficiaryAccount) {
                swal("Please enter beneficiary account !");
                return false;
            }
            var bankName = $("#BankName").val();
            if (!bankName) {
                swal("Please enter bank name !");
                return false;
            }
            var benBic = $("#BenBic").val();
            if (!benBic) {
                swal("Please enter Bank Bic!");
                return false;
            }

            $("#save_button").prop('disabled', true);
            var url = '@Url.Action("SaveUnapplied", "SalaryDeductionUnapplied")';
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (result) {
                    $("#save_button").prop('disabled', false);
                    if (result == "Success") {
                        swal("Data saved  successfully", { icon: "Success" })
                            .then((value) => {
                                var url = null;
                                var type = '@(ViewBag.Status)';
                                if (type == "SalaryDeductions") {
                                      url = '@Url.Action("PendingUnapplied", "SalaryDeductionUnapplied")';
                                } else {
                                      url = '@Url.Action("PendingUnappliedAS", "SalaryDeductionUnapplied")';
                                }

                                      window.location.replace(url);
                                });

                    } else {
                        swal(result);
                    }
                }
            }
            $("#save_summary").prop('disabled', false);
            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
    }
    </script>
}



