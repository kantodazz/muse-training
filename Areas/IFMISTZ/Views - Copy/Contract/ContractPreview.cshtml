@model IFMIS.Areas.IFMISTZ.Models.ContractVM
@{
    ViewBag.Title = "Preview Contract";
    var i = 0;
    var k = 0;

}
<style>
    tr:not([data-level='2']) {
        cursor: pointer;
    }

    tr.expanded .sign:after {
        /*content: "-";*/
        content: url(/ifmis/Content/img/budget/Minus3.png);
    }

    tr.folded .sign:after {
        /*content: "+";*/
        content: url(/ifmis/Content/img/budget/Collapse2.png);
        /*background:url('../Media/Images/Collapse1.png');*/
        /*background: url('../Media/Images/details_open.png');*/
        cursor: pointer;
    }

    td:first-child {
        padding: inherit;
    }

    /*  */


    td {
        border-bottom: 1px solid #cecfd5;
        border-right: 1px solid #cecfd5;
        width: auto;
    }
</style>


<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Preview Contract</h2>

                    </header>


                    <div>
             
                            <p align="left">
                                Contract Reg # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.ContractNo</strong></span><br />
                                Contract Number &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.ContractNumber</strong></span><br />
                                Payee &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.Payeename</strong></span><br />
                                Payee Code &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.PayeeCode</strong></span><br />
                                Contract Name &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.ContractName</strong></span><br />
                                Contract Category &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Html.DisplayFor(model => model.ContractType)</strong></span><br />
                                Description&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.ContractDescription</strong></span><br />
                                Procurement Method &nbsp;&nbsp;:<span><strong>@Html.DisplayFor(model => model.ProcurementMethod)</strong></span><br />
                                @if (Model.Lotted)
                                {
                                    <span> Lot Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Model.LotNo</strong></span><br />
                                    <span> Lot Description&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Model.LotDescription</strong></span><br />
                                }
                                Sub Budget Class &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Html.DisplayFor(model => model.SubBudgetClass)</strong></span><br />
                                Currency &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Model.OperationalCurrency</strong></span><br />
                                Contract Start Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Convert.ToDateTime(Model.ContractStartDate).ToString("dd/MM/yyyy")</strong></span><br />
                                Contract End Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Convert.ToDateTime(Model.ContractEndDate).ToString("dd/MM/yyyy")</strong></span><br />
                                <span>Contract Amount &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.ContractAmount)</strong></span><br />
                                Overall Status &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span><strong>@Html.DisplayFor(model => model.OverallStatus)</strong></span><br />

                                @if (Model.ParentInstitutionCode != null)
                                {
                            <span>Parent Institution&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span>@Html.DisplayFor(model => model.ParentInstitutionCode)  @Html.DisplayFor(model => model.ParentInstitutionName)<br/>
                             <span>SubWarant&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span>@Html.DisplayFor(model => model.SubWarrantCode)  @Html.DisplayFor(model => model.SubWarrantDescription)
                                }
                                @if (Model.OverallStatus == "Rejected" || Model.OverallStatus == "Approved")
                                {
                                    if (Model.RejectionReason != null)
                                    {
                                    <span> Rejected By &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.Rejecter)</strong></span><br />
                                    <span>Rejection reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.RejectionReason)</strong></span><br />

                                    }
                                }
                                @if (Model.OverallStatus.ToUpper() == "VOIDED")
                                {


                                    <span>Rejection reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.RejectionReason)</strong></span><br />


                                }
                                @if (Model.OverallStatus.ToUpper() == "CONFIRMED")
                                {

                                    if (Model.RejectionSolution != null)
                                    {
                                        <span>Rejection reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.RejectionReason)</strong></span><br />
                                        <span>Solution Taken &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.RejectionSolution)</strong></span><br />
                                    }

                                }
                                @if (Model.OverallStatus.ToUpper() == "EXAMINED")
                                {
                                    if (Model.Rejecter == "Approver")
                                    {
                                        if (Model.RejectionSolution != null)
                                        {
                                            <span>Rejection reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.RejectionReason)</strong></span><br />
                                            <span>Solution Taken &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.RejectionSolution)</strong></span><br />
                                        }
                                    }
                                }
                                @if (Model.OverallStatus == "Partial" || Model.OverallStatus == "Closed")
                                {

                                    <span>Received Amount &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.ReceivedAmount)</strong></span><br />

                                }
                                @if (Model.OverallStatus == "Partial" || Model.OverallStatus == "Closed")
                                {
                                    decimal balance = (Decimal)(Model.ContractAmount - Model.ReceivedAmount);

                                    <span>Remaining Amount &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@balance.ToString("#,##0")</strong></span><br />

                                }
                                @if (Model.PerformanceBondFile != null)
                                {
                                    <span>Performance Quarantee :</span><span><strong><a href="@Url.Action("PerformanceQuarantee","Contract",new {Filename=Model.PerformanceBondFile})">Download</a>  </strong></span><br />
                                }
                            </p>
                            @if (Model.IncreasedBy != null)
                            {
                            <H3><u>Variation information</u></H3>
                            <p>
                                @if (Model.PreviousStartDate != null)
                                {
                                    <span> Previous Start Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Convert.ToDateTime(Model.PreviousStartDate).ToString("dd/MM/yyyy")</strong></span><br />

                                }
                                @if (Model.PreviousEndDate != null)
                                {
                                    <span> Previous End Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Convert.ToDateTime(Model.PreviousEndDate).ToString("dd/MM/yyyy")</strong></span><br />

                                }  <span> Previous Contract Amount :</span><span><strong>@Html.DisplayFor(model => model.PreviousAmount)</strong></span><br />
                                <span> Increased By &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.IncreasedBy)</strong></span><br />
                                <span> Variation Reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.VariationReason)</strong></span><br />
                                @if (Model.VariationFileName != null)
                                {
                                    <span>Variation Attachment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><a href="@Url.Action("VariationAttachment", "Contract", new { Filename = Model.VariationFileName })">Download</a><br />
                                }
                            </p>
                            }
                            else if (Model.ReducedBy != null)
                            {
                            <H3><u>Variation information</u></H3>
                            <p>
                                @if (Model.PreviousStartDate != null)
                                {
                                    <span> Previous Start Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Convert.ToDateTime(Model.PreviousStartDate).ToString("dd/MM/yyyy")</strong></span><br />

                                }
                                @if (Model.PreviousEndDate != null)
                                {
                                    <span> Previous End Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Convert.ToDateTime(Model.PreviousEndDate).ToString("dd/MM/yyyy")</strong></span><br />

                                }
                               <span> Previous Contract Amount :</span><span><strong>@Html.DisplayFor(model => model.PreviousAmount)</strong></span><br />
                                <span> Reduced By &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.ReducedBy)</strong></span><br />
                                <span> Variation Reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.VariationReason)</strong></span><br />
                                @if (Model.VariationFileName != null)
                                {
                                    <span>Variation Attachment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><a href="@Url.Action("VariationAttachment", "Contract", new { Filename = Model.VariationFileName })">Download</a><br />
                                }
                            </p>
                            }
                            else
                            {
                                if (Model.VariationFileName != null)
                                {
                                    <H3><u>Variation information</u></H3>

                                    if (Model.PreviousStartDate != null)
                                    {

                                            <span> Previous Start Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Convert.ToDateTime(Model.PreviousStartDate).ToString("dd/MM/yyyy")</strong></span><br />

                                }
                                if (Model.PreviousEndDate != null)
                                {
                                                <span> Previous End Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Convert.ToDateTime(Model.PreviousEndDate).ToString("dd/MM/yyyy")</strong></span><br />

                                }
                                            <span> Variation Reason &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><span><strong>@Html.DisplayFor(model => model.VariationReason)</strong></span><br />
                                if (Model.VariationFileName != null)
                                {
                                                <span>Variation Attachment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</span><a href="@Url.Action("VariationAttachment", "Contract", new { Filename = Model.VariationFileName })">Download</a><br />
                                    }

                                }
                            }

                            <br>

                            <div class="jarviswidget" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false">

                                <header>
                                    <h2><strong></strong> <i></i></h2>

                                    <ul id="widget-tab-1" class="nav nav-tabs pull-right">

                                        <li class="active">

                                            <a data-toggle="tab" href="#hr1"> <i class="fa fa-lg fa-arrow-circle-o-down"></i> <span class="hidden-mobile hidden-tablet"> Items List<span class="badge inbox-badge margin-right-13" style="background-color:#2196F3">@Model.ItemsList.Count()</span></span> </a>

                                        </li>

                                    

                                    </ul>

                                </header>

                                <!-- widget div-->
                                <div>

                                    <!-- widget edit box -->
                                    <div class="jarviswidget-editbox">
                                        <!-- This area used as dropdown edit box -->

                                    </div>
                                    <!-- end widget edit box -->
                                    <!-- widget content -->
                                    <div class="widget-body no-padding">

                                        <!-- widget body text-->

                                        <div class="tab-content padding-10">
                                            <div class="tab-pane fade in active" id="hr1">
                                                <div class="widget-body no-padding">

                                                    <br />
                                                    <br />
                                                    <br />
                                                    @if (Model.ContractDetails.Count() > 0)
                                                    {
                                                        <table align="center" class="table table-bordered table-hover table-condensed" style="width:97%">
                                                            <tr data-level='1' style="background:#f5f5f5; color:#000000">

                                                                <th style="text-align: center;width:3%">#</th>
                                                                <th colspan="10" style="text-align: left">Payment Schedule &nbsp;&nbsp;&nbsp;<span style="float:right;">Amount</span></th>

                                                            </tr>
                                                            <tbody>
                                                                @foreach (var group in Model.ContractDetails.GroupBy(a => a.PaymentScheduleId))
                                                                {
                                                                    i++;
                                                                    var j = 0;
                                                                    <tr data-level='1' style="background:#f5f5f5; color:#000000">
                                                                        <td align="center" style="width:3%">@i</td>
                                                                        <td colspan="10" style="text-align: left"><span class="sign"></span>&nbsp;&nbsp;&nbsp;@group.Where(a => a.PaymentScheduleId == group.Key).Select(a => a.PaymentSchedule.Description).FirstOrDefault() <strong><span style="float:right;">@Convert.ToDecimal(group.Where(a => a.PaymentScheduleId == group.Key).Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum()).ToString("#,##0/=")</span></strong></td>

                                                                    </tr>
                                                                    <tr data-level='2'>
                                                                        <th style="text-align: center" colspan="2"></th>
                                                                        <th style="text-align: left">Item </th>
                                                                        <th style="text-align:left">Category</th>
                                                                        <th style="text-align:left">Class</th>
                                                                        <th style="text-align: center">Quantity</th>
                                                                        <th style="text-align: left">UOM</th>
                                                                        <th style="text-align: right">Unit Price</th>
                                                                        <th style="text-align:right">VAT</th>
                                                                        <th style="text-align:right">Overhead</th>
                                                                        <th style="text-align: right">Total Amount</th>

                                                                    </tr>
                                                                    foreach (var item in group)
                                                                    {
                                                                        j++;
                                                                        string percentage = "NA";
                                                                        if (item.OverheadPercentage != null)
                                                                        {
                                                                            percentage = item.OverheadPercentage + "%";
                                                                        }
                                                            <tr data-level='2'>
                                                                <td></td>
                                                                <td style="text-align: center">@j</td>
                                                                <td>@Html.DisplayFor(modelItem => item.ItemDesc)</td>
                                                                <td style="text-align:left">
                                                                    @Html.DisplayFor(modelItem => item.ItemClassification.ItemCategory)
                                                                </td>
                                                                <td style="text-align:left">
                                                                    @Html.DisplayFor(modelItem => item.ItemClassification.ClassificationDesc)
                                                                </td>
                                                                <td style="text-align: center">@Html.DisplayFor(modelItem => item.Quantity)</td>
                                                                <td> @Html.DisplayFor(modelItem => item.UOM)</td>
                                                                <td style="text-align: right">@Html.DisplayFor(modelItem => item.UnitPrice) </td>
                                                                <td style="text-align: right">@Html.DisplayFor(modelItem => item.VAT)</td>
                                                                <td style="text-align: right">@percentage</td>
                                                                <td style="text-align: right">@Html.DisplayFor(modelItem => item.TotalAmount)</td>
                                                            </tr>

                                                                    }
                                                                }




                                                            </tbody>
                                                            <tr style="background:#f5f5f5; color:#000000" data-level='1'><td style="text-align: right" colspan="11"><strong>Total:&nbsp;&nbsp;&nbsp;</strong><strong>@Model.ItemsList.Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum().ToString("#,##0/=")</strong></td></tr>
                                                        </table>

                                                    }








                                                </div>

                                            </div>
                                         
                                        </div>

                                        <!-- end widget body text-->
                                        <!-- widget footer -->
                                        <div class="widget-footer text-right">

                                            <span class="onoffswitch-title">

                                            </span>


                                        </div>
                                        <!-- end widget footer -->

                                    </div>
                                    <!-- end widget content -->

                                </div>
                                <!-- end widget div -->

                            </div>

                            <div class="col-md-offset-1">
                          <a href="@Request.UrlReferrer" style="margin-right:5px" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                            </div>
                            <br />
                            <br />
                            <br />







                        </div>





                    </div>


               
            </article>

        </div>
    </section>

</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">

        $(document).ready(function () {



                //END GL ITEM CHARGE

                $("tbody > tr:not([data-level='1'])").hide();
                $("tbody > tr:not([data-level='2'])").addClass("expandable sign folded");
                $("tbody > tr")
                    .css("padding-left", function (index) {
                        return 10 * parseInt($(this).data("level"), 10) + "px";
                    });

                function range(lowEnd, highEnd) {
                    // assert lowEnd >= 0 and highEnd < 100
                    var validation = (lowEnd <= highEnd) && (lowEnd >= 0) && (highEnd < 10000);
                    if (!(validation)) {
                        console.assert(validation,
                                       'Function "range" received unlikely values: ' +
                                       lowEnd + ' and ' + highEnd + "...");
                    } else {
                        var arr = [];
                        while (lowEnd <= highEnd) {
                            arr.push(lowEnd++);
                        }
                        return arr;
                    }
                }

                function name_range(fun, lowEnd, highEnd) {
                    var arr = range(lowEnd, highEnd);
                    jQuery.each(arr, function (index, value) {
                        arr[index] = fun(value);
                    });
                    return arr;
                }

                function create_selector(level) {
                    return "[data-level='" + level + "']";
                }

                $("tr.expandable").click(function () {
                    var this_level = parseInt($(this).data("level"), 10);
                    var this_level_selector = create_selector(this_level);
                    var next_level_selector = create_selector(this_level + 1);
                    var next_or_lower = name_range(create_selector,
                    this_level + 1, 10); // TODO: find last level
                    var this_or_higher = name_range(create_selector, 0, this_level);
                    var node = $(this).nextUntil(this_or_higher.join(","));
                    // different behaviour according to state (expanded / folded):
                    if ($(this).hasClass("expanded")) {
                        $(node).filter(next_or_lower.join(",")).hide();
                        $(node).not("expanded").removeClass("expanded").addClass('folded');
                        $(this).removeClass("expanded").addClass('folded');


                    } else {
                        $(node).filter(next_level_selector).show();
                        $(this).addClass("expanded").removeClass('folded');


                    }
                });



            });


    </script>
}








