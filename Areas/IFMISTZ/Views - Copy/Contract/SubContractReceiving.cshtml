@model IFMIS.Areas.IFMISTZ.Models.ContractVM
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Contract Receiving</h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">
                            <div align="center">
                                <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Main Contract detail </legend>
                                <div class="row"> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Number&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractNumber)</div><div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Reg #&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractNo)</div></div>
                                <div class="row"> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Contract Name&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractName)</div> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Main Contract Amount&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractAmount) @Html.DisplayFor(model => model.Currency)</div></div>
                                <div class="row"> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Received Amount&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ReceivedAmount) @Html.DisplayFor(model => model.Currency)</div> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Balance&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.RemainingAmount) @Html.DisplayFor(model => model.Currency)</div></div>
                                <div class="row"> <div class="col-sm-12 col-md-12 col-lg-12"><strong>Description&nbsp;:</strong>&nbsp;@Html.DisplayFor(model => model.ContractDescription)</div></div>

                            </fieldset>
                            <fieldset class="scheduler-border">

                                <legend class="scheduler-border">Receiving  Form</legend>

                                @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitInventory(this)" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.HiddenFor(model => model.ContractId)
                            <div class="form-horizontal">
                                <div class="form-group">
                                    @Html.Label("Type", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownList("EntryType", new List<SelectListItem>{
                       new SelectListItem{ Text="Select...", Value = "" },
                       new SelectListItem{ Text="Main Contract", Value = "MainContract" },
                       new SelectListItem{ Text="Sub Contract", Value = "SubContract" },
                                    }, new { @class = "form-control" })
                                    </div>
                                    <div class="main_contract" style="display:none">
                                        @Html.Label("Payee", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">

                                            @Html.EditorFor(model => model.Payeename, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", autocomplete = "off" } })
                                        </div>
                                    </div>
                                    <div id="payee_temp_field">
                                        @Html.Label("Payee", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" readonly>
                                        </div>
                                    </div>
                                    <div class="sub_contract" style="display:none">
                                        @Html.Label("Sub Contract", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownList("SubContractId", Model.SubContractList, "Select ---", new { @class = "form-control", @required = "required" })

                                        </div>
                                    </div>
                                </div>
                                <div class="form-group sub_contract" style="display:none">
                                    @Html.LabelFor(model => model.SubContractPayee, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">

                                        @Html.EditorFor(model => model.SubContractPayee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", autocomplete = "off" } })
                                    </div>
                                    @Html.LabelFor(model => model.SubContractPayeeCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">

                                        @Html.EditorFor(model => model.SubContractPayeeCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", autocomplete = "off" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="main_contract">
                                        @Html.Label("Payment Schedule", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.DropDownList("PaymentScheduleId", Model.PaymentScheduleList, "Select ---", new { @class = "form-control", @required = "required" })
                                        </div>
                                    </div>
                                    <div class="sub_contract" style="display:none">
                                        @Html.Label("Payment Schedule", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            <select name="SubPaymentScheduleId" id="SubPaymentScheduleId" class="form-control"></select>
                                        </div>
                                    </div>
                                    @Html.LabelFor(model => model.CertificateNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">

                                        @Html.EditorFor(model => model.CertificateNumber, new { htmlAttributes = new { @class = "form-control", @placeholder = "Number", autocomplete = "off" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CertificateAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">

                                        @Html.EditorFor(model => model.CertificateAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Amount", autocomplete = "off" } })
                                    </div>
                                    @Html.LabelFor(model => model.AvailableAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">

                                        @Html.EditorFor(model => model.AvailableAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Amount", autocomplete = "off" } })
                                    </div>
                                </div>
                                <div class="form-group">                        
                                    @if (Model.AdvancePayment > 0)
                                    {
                                        @Html.LabelFor(model => model.AdvancePaymentDeduction, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">

                                            @Html.EditorFor(model => model.AdvancePaymentDeduction, new { htmlAttributes = new { @class = "form-control", @placeholder = "Amount", autocomplete = "off" } })
                                        </div>
                                    }

                                </div>
                                <div>
                                    <div class="col-md-offset-2">
                                        <a href="@Url.Action("PendingReceiving","Contract")" style="margin-right:5px" type="submit" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        <button type="button" id="save_button" class="btn btn-info" style="margin-right:2px">
                                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                        </button>

                                    </div>
                                </div>
                            </div>
                                }
                            </fieldset>
                            <fieldset class="scheduler-border" id="payment_schedule" style="display:none">
                                <legend class="scheduler-border">Payment schedule </legend>
                               <div class="row"> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Amount&nbsp;:</strong>&nbsp;<span id="amount"></span></div> <div class="col-sm-6 col-md-6 col-lg-6"><strong>Balance&nbsp;:</strong>&nbsp;<span id="balance"></span></div></div>
                                <div class="row"> <div class="col-sm-12 col-md-12 col-lg-12"><strong>Description&nbsp;:</strong>&nbsp;<span id="description"></span></div></div>

                            </fieldset>

                        </div>





                        </div>


                    </div>
                </article>

            </div>
        </section>

    </div>


    @section pagespecific {
        <!-- PAGE RELATED PLUGIN(S) -->

        <script type="text/javascript">
            var vouchersCharges = [];
            $(document).ready(function () {
 
            $(function () {
                $("#PaymentScheduleId").change(function (e) {
                    var id = $(this).val();
                     if (id > 0) {
                        var url = '@Url.Action("GetPaymentScheduleInfo", "Contract")';
                                        $.ajax(
                            {
                                type: "POST",
                                url: url,
                                data: { id: id },
                                success: function (result) {
                                    if (result.Response == "Success") {
                                        $("#payment_schedule").show();
                                        if (result.Amount!=null) {
                                        $('#amount').text(result.Amount.toLocaleString('en'));
                                        }
                                     if (result.Balance !=null) {
                                         $('#balance').text(result.Balance.toLocaleString('en'));
                                               $("#CertificateAmount").attr({
                                                    "max": result.Balance,
                                                    "min": 0
                                                });
                                         $("#CertificateAmount").val("");
                                         $("#AvailableAmount").val("");
                                        }
       
                                       $('#description').text(result.Description);
                                    }
                                    else {

                                        swal("DbException,contact technical supporter");
                                    }
                                },
                                error: function (xhr) {
                                    swal(error);
                                },

                            });
                       }
                });
            });

               $(function () {
                   $("#SubPaymentScheduleId").change(function (e) {
                       var id = $(this).val();
                              if (id > 0) {
                        var url = '@Url.Action("GetSubPaymentScheduleInfo", "Contract")';
                                        $.ajax(
                            {
                                type: "POST",
                                url: url,
                                data: { id: id },
                                success: function (result) {
                                    if (result.Response == "Success") {
                                        $("#payment_schedule").show();
                                    if (result.Amount!=null) {
                                        $('#amount').text(result.Amount.toLocaleString('en'));
                                        }
                                     if (result.Balance !=null) {
                                         $('#balance').text(result.Balance.toLocaleString('en'));
                                               $("#CertificateAmount").attr({
                                                    "max": result.Balance,
                                                    "min": 0
                                                });
                                         $("#CertificateAmount").val("");
                                         $("#AvailableAmount").val("");
                                        }
       
       
                                       $('#description').text(result.Description);
                                    }
                                    else {

                                        swal("DbException,contact technical supporter");
                                    }
                                },
                                error: function (xhr) {
                                    swal(error);
                                },

                            });
                       }
                });
                 });
                        });

        //SHOW LOADER ICON
        $(document).ajaxStart(function () {
            $(".loadingImg").show();

        });
        //HIDE LOADER ICON
        $(document).ajaxStop(function () {
            $(".loadingImg").hide();
        });
          $("#EntryType").change(function () {
              var entry = $(this).val();
              $("#payment_schedule").hide();
              if (entry == "MainContract") {
                  $(".main_contract").show();
                  $(".sub_contract").hide();
                  $("#payee_temp_field").hide();
                  //var id = $("#PaymentScheduleId").val();
                  //var id2 = $("#SubPaymentScheduleId").val();
                  //if (id > 0 || id2 > 0) {
                  //    $("#payment_schedule").show();
                  //}
            }
            else if (entry == "SubContract") {
                  $(".main_contract").hide();
                    $(".sub_contract").show();
                  $("#payee_temp_field").hide();
                  //  var id = $("#PaymentScheduleId").val();
                  //var id2 = $("#SubPaymentScheduleId").val();
                  //if (id > 0 || id2 > 0) {
                  //    $("#payment_schedule").show();
                  //}
            }
            else {
                  $(".main_contract").hide();
                  $(".sub_contract").hide();
                  $("#payee_temp_field").show();
            }
          });

         $("#SubContractId").change(function () {
             var id = $(this).val();
             $("#payment_schedule").hide();
             if (id > 0) {
                        var url = '@Url.Action("GetSubContract", "Contract")';
                                        $.ajax(
                            {
                                type: "POST",
                                url: url,
                                data: { id: id },
                                success: function (result) {
                                    if (result.Response == "Success") {
                                   $("#SubContractPayee").val(result.PayeeName);
                                   $("#SubContractPayeeCode").val(result.PayeeCode);
                              $('#SubPaymentScheduleId').empty();
                               $('<option value="">Select...</option>').appendTo('#SubPaymentScheduleId');
                               $.each(result.PaymentSchedules, function (i, d) {
                               $('<option value="' + d.SubContractPaymentScheduleId + '">' + d.Description + '</option>').appendTo('#SubPaymentScheduleId');
                                        });

                                    }
                                    else {

                                        swal("DbException,contact technical supporter");
                                    }
                                },
                                error: function (xhr) {
                                    swal(error);
                                },

                            });
             }
          });

            
            $("#save_button").on('click', function () {
                var entry = $("#EntryType").val();
        
                var certificate_amount = parseFloat($("#CertificateAmount").val().split(",").join(""));
                 if (!certificate_amount) {
                    swal("Enter Certificate Amount");
                    return false;
                }
                var certificate_number = $("#CertificateNumber").val();
                if (!certificate_number) {
                    swal("Enter Certificate Number");
                    return false;
                }
               var receiving_amount = parseFloat($("#AvailableAmount").val().split(",").join(""));
               if (!receiving_amount) {
                    swal("Enter Available Amount");
                    return false;
                }
                var advance_payment = null;
                if ($("#AdvancePaymentDeduction").val()) {
              advance_payment = parseFloat($("#AdvancePaymentDeduction").val().split(",").join(""));
                }
                var schedule_id = 0;                             
              if (entry == "MainContract") {                           
                  if ($("#PaymentScheduleId").val()) {
                          schedule_id = $("#PaymentScheduleId").val();    
                       }
                }
                else if (entry == "SubContract") {         
                  if ($("#SubPaymentScheduleId").val()) {
                       schedule_id = $("#SubPaymentScheduleId").val(); 
                     }
           
                }
                else {
                  swal("Please select Type,either Main Contract or Sub Contract");
                  return false;
                }
                if (schedule_id > 0) {
            
                   $(".save_button").prop('disabled', true);
                      var form_data = {
                        "PaymentScheduleId": schedule_id,
                        "EntryType": entry,
                        "CertificateNumber": certificate_number,
                        "CertificateAmount":certificate_amount,
                        "Amount": receiving_amount,
                        "AdvancePayment": advance_payment
                    }
                             var url = '@Url.Action("ReceiveByAmount", "Contract")';
                    $.ajax(
                    {
                        type: "POST",
                        url: url, // Controller/View
                        data: form_data,
                        success: function (result) {
                            if (result.response == "Success") {
                                    $(".save_button").prop('disabled', false);
                                swal("Items received successfully", { icon: "success" })
                                               .then((value) => {
                                                   var url = '@Url.Action("PendingReceiving", "Contract")';
                                                   window.location.replace(url);
                                               });
                            }
                            else if (result.response == "SetupProblem") {
                                    $(".save_button").prop('disabled', false);
                                  swal("Currency Rate Setup is Incomplete");
                            }
                            else if (result.response == "Exceed") {
                                    $(".save_button").prop('disabled', false);
                                      swal("Received Amount can not exceed amount in payment schedule");
                            }
                            else if (result.response == "AdvanceExceed") {
                                    $(".save_button").prop('disabled', false);
                                   swal("Received amount should be greater than Advance Payment!");
                                   $('#advance_payments2').empty();

                            }
                            else if (result.response == "LessAdvancePayment") {
                                    $(".save_button").prop('disabled', false);
                                swal("Please enter advance payment minimum amount is " + toLabel(result.amount));
                            }
                            else if (result.response == "ExeedAdvancePayment") {
                                    $(".save_button").prop('disabled', false);
                               swal("Please maximum Advance Payment is " + toLabel(result.amount));
                            }  
                            else {

                           $(".save_button").prop('disabled', false);
                          swal("Failed to receive,contact technical supporter");

                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            swal("An error has occured, contact system support");
                            $(".save_payment").prop('disabled', false);
                        },

                        });

                        }
                else {
                      swal("Please select Payment Schedule");
                  return false;
                }

            });
          $("#CertificateAmount").keyup(function () {
                var certificate_amount = parseFloat($(this).val().split(",").join(""));
                var balance = parseFloat($(this).attr('max'));
                if (certificate_amount > balance) {
                    swal("Certificate amount can not exceed " + balance.toLocaleString('en'));
                    $(this).val("");
                }
            });
            $("#AvailableAmount").keyup(function () {
                var receiving_amount = parseFloat($(this).val().split(",").join(""));
                var certificate_amount = parseFloat($("#CertificateAmount").val().split(",").join(""));
                if (receiving_amount > certificate_amount) {
                    swal("Available Amount can not exceed Certificate Amount");
                    $(this).val("");
                }
            });

        $("#CertificateAmount").autoNumeric('init');
        $("#AvailableAmount").autoNumeric('init');
        $("#AdvancePaymentDeduction").autoNumeric('init');
        </script>
    }
    
