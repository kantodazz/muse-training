@model IFMIS.Areas.IFMISTZ.Models.ContractVM
@{
    ViewBag.Title = "Create Contract";

    decimal balance = 0;
    decimal items_balance = 0;
    decimal total_vat = 0;
    decimal items_sum = 0;
    if (Model.PaymentSchedules != null)
    {
        balance = Convert.ToDecimal(Model.ContractAmount - Model.PaymentSchedules.Select(a => a.Amount).DefaultIfEmpty(0).Sum());
    }
    if (Model.ItemsList != null)
    {
        items_balance = Convert.ToDecimal(Model.ContractAmount - Model.ItemsList.Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum());
        items_sum = Model.ItemsList.Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum();
        total_vat = Convert.ToDecimal(Model.ItemsList.Select(a => a.VAT).DefaultIfEmpty(0).Sum());
    }
    var j = 0;
    var i = 0;
}
<style type="text/css">
    body {
        margin-top: 40px;
    }

    .stepwizard-step p {
        margin-top: 10px;
    }

    .stepwizard-row {
        display: table-row;
    }

    .stepwizard {
        display: table;
        width: 100%;
        position: relative;
    }

    .stepwizard-step button[disabled] {
        opacity: 1 !important;
        filter: alpha(opacity=100) !important;
    }

    .stepwizard-row:before {
        top: 14px;
        bottom: 0;
        position: absolute;
        content: " ";
        width: 100%;
        height: 1px;
        background-color: #ccc;
        z-order: 0;
    }

    .stepwizard-step {
        display: table-cell;
        text-align: center;
        position: relative;
    }

    .loadingImg {
        display: none;
    }

    .search-btn {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 5px;
        padding-right: 10px;
    }

    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }

    .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }

    .search-icon {
        padding: 0.5rem;
    }

    .search-button {
        background: #538AC5;
        border: 0;
        color: white;
        padding: 8px;
        border-radius: 0;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        width: 205px;
    }

    input[type=text] {
        padding: 5px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
</style>
<div id="content" style="margin: 5px; padding-top: 30px">
    <div class="row">


    </div>
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Contract </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px;width:100%">

                            <!----WIZARD HEADING -->

                            <div class="stepwizard">
                                <div class="stepwizard-row setup-panel">
                                    <div class="stepwizard-step">
                                        <a href="#step-1" type="button" class="btn btn-primary btn-circle">1</a>
                                        <p><strong>Basic Information </strong></p>
                                    </div>

                                    <div class="stepwizard-step">
                                        <a href="#step-2" type="button" class="btn btn-default btn-circle" disabled="disabled">2</a>
                                        <p><strong>Payment Schedules</strong></p>
                                    </div>
                                    <div class="stepwizard-step">
                                        <a href="#step-3" type="button" class="btn btn-default btn-circle" disabled="disabled">3</a>
                                        <p><strong>Items(s)</strong></p>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <br />

                            <!----WIZARD BODY -->
                            <!---- STEP 1 START HERE -->
                            <div class="row setup-content" id="step-1">
                                @using (Html.BeginForm("CreateContract", "Contract", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitSummary(this)" }))
                                {
                                    @Html.AntiForgeryToken()

                                    <div class="form-horizontal">

                                        <div class="col-xs-12">


                                            <div class="col-md-12">

                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                @Html.HiddenFor(model => model.VatPercentage)
                                                @Html.HiddenFor(model => model.ContractId)
                                                @Html.HiddenFor(model => model.Success)
                                                @Html.HiddenFor(model => model.PayeeDetailId)
                                                @Html.HiddenFor(model => model.Success)



                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ContractNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.EditorFor(model => model.ContractNumber, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off", @readonly = "readonly" } })
                                                        @Html.ValidationMessageFor(model => model.ContractNumber, "", new { @class = "text-danger" })
                                                    </div>
                                                    <label class="col-md-2 control-label"><span id="contracter">Supplier</span></label>
                                                    <div class="col-md-3">

                                                        <div class="input-group">

                                                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                            @Html.EditorFor(model => model.Payeename, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Search", autocomplete = "off", @readonly = "readonly" } })
                                                            @Html.ValidationMessageFor(model => model.Payeename, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.PayeeType, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.DropDownListFor(model => model.PayeeType, Model.PayeeTypesList, "Select ---", new { @class = "form-control", @required = "required" })
                                                        @Html.ValidationMessageFor(model => model.PayeeType, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.ContractType, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.DropDownListFor(model => model.ContractType, Model.ContractTypeList, "Select ---", new { @class = "form-control", @required = "required" })
                                                        @Html.ValidationMessageFor(model => model.ContractType, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ContractName, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.EditorFor(model => model.ContractName, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.ContractName, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.SubBudgetClass, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.DropDownList("SubBudgetClass", Model.SubBudgetClassList, "Select ---", new { @class = "form-control", @required = "required" })
                                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ProcurementMethod, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.DropDownListFor(model => model.ProcurementMethod, Model.ProcurementMethodList, "Select ---", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ProcurementMethod, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.ContractAmount, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">
                                                        <div class="input-group">

                                                            <span class="input-group-addon currencyDisp">@Html.DisplayFor(model => model.OperationalCurrency)</span>
                                                            @Html.EditorFor(model => model.ContractAmount, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.ContractAmount, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ContractDescription, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">

                                                        @Html.EditorFor(model => model.ContractDescription, new { htmlAttributes = new { @class = "form-control", @required = "required", rows = "4", @readonly = "readonly" } })

                                                        @Html.ValidationMessageFor(model => model.ContractDescription, "", new { @class = "text-danger" })
                                                    </div>

                                                    @Html.LabelFor(model => model.VariationReason, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.EditorFor(model => model.VariationReason, new { htmlAttributes = new { @class = "form-control", @required = "required", rows = "4", maxlength = 250 } })


                                                    </div>

                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ContractStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-1" style="padding-top:8px">
                                                        @Convert.ToDateTime(Model.ContractStartDate).ToString("dd/MM/yyyy")
                                                    </div>
                                                    <div class="col-md-2">

                                                        <div class="input-group">
                                                            <div class="flatpickr3 date-group">
                                                                <input type="text" placeholder="Select Date.."
                                                                       data-input
                                                                       class="form-control"
                                                                       style="width:140px;padding-left:10px;border:none"
                                                                       autocomplete="off" name="StartDate" id="StartDate">
                                                                <a class="input-button" title="open" data-toggle href="#">
                                                                    <span class="input-group-addon" style="height:32px"><i class="fa fa-calendar"></i></span>
                                                                </a>
                                                            </div>
                                                        </div>
                                                        @Html.ValidationMessageFor(model => model.ContractStartDate, "", new { @class = "text-danger" })


                                                    </div>


                                                    @Html.LabelFor(model => model.ContractEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-1" style="padding-top:8px">
                                                        @Convert.ToDateTime(Model.ContractEndDate).ToString("dd/MM/yyyy")
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="input-group">
                                                            <div class="flatpickr3 date-group">
                                                                <input type="text" placeholder="Select Date.."
                                                                       data-input
                                                                       class="form-control"
                                                                       style="width:140px;padding-left:10px;border:none"
                                                                       autocomplete="off" name="EndDate" id="EndDate">
                                                                <a class="input-button" title="open" data-toggle href="#">
                                                                    <span class="input-group-addon" style="height:32px"><i class="fa fa-calendar"></i></span>
                                                                </a>
                                                            </div>
                                                        </div>
                                                        @Html.ValidationMessageFor(model => model.ContractEndDate, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ProcurementMethod, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                    <div class="col-md-3">
                                                        @Html.DropDownListFor(model => model.ProcurementMethod, Model.ProcurementMethodList, "Select ---", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ProcurementMethod, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>
                                                <div class="form-group">

                                                    @Html.LabelFor(model => model.Lotted, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-1" style="padding-top:8px">

                                                        @Html.EditorFor(x => x.Lotted)
                                                    </div>
                                                    <div id="lot">
                                                        @Html.LabelFor(model => model.LotNo, htmlAttributes: new { @class = "control-label col-md-1" })
                                                        <div class="col-md-1">
                                                            @Html.EditorFor(model => model.LotNo, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                                                        </div>
                                                        @Html.LabelFor(model => model.LotDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.LotDescription, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", rows = "2" } })
                                                            @Html.ValidationMessageFor(model => model.LotDescription, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>




                                            </div>
                                            <div class="col-md-offset-2">

                                                @if (Model.VariationReason != null)
                                                {
                                                    <a href="@Url.Action("ContractVariation","Contract",new {status = "Pending"})" style="margin-right:5px" type="submit" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                                }
                                                else
                                                {
                                                    <a href="@Url.Action("ContractVariation","Contract")" style="margin-right:5px" type="submit" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                                }

                                                <button class="btn btn-info" id="save_summary" style="margin-right:2px">
                                                    <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                                </button>

                                                <button class="btn btn-info nextBtn" type="button">Next &nbsp;<span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></button>
                                            </div>
                                            <div align="center">
                                                <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" />
                                            </div>
                                            <br />


                                            <table class="table table-bordered table-hover table-condensed" id="lots_list"></table>


                                        </div>
                                    </div>
                                }
                            </div>


                            <!----STEP 2 START HERE -->
                            <div class="row setup-content" id="step-2">
                                <div class="col-xs-12">
                                    <div class="col-md-12">





                                        <form id="add_pay_schedule">
                                            <fieldset>
                                                <div class="form-horizontal">
                                                    <div class="form-group">

                                                        @Html.LabelFor(model => model.FinancialYear, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.DropDownListFor(model => model.FinancialYear, Model.FinancialYearsList, "Select ---", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.FinancialYear, "", new { @class = "text-danger" })


                                                        </div>
                                                        @Html.LabelFor(model => model.PaymentAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.PaymentAmount, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.PaymentAmount, "", new { @class = "text-danger" })


                                                        </div>
                                                    </div>
                                                    <div class="form-group">

                                                        @Html.LabelFor(model => model.PaymentDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.PaymentDescription, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", rows = "2", maxlength = 250 } })
                                                            @Html.ValidationMessageFor(model => model.PaymentDescription, "", new { @class = "text-danger" })
                                                        </div>
                                                        @Html.LabelFor(model => model.Deliverable, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.Deliverable, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", rows = "2", maxlength = 250 } })
                                                            @Html.ValidationMessageFor(model => model.Deliverable, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                </div>
                                            </fieldset>
                                        </form>



                                    </div>


                                    <div class="col-md-offset-2">
                                        <a href="#step-1" style="margin-right:5px" type="submit" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        <button type="button" id="submit_pay_schedule" class="btn btn-info" style="margin-right:2px">
                                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                        </button>
                                        <button type="button" class="btn btn-info cancel_lpo" style="margin-right:2px;display:none">
                                            <i class="glyphicon revicon-cancel"></i> Cancel
                                        </button>
                                        <button type="button" class="btn btn-info finish_lpo" style="margin-right:2px;display:none">
                                            <i class="glyphicon revicon-cancel"></i> Finish
                                        </button>
                                        <button class="btn btn-info nextBtn" type="button">Next &nbsp;<span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></button>
                                    </div>
                                    <div align="center">
                                        <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" />
                                    </div>
                                    <br />
                                    <br />
                                    @if (Model.PaymentSchedules != null)
                                    {
                                        <table align="center" class="table table-hover table-condensed" style="width:80%">
                                            <tr>
                                                <td>Currency &nbsp;&nbsp;&nbsp;@Html.DisplayFor(model => model.OperationalCurrency)</td>
                                                <td style="padding-top:8px;height:30px">Contract Amount &nbsp;&nbsp;&nbsp;@Html.DisplayFor(model => model.ContractAmount)</td>
                                                <td>Payment  &nbsp;&nbsp;&nbsp; <span id="payment_number">@Model.PaymentSchedules.Count()</span></td>
                                                <td>Balance &nbsp;&nbsp;&nbsp;<span id="payment_balance"> @balance.ToString("#,##0/=") </span></td>
                                                <td><a data-toggle="collapse" data-parent="#accordion" href="#collapse1"> View Details</a></td>
                                            </tr>
                                        </table>
                                    }
                                    @if (Model.PaymentSchedules != null)
                                    {
                                        <div id="collapse1" class="panel-collapse collapse">
                                            <table align="center" class="table table-bordered table-hover table-condensed" id="paymentSchedule" style="width:80%">

                                                <thead>
                                                    <tr>
                                                        <th style="text-align: center">#</th>

                                                        <th style="text-align: left">Payment Schedule </th>
                                                        <th style="text-align: left">Deliverable</th>
                                                        <th style="text-align: right">Amount</th>
                                                        <th style="text-align: left">Financial Year</th>
                                                        <th style="text-align: center">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in Model.PaymentSchedules)
                                                    {

                                                        i++;
                                                        <tr>
                                                            <td style="text-align: center">@i</td>
                                                            <td>@item.Description</td>
                                                            <td>@item.Deliverable</td>
                                                            <td style="text-align: right">@item.Amount.ToString("#,##0/=") </td>
                                                            <td>@item.FinancialYearDesc</td>
                                                            <td style="text-align: center"><div class="btn-group"><button type="button" class="btn  btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span><span class="sr-only">Toggle Dropdown</span></button> <ul class="dropdown-menu"> <li><a href="#" data-toggle="modal" data-target="#editPaymentModal" data-id='@item.PaymentScheduleId' data-fy='@item.FinancialYearDesc' data-desc='@item.Description' data-amount='@item.Amount' data-deliverable='@item.Deliverable' class="editPayment edit"><i class="fa fa-edit"></i> Edit</a></li><li><a href="#" data-toggle="modal" class="removePayment" data-id='@item.PaymentScheduleId' data-desc='@item.Description'><i class="fa fa-edit"></i> Cancel</a></li></div></td>

                                                        </tr>

                                                    }
                                                    <tr><td align="right" colspan="3">Grand Total</td><td align="right"><strong>@Model.PaymentSchedules.Select(a => a.Amount).DefaultIfEmpty(0).Sum().ToString("#,##0/=")</strong></td><td colspan="2"></td></tr>
                                                </tbody>
                                            </table>

                                        </div>
                                    }


                                </div>

                            </div>


                            <!----STEP 3 START HERE -->
                            <div class="row setup-content" id="step-3">
                                <div class="col-xs-12">

                                    <div class="col-md-12">
                                        <form id="add_item">
                                            <fieldset>
                                                <div class="form-horizontal">

                                                    <div class="form-group">

                                                        @Html.LabelFor(model => model.ItemCategory, htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.DropDownListFor(model => model.ItemCategory, Model.ItemCategoriesList, "Select ", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.ItemCategory, "", new { @class = "text-danger" })
                                                        </div>
                                                        @Html.Label("Quantity", htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-3">
                                                            <input type="text" name="Quantity" id="Quantity" value="" class="form-control" autocomplete="off">
                                                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        @Html.Label("Class", htmlAttributes: new { @class = "control-label   col-md-2" })
                                                        <div class="col-md-3">
                                                            <select name="ItemClassificationId" id="ItemClassificationId" class="form-control"></select>
                                                            @Html.ValidationMessageFor(model => model.ItemClassificationId, "", new { @class = "text-danger" })
                                                        </div>
                                                        @Html.Label("Unit Price", htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.ItemDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.ItemDesc, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", maxlength = 50 } })
                                                            @Html.ValidationMessageFor(model => model.ItemDesc, "", new { @class = "text-danger" })
                                                        </div>
                                                        @Html.Label("Overhead", htmlAttributes: new { @class = "control-label col-md-2" })

                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.OverheadPercentage, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @placeholder = "Percentage" } })
                                                            @Html.ValidationMessageFor(model => model.OverheadPercentage, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="form-group">

                                                        @Html.LabelFor(model => model.UOM, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            @Html.DropDownListFor(model => model.UOM, Model.UOMList, "Select ", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.UOM, "", new { @class = "text-danger" })
                                                        </div>
                                                        @Html.Label("Total Amount", htmlAttributes: new { @class = "control-label col-md-2" })

                                                        <div class="col-md-3">
                                                            @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                            @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>
                                                    <div class="form-group">

                                                        @Html.LabelFor(model => model.VatStatus, htmlAttributes: new { @class = "control-label col-md-2" })

                                                        <div class="col-md-3">

                                                            <input type="checkbox" name="VatStatus" value="Applicable" id="VatStatus">
                                                            <input id="VatApplicable" name="VatApplicable" style="width:40px;font-weight:bold" type="text" readonly value="NO">

                                                        </div>
                                                        @Html.LabelFor(model => model.PaymentScheduleId, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-3">
                                                            <select name="PaymentScheduleId" id="PaymentScheduleId" class="form-control"></select>
                                                            @Html.ValidationMessageFor(model => model.PaymentScheduleId, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>

                                                </div>
                                            </fieldset>
                                        </form>
                                    </div>


                                    <div class="col-md-offset-2">
                                        <a href="#step-1" style="margin-right:5px" type="submit" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>

                                        <button type="button" id="contract_item" class="btn btn-info" style="margin-right:2px">
                                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                        </button>
                                        <button type="button" class="btn btn-info cancel_lpo" style="margin-right:2px;display:none">
                                            <i class="glyphicon revicon-cancel"></i> Cancel
                                        </button>

                                        <button type="button" id="finish" class="btn btn-info" style="margin-right:2px">
                                            <i class="glyphicon glyphicon-floppy-disk"></i> Finish and Exit
                                        </button>
                                    </div>
                                    <div align="center">
                                        <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" />
                                    </div>
                                    <br />
                                    <div class="widget-body no-padding">

                                        <br />
                                        <div class="row">

                                            <div class="col-xs-4 col-sm-4 col-md-4 col-lg-3">

                                            </div>

                                            <div class="col-xs-3 col-sm-7 col-md-7 col-lg-7 text-right">
                                                <strong>
                                                    <span>Currency:@Html.DisplayFor(model => model.OperationalCurrency)</span>
                                                    &nbsp;&nbsp;
                                                    <span>Contract Amount:@Html.DisplayFor(model => model.ContractAmount)</span>
                                                    &nbsp;&nbsp;
                                                    <span>Balance:<span id="items_balance">@items_balance.ToString("#,##0/=")</span></span>
                                                    &nbsp;&nbsp;
                                                </strong>
                                            </div>

                                        </div>

                                        <table align="center" class="table table-bordered table-hover table-condensed" id="items" style="width:96%">
                                            @if (Model.ItemsList != null)
                                            {

                                                if (Model.ItemsList.Count > 0)
                                                {
                                                    <thead>
                                                        <tr>

                                                            <th style="text-align: center">#</th>
                                                            <th>Payment Schedule</th>
                                                            <th>Category</th>
                                                            <th style="text-align: left">Item </th>
                                                            <th style="text-align: center">Quantity</th>
                                                            <th style="text-align: left">UOM</th>
                                                            <th style="text-align: right">Unit Price</th>
                                                            <th style="text-align:right">VAT</th>
                                                            <th style="text-align:center">Overhead</th>
                                                            <th style="text-align: right">Total Amount</th>
                                                            <th style="text-align:center;width:12%">Action</th>

                                                        </tr>
                                                    </thead>
                                                }
                                            }
                                            <tbody>
                                                @if (Model.ItemsList != null)
                                                {
                                                    foreach (var item in Model.ItemsList)
                                                    {
                                                        j++;
                                                        string overhead = "";
                                                        if (item.OverheadPercentage > 0)
                                                        {
                                                            overhead = item.OverheadPercentage + "%";
                                                        }
                                                        <tr>
                                                            <td style="text-align: center">@j</td>
                                                            <td>@item.PaymentScheduleDesc</td>
                                                            <td>@item.ItemCategory</td>
                                                            <td>@item.ItemDesc</td>
                                                            <td style="text-align: center">@item.Quantity</td>
                                                            <td>@item.UOM</td>
                                                            <td style="text-align: right">@Convert.ToDecimal(item.UnitPrice).ToString("#,##0/=") </td>
                                                            <td style="text-align: right">@Convert.ToDecimal(item.VAT).ToString("#,##0/=")</td>
                                                            <td style="text-align: center">@overhead</td>
                                                            <td style="text-align: right">@item.TotalAmount.ToString("#,##0/=")</td>
                                                            <td style="text-align: center"><div class="btn-group"><button type="button" class="btn  btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span><span class="sr-only">Toggle Dropdown</span></button> <ul class="dropdown-menu"> <li><a href="#" data-toggle="modal" data-target="#editItemModal" data-id='@item.ContractDetailId' data-category='@item.ItemCategory' data-classid='@item.ItemClassificationId' data-quantity='@item.Quantity' data-item='@item.ItemDesc' data-unitprice='@item.UnitPrice' data-uom='@item.UOM' data-overhead='@item.OverheadPercentage' data-vat='@item.VatStatus' data-totalamount='@item.TotalAmount' data-pscheduleid='@item.PaymentScheduleId' class="editItemModal edit"><i class="fa fa-edit"></i> Edit</a></li><li><a href="#" data-toggle="modal" class="removeItems" data-id='@item.ContractDetailId' data-itemdesc='@item.ItemDesc'><i class="fa fa-edit"></i> Cancel</a></li></ul></div></td>
                                                        </tr>

                                                    }
                                                }
                                                @if (Model.ItemsList != null)
                                                {
                                                    if (Model.ItemsList.Count > 0)
                                                    {

                                                        <tr><td align="right" colspan="7">Grand Total</td><td align="right"><strong>@total_vat.ToString("#,##0/=")</strong></td><td></td><td align="right"><strong>@items_sum.ToString("#,##0/=")</strong></td><td></td></tr>
                                                    }
                                                }
                                            </tbody>
                                        </table>


                                    </div>




                                </div>

                            </div>

                            @*</div>*@






                        </div>


                    </div>


                </div>
            </article>

        </div>
    </section>

</div>
<!----------- Edit Payment Schedule ----------------->
<div class="modal fade" id="editPaymentModal" style="left:4%">

    <div class="modal-dialog" style="width:70%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Edit Payment Schedule</h3>

            </div>

            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "EditPaySchedule" }))
            {
                <div class="modal-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.HiddenFor(model => model.PaymentScheduleId)
                            @Html.LabelFor(model => model.FinancialYear, htmlAttributes: new { @class = "control-label   col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.FinancialYear, Model.FinancialYearsList, "Select ---", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FinancialYear, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.PaymentAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.PaymentAmount, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.PaymentAmount, "", new { @class = "text-danger" })


                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.PaymentDescription, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", rows = "2" } })
                                @Html.ValidationMessageFor(model => model.PaymentDescription, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Deliverable, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.Deliverable, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", rows = "2" } })
                                @Html.ValidationMessageFor(model => model.Deliverable, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-info" id="update_pay_schedule">
                        <i class="fa fa-save"></i>Save
                    </button>
                    <button class="btn btn-info" data-dismiss="modal">
                        <i class="fa  fa-times"></i>Cancel
                    </button>
                </div>
            }
        </div>
    </div>
</div>
<!----------- Edit Item ----------------->
<div class="modal fade" id="editItemModal" style="left:4%">

    <div class="modal-dialog" style="width:70%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Edit Item</h3>

            </div>

            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "EditItem" }))
            {
                <div class="modal-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.HiddenFor(model => model.ContractDetailId)
                            @Html.HiddenFor(model => model.PaymentScheduleId)
                            @Html.LabelFor(model => model.ItemCategory, htmlAttributes: new { @class = "control-label   col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.ItemCategory, Model.ItemCategoriesList, "Select ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ItemCategory, "", new { @class = "text-danger" })
                            </div>
                            @Html.Label("Quantity", htmlAttributes: new { @class = "control-label   col-md-2" })
                            <div class="col-md-3">
                                <input type="text" name="Quantity" id="Quantity" value="" class="form-control">
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger", @autocomplete = "off" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Class", htmlAttributes: new { @class = "control-label   col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownList("ItemClassificationId", Model.ItemClassificationsList, "Select ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ItemClassificationId, "", new { @class = "text-danger" })
                            </div>
                            @Html.Label("Unit Price", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ItemDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.ItemDesc, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ItemDesc, "", new { @class = "text-danger" })
                            </div>
                            @Html.Label("Overhead", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.OverheadPercentage, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OverheadPercentage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.UOM, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.UOM, Model.UOMList, "Select ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UOM, "", new { @class = "text-danger" })
                            </div>
                            @Html.Label("Total Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.VatStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">

                                <input type="checkbox" name="VatStatus" value="Applicable" id="VatStatus">
                                <input id="VatApplicable" name="VatApplicable" style="width:40px;font-weight:bold" type="text" readonly value="NO">

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-info" id="btn_save_edit_item">
                        <i class="fa fa-save"></i>Save
                    </button>
                    <button class="btn btn-info" data-dismiss="modal">
                        <i class="fa  fa-times"></i>Cancel
                    </button>
                </div>
            }
        </div>
    </div>
</div>
<!----------- Search Payee ----------------->
<div class="modal fade" id="payeeModal" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Payee</h3>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container submit-btn" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." id="searchbox">
                        </div>
                    </div>
                </div>
                <table class="table" id="dt_search_payee">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>PaymentId</th>
                            <th>BIC</th>
                            <th>Payee Name</th>
                            <th>Payee Code</th>
                            <th>Bank Name</th>
                            <th>Bank Account No</th>
                            <th>Payee Type</th>
                            <th>Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>
<!----------- Search Payee ----------------->
<!----------- Search Retention Payee ----------------->
<div class="modal fade" id="payeeModalRetention" style="left:4%">

    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Payee</h3>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container submit-btn" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." id="searchbox2">
                        </div>
                    </div>
                </div>
                <table class="table" id="dt_search_payee2">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>PaymentId</th>
                            <th>BIC</th>
                            <th>Payee Name</th>
                            <th>Payee Code</th>
                            <th>Bank Name</th>
                            <th>Bank Account No</th>
                            <th>Payee Type</th>
                            <th>Address</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>



<!----------- Search Items ----------------->
<div class="modal fade" id="itemsModal" style="left:4%">

    <div class="modal-dialog" style="width:60%;">
        <div class="modal-content panel-info">


            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title"> Search Item</h3>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                        <div class="search-container submit-btn" style="float:right">
                            <i class="fa fa-search search-icon"></i>
                            <input type="search" name="search" placeholder="Search..." id="searchItem">
                        </div>
                    </div>
                </div>
                <table class="table" id="dt_search_item">
                    <thead>
                        <tr>
                            <th style="width:5%">#</th>
                            <th>Item Name</th>
                            <th style="width:15%">Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button class="btn btn-info" data-dismiss="modal">
                    <i class="fa  fa-times"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">
            function SubmitSummary(formData) {
            var url = '@Url.Action("SaveVariation", "Contract")';
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (response) {
                    if (response.Response == "Success") {
                        swal("Saved  successfully!", { icon: "success" })
                                  .then((value) => {
                                     window.location.reload();
                                  });


                    }
                    else if (response.Response == "NoReduction") {
                        swal("Amount can not be reduced because this contract arleady full received");

                    }
                    else if (response.Response == "NoReduct") {
                        swal("Not saved,minimum amount can be reduced is " + response.Value.toLocaleString('en'));

                    }
                    else {

                        swal("Variation Failed due to DbException");
                    }
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }
                           function PaymentScheduleTable(arrayData) {
                                $('#paymentSchedule').empty();
                                $("#PaymentAmount").val("");
                                $("#PaymentDescription").val("");
                                $("#Deliverable").val("");

                                var number = arrayData.length;
                                $("#payment_number").text(number);
                                if (number > 0) {

                                    $('<thead><tr><th style="text-align: center">#</th><th style="text-align: left">Payment Schedule </th><th style="text-align: left">Deliverable</th><th style="text-align: right">Amount</th><th style="text-align: left">Financial Year</th><th style="text-align:center">Action</th></tr></thead>').appendTo('#paymentSchedule');

                                }
                                var j = 0;
                                var sum = 0;
                                var vat_sum = 0;
                                $('#add_item #PaymentScheduleId').empty();
                                $('<option value="">Select...</option>').appendTo('#add_item #PaymentScheduleId');
                                $('<tbody>').appendTo('#paymentSchedule');
                                $.each(arrayData, function (i, d) {
                                    sum = sum + parseFloat(d.Amount);
                                    j++;
                                    if(d.Balance>0){
                                        $('<option value="' + d.PaymentScheduleId + '">' + d.Description + '-Balance:' + d.Balance.toLocaleString('en') + '</option>').appendTo('#add_item #PaymentScheduleId');
                                    }
                                    if (d.Deliverable) {
                                        $('<tr><td align="center">' + j + '</th><td>' + d.Description + '</td><td align="left">' + d.Deliverable + '</td><td align="right">' + d.Amount.toLocaleString('en') + '</td><td align="left">' + d.FinancialYearDesc + '</td><td style="text-align: center"><div class="btn-group"><button type="button" class="btn  btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span><span class="sr-only">Toggle Dropdown</span></button> <ul class="dropdown-menu"> <li><a href="#" data-toggle="modal" data-target="#editPaymentModal" data-id="' + d.PaymentScheduleId + '" data-fy="' + d.FinancialYearDesc + '" data-desc="' + d.Description + '" data-amount="' + d.Amount + '" data-deliverable="' + d.Deliverable + '"  class="editPayment edit"><i class="fa fa-edit"></i> Edit</a></li><li><a href="#" data-toggle="modal" class="removePayment" data-id="' + d.PaymentScheduleId + '" data-desc="' + d.Description + '" ><i class="fa fa-edit"></i> Cancel</a></li></div></td></tr>').appendTo('#paymentSchedule');
                                    } else {
                                        $('<tr><td align="center">' + j + '</th><td>' + d.Description + '</td><td align="left"></td><td align="right">' + d.Amount.toLocaleString('en') + '</td><td align="left">' + d.FinancialYearDesc + '</td><td style="text-align: center"><div class="btn-group"><button type="button" class="btn  btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span><span class="sr-only">Toggle Dropdown</span></button> <ul class="dropdown-menu"> <li><a href="#" data-toggle="modal" data-target="#editPaymentModal" data-id="' + d.PaymentScheduleId + '" data-fy="' + d.FinancialYearDesc + '" data-desc="' + d.Description + '" data-amount="' + d.Amount + '" data-deliverable="' + d.Deliverable + '"  class="editPayment edit"><i class="fa fa-edit"></i> Edit</a></li><li><a href="#" data-toggle="modal" class="removePayment" data-id="' + d.PaymentScheduleId + '" data-desc="' + d.Description + '" ><i class="fa fa-edit"></i> Cancel</a></li></div></td></tr>').appendTo('#paymentSchedule');
                                    }


                                });
                                if (number > 0) {
                                    $('<tr><td align="right" colspan="3">Grand Total</td><td align="right"><strong>' + sum.toLocaleString('en') + '</strong></td><td colspan="2"></td></tr>').appendTo('#paymentSchedule');
                                }

                                var contract_amount = parseFloat($("#ContractAmount").val().split(",").join(""));
                                var payment_balance = contract_amount - sum;
                                $('#payment_balance').text(payment_balance.toLocaleString('en'));

                                $('</tbody>').appendTo('#paymentSchedule');

                           }
                              function UpdateItemsTable(arrayData) {
                                 $('#ItemDesc').val("");
                                 $('#Quantity').val("");
                                 $('#UnitPrice').val("");
                                 $('#ItemsValue').val("");
                                 $("#VatStatus").prop('checked', false);
                                 $("#VatApplicable").val("NO");
                                 $('#OverheadPercentage').val("");
                                 $('#TotalAmount').val("");
                                 $('#items').empty();
                                 var number = arrayData.length;
                                 if (number > 0) {
                                 $('<thead><tr><th style="text-align: center">#</th><th>Payment Schedule</th><th>Category</th><th style="text-align: left">Item </th><th style="text-align: center">Quantity</th><th style="text-align: left">UOM</th><th style="text-align: right">Unit Price</th><th style="text-align:right">VAT</th><th style="text-align:center">Overhead</th><th style="text-align: right">Total Amount</th><th  style="text-align:center;width:15%">Action</th></tr></thead>').appendTo('#items');
                                      }
                                 var j = 0;
                                 var sum = 0;
                                 var vat_sum = 0;
                                 $('<tbody>').appendTo('#items');
                                 $.each(arrayData, function (i, d) {
                                 sum = sum + parseFloat(d.TotalAmount);
                                 vat_sum = vat_sum + parseFloat(d.VAT);
                                     j++;
                                     var overhead = "";
                                     if (d.OverheadPercentage > 0) {
                                         overhead = d.OverheadPercentage + "%";
                                     }
                                  $('<tr><td align="center">' + j + '</td><td>' + d.PaymentScheduleDesc + '</td><td>' + d.ItemCategory + '</td><td>' + d.ItemDesc + '</td><td align="center">' + d.Quantity + '</td><td align="left">' + d.UOM + '</td><td align="right">' + d.UnitPrice.toLocaleString('en') + '</td><td align="right">' + d.VAT.toLocaleString('en') + '</td><td align="center">' + overhead + '</td><td align="right">' + d.TotalAmount.toLocaleString('en') + '</td><td style="text-align: center"><div class="btn-group"><button type="button" class="btn  btn-info btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span><span class="sr-only">Toggle Dropdown</span></button> <ul class="dropdown-menu"> <li><a href="#" data-toggle="modal" data-target="#editItemModal" data-id="' + d.ContractDetailId + '" data-category="' + d.ItemCategory + '" data-classid="' + d.ItemClassificationId + '" data-quantity="' + d.Quantity + '" data-item="' + d.ItemDesc + '" data-unitprice="' + d.UnitPrice + '" data-uom="' + d.UOM + '" data-totalamount="' + d.TotalAmount + '" data-pscheduleid="' + d.PaymentScheduleId + '"  data-overhead="' + d.OverheadPercentage + '" data-vat="' + d.VatStatus + '" class="editItemModal edit"><i class="fa fa-edit"></i> Edit</a></li><li><a href="#" data-toggle="modal" class="removeItems" data-id="' + d.ContractDetailId + '" data-itemdesc="' + d.ItemDesc + '" ><i class="fa fa-edit"></i> Cancel</a></li></div></td></tr>').appendTo('#items');

                                  });
                                  if (number > 0) {
                                 $('<tr><td align="right" colspan="7">Grand Total</td><td align="right"><strong>' + vat_sum.toLocaleString('en') + '</strong></td><td></td><td align="right"><strong>' + sum.toLocaleString('en') + '</strong></td><td></td></tr>').appendTo('#items');
                               }
                                var contract_amount = parseFloat($("#ContractAmount").val().split(",").join(""));
                               var balance = contract_amount - sum;
                                   $("#items_number").text(number);
                                   $("#items_balance").text(balance.toLocaleString('en'));
                                    $('</tbody>').appendTo('#items');
                                              }
                           function PaymentScheduleList(arrayData) {
                               $('#add_item #PaymentScheduleId').empty();
                               $('<option value="">Select...</option>').appendTo('#add_item #PaymentScheduleId');
                               $.each(arrayData, function (i, d) {
                               $('<option value="' + d.PaymentScheduleId + '">' + d.Description + '-Balance:' + d.Balance.toLocaleString('en') + '</option>').appendTo('#add_item #PaymentScheduleId');
                                        });
                           }
                        $("#dt_search_payee_wrapper .dt-toolbar").remove();
                        function SearchPayee() {
                            $('#payeeModal').modal('show');
                        }


                        // ============= SHOW PAYEE===============
                        var dt_selected_payee = $('#dt_selected_payee').dataTable({
                            "data": [],
                            "columnDefs": [{
                                "targets": [0, 1],
                                "visible": false
                            }],
                            "columns": [
                                { title: "Payee DetailId" },
                                { title: "Payee BIC" },
                                { title: "Payee Name" },
                                { title: "Payee Code" },
                                { title: "Bank Name" },
                                { title: "Payee Type" },
                                { title: "Bank Account No" },
                                { title: "Address" }
                            ]
                        });


                        // ============= SEARCH PAYEEE ===========

                        Date.prototype.toDateInputValue = (function () {
                            var local = new Date(this);
                            local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
                            return local.toJSON().slice(0, 10);
                        });

                        $(function () {
                            $('#ApplyDate').val(new Date().toDateInputValue());
                            $('#InvoiceDate').val(new Date().toDateInputValue());
                        })

                        var dt_search_payee = $('#dt_search_payee').dataTable({
                            "aoColumnDefs": [{ "bVisible": false, "aTargets": [1, 2] }],
                        });

                        $("#searchbox").on("keyup search input paste cut", function () {
                            if (!this.value) {
                                dt_search_payee.fnClearTable();
                            } else {
                                searchPayeeTableUpdate(this.value);
                            }
                        });


                        function searchPayeeTableUpdate(search) {
                            var url = '@Url.Action("GetPayee", "PaymentVoucher")';
                            $.ajax({
                                type: "get",
                                url: url + "/?search=" + search + "",
                                contenttype: "application/json; charset=utf-8",
                                datatype: "json",
                                success: function (response) {
                                    data = response.data;
                                    dt_search_payee.fnClearTable();
                                    for (var i = 0; i < data.length; i++) {
                                        dt_search_payee.fnAddData([i+1,
                                           data[i]["PayeeDetailId"],
                                           data[i]["BIC"],
                                           data[i]["AccountName"],
                                           data[i]["PayeeCode"],
                                           data[i]["PayeeName"],
                                           data[i]["Accountnumber"],
                                           data[i]["PayeeType"],
                                           data[i]["Address1"],
                                           '<a href="#" onclick="payeeClicked(' + i + ')"><i class="glyphicon glyphicon-plus-sign"></i></a>'
                                        ]);
                                    }
                                },
                                failure: function (error) {
                                    swal(error);
                                }
                            });
                        }

                        function payeeClicked(rowId) {
                            var data = dt_search_payee.DataTable().rows().data();
                            var row = data[rowId];
                            $("#PayeeDetailId").val(row[1]);
                            $("#Payeename").val(row[3]);
                            $("#payeeModal").modal("hide");
                        }


                        // =========== END SEARCH PAYEE ====================
                           function get_items(query, item_id) {
                                var item_id = parseInt(item_id);
                                var form_data = {
                                    "id": item_id,
                                    "Prefix": query
                                }
                                var url = '@Url.Action("SearchItems", "Procurement")';
                                $.ajax({
                                    type: "POST",
                                    url: url,
                                    data: form_data,
                                    success: function (data) {
                                        if (data.response == "Success") {
                                            var items_array = [];
                                           $.each(data.Items, function (i, d) {
                                               items_array.push(d.ItemDescription);
                                            });


                                           $('#ItemDesc').autocomplete({
                                               source: items_array
                                               });
                                        }
                                        else {

                                        }

                                    }
                                });
                            }
                        // DO NOT REMOVE : GLOBAL FUNCTIONS!
                        /* BASIC ;*/
                        var responsiveHelper_dt_basic = undefined;
                        var responsiveHelper_dt_glItem = undefined;
                        var breakpointDefinition = {
                            tablet: 1024,
                            phone: 480
                        };



                        $(document).ready(function () {
                            $("#dt_search_payee_wrapper .dt-toolbar").remove();
                            var contract_amount = $("#ContractAmount").val();
                            if (contract_amount) {
                                $("#ContractAmount").val(inputThousandSeparator(contract_amount))
                            }
                            if ($("#Lotted").is(":checked")) {
                                $("#lot").show();

                            } else {
                                $("#lot").hide();
                            }

                            var contract_type = $("#ContractType").val();
                            if (contract_type) {
                            if (contract_type == "Goods") {
                                $("#contracter").text("Supplier")
                            }
                            if (contract_type == "Services & Goods") {
                                $("#contracter").text("Supplier")
                            } else if (contract_type == "Works") {
                                $("#contracter").text("Contractor")
                            } else if (contract_type == "Consultancy") {
                                $("#contracter").text("Consultant")
                            }
                            else if (contract_type == "Non Consuntancy") {
                                $("#contracter").text("Service Provider")
                            }
                            }
                            $("#ContractType").change(function (e) {
                                var contract_type = $("#ContractType").val();

                                if (contract_type=="Goods") {
                                    $("#contracter").text("Supplier")
                                } else if (contract_type == "Works") {
                                    $("#contracter").text("Contractor")
                                }
                                if (contract_type == "Services & Goods") {
                                    $("#contracter").text("Supplier")
                                } else if (contract_type == "Consultancy") {
                                    $("#contracter").text("Consultant")
                                }
                                else if (contract_type == "Non Consuntancy") {
                                    $("#contracter").text("Service Provider")
                                }
                            });

                            $("#Lotted").change(function (e) {

                                if ($(this).is(":checked")) {
                                    $("#lot").show();

                                } else {
                                    $("#lot").hide();
                                    $("#LotNo").val("");
                                    $("#LotDescription").val("");
                                }
                            });


                            //MANAGE DATE SELECTED
                            $(function () {
                                $("#ContractEndDate").change(function () {
                                    var end_date = $(this).val();
                                    var start_date = $("#ContractStartDate").val();
                                    if (start_date) {
                                        if (end_date) {
                                            if (start_date > end_date) {
                                                swal("Please select date which is greater than the start date");
                                                $("#ContractEndDate").val("");
                                            }

                                        }
                                    }


                                });
                            });
                            $(function () {
                                $("#ContractStartDate").change(function () {
                                    var start_date = $(this).val();
                                    var end_date = $("#ContractEndDate").val();
                                    if (end_date) {
                                        if (start_date) {
                                            if (start_date > end_date) {
                                                swal("Please select date which is less than the end date");
                                                $("#ContractStartDate").val("");
                                            }

                                        }
                                    }


                                });
                            });



                            // START SUBMIT PAYMENT SCHEDULE
                            $(function () { // this will be called when the DOM is ready
                                $("#submit_pay_schedule").click(function (e) {
                                    var contract_amount = parseFloat($("#ContractAmount").val().split(",").join(""));
                                    if (contract_amount > 0) {
                                    var financial_year = $("#FinancialYear").val();
                                    if (!financial_year) {
                                        swal("Select Financial Year");
                                        return;
                                    }
                                    var payment_amount = $("#PaymentAmount").val().split(",").join("");
                                    if (!payment_amount) {
                                        swal("Insert Amount");
                                        return;
                                    }
                                    var description = $("#PaymentDescription").val();
                                    if (!description) {
                                        swal("Insert description");
                                        return;
                                    }

                                    var deliverable = $("#Deliverable").val();

                                    var contract_id = $("#ContractId").val();
                                    if (payment_amount>0) {
                                    var form_data = {
                                        "Description": description,
                                        "Amount": payment_amount,
                                        "Deliverable": deliverable,
                                        "FinancialYear": financial_year,
                                        "ContractId": contract_id
                                    }
                                    $("#submit_pay_schedule").prop('disabled', true);
                                    var url = '@Url.Action("InsertPaymentSchedule", "Contract")';
                                    $.ajax(
                                {
                                    type: "POST",
                                    url: url,
                                    data: form_data,
                                            success: function (data) {
                                              $("#submit_pay_schedule").prop('disabled', false);
                                        if (data.response == "Success") {
                                 swal("Payment schedule added successfully", { icon: "success" })
                                                .then((value) => {
                                 PaymentScheduleTable(data.paymentScheduleList);
                                                });

                                        }
                                        else if (data == "Exceed") {
                                            swal("Not saved, Payment Schedule(s) Amount can not exeed Contract Amount!");
                                            return;
                                        }
                                        else {
                                            swal("Failed due to DbException,Contact System supporter");

                                    }
                            },
                            error: function (xhr) {
                                $("#submit_pay_schedule").prop('disabled', false);
                                swal("An error has occured, contact system supporter");

                            },

                        });
                                    } else {

                                        swal("Payment Schedule must be money");
                                    }

                         } else {

                                  swal("Save basic information first on step one");
                         }

                                });
                            });
                            // END SUBMIT PAYMENT SCHEDULE

                            // START UPDATE PAYMENT SCHEDULE
                            $(function () { // this will be called when the DOM is ready
                                $("#update_pay_schedule").click(function (e) {
                                    e.preventDefault();
                                    var financial_year = $("#EditPaySchedule #FinancialYear").val();
                                    if (!financial_year) {
                                        swal("Select Financial Year");
                                        return;
                                    }
                                    var payment_amount = $("#EditPaySchedule #PaymentAmount").val().split(",").join("");
                                    if (!payment_amount) {
                                        swal("Insert Amount");
                                        return;
                                    }
                                    var description = $("#EditPaySchedule #PaymentDescription").val();
                                    if (!description) {
                                        swal("Insert description");
                                        return;
                                    }

                                    var deliverable = $("#EditPaySchedule #Deliverable").val();

                                    var paymentScheduleId = $("#EditPaySchedule #PaymentScheduleId").val();

                                    var contract_id = $("#ContractId").val();
                                    if (payment_amount > 0) {
                                    var form_data = {
                                        "PaymentScheduleId": paymentScheduleId,
                                        "Description": description,
                                        "Amount": payment_amount,
                                        "Deliverable": deliverable,
                                        "FinancialYear": financial_year,
                                        "ContractId": contract_id
                                    }
                                    $("#update_pay_schedule").prop('disabled', true);
                                    var url = '@Url.Action("UpdatePayScheduleVariation", "Contract")';
                                    $.ajax(
                                        {
                                            type: "POST",
                                            url: url,
                                            data: form_data,
                                                   success: function (data) {
                                               $("#update_pay_schedule").prop('disabled', false);
                                                if (data.response == "Success") {
                                                         swal("Updated successfully", { icon: "success" })
                                                                        .then((value) => {
                                                      PaymentScheduleTable(data.paymentScheduleList);
                                                          $('#editPaymentModal').modal('hide');
                                                                        });

                                                }
                                                else if (data == "ItemExceed") {
                                                    swal("Not saved,Amount can not be less than total item added to this Payment Schedule.Please first remove items on this on step three.");
                                                    return;
                                                }
                                                else if (data == "Exceed") {
                                                    swal("Not saved, Payment Schedule can not exeed Contract Amount ");
                                                    return;
                                                }
                                                else {
                                                    swal("Failed due to DbException,Contact System supporter");

                                                }
                                            },
                                            error: function (xhr) {
                                                $("#update_pay_schedule").prop('disabled', false);
                                                swal("An error has occured, contact system supporter");

                                            },

                                        });

                                }else{
                                        swal("Payment schedule amount must be money");
                           }


                                });
                            });
                            // END UPDATE PAYMENT SCHEDULE


                            // ON SUB BUDGET CLASS SELECTED
                            $("#CurrencyRateViewId").change(function () {
                                var Id = $("#CurrencyRateViewId").val();
                                var url = '@Url.Action("GetCurrency", "Procurement")';
                                $.ajax({
                                    type: "POST",
                                    url: url,
                                    data: { Id: Id },
                                    success: function (data) {
                                     if (data == "SetupProblem") {
                                        swal("Currency Rate Setup is Incomplete");
                                        } else  if (data == "DbException") {
                                        swal("Failed to select currency due to DbException,Contact technical supporter");
                                        }
                                     else {
                                         $(".currencyDisp").text(data.currency);
                                        }
                                    }
                                });
                            });

                            //MANAGE STEP WIZARD
                            var navListItems = $('div.setup-panel div a'),
                                   allWells = $('.setup-content'),
                                   allNextBtn = $('.nextBtn');

                            allWells.hide();

                            navListItems.click(function (e) {
                                e.preventDefault();
                                var $target = $($(this).attr('href')),
                                        $item = $(this);

                                if (!$item.hasClass('disabled')) {
                                    navListItems.removeClass('btn-primary').addClass('btn-default');
                                    $item.addClass('btn-primary');
                                    allWells.hide();
                                    $target.show();
                                    $target.find('input:eq(0)').focus();
                                }
                            });

                            allNextBtn.click(function () {
                                var curStep = $(this).closest(".setup-content"),
                                    curStepBtn = curStep.attr("id"),
                                    nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().next().children("a"),
                                    curInputs = curStep.find("input[type='text'],input[type='url']"),
                                    isValid = true;

                                $(".form-group").removeClass("has-error");
                                for (var i = 0; i < curInputs.length; i++) {
                                    if (!curInputs[i].validity.valid) {
                                        isValid = false;
                                        $(curInputs[i]).closest(".form-group").addClass("has-error");
                                    }
                                }

                                if (isValid)
                                    nextStepWizard.removeAttr('disabled').trigger('click');
                            });

                            $('div.setup-panel div a.btn-primary').trigger('click');
                            //END MANAGE STEP WIZARD

                            function SearchPayee() {
                                $('#payeeModal').modal('show');
                            }


				           var contract_Id = $("#ContractId").val();
                            if (contract_Id) {

                                var url = '@Url.Action("GetPaymentSchedule", "Contract")';
                                $.ajax({
                                    type: "POST",
                                    url: url,
                                    data: { id: contract_Id },
                                    success: function (data) {
                                        $('#add_item #PaymentScheduleId').empty();
                                        $('<option value="">Select...</option>').appendTo('#add_item #PaymentScheduleId');
                                        $.each(data, function (i, d) {
                                            $('<option value="' + d.PaymentScheduleId + '">' + d.Description + '-Balance:' + d.Balance.toLocaleString('en') + '</option>').appendTo('#add_item #PaymentScheduleId');
                                        });
                                    }
                                });
                            }


                            //SUBMIT  ITEM
                            $(function () {
                                $("#contract_item").click(function (e) {
                                    var contract_amount = parseFloat($("#ContractAmount").val().split(",").join(""));
                                    if (contract_amount > 0) {
                                        var item_class = $("#ItemClassificationId").val();
                                        if (!item_class) {
                                            swal("Please select Item Class !");
                                            return
                                        }
                                        var itemDesc = $("#ItemDesc").val();
                                        if (!itemDesc) {
                                            swal("Please enter item !");
                                            return
                                        }
                                        var uom = $("#UOM").val();
                                        if (!uom) {
                                            swal("Please select Unit of measure !");
                                            return
                                        }

                                        var quantity = $("#Quantity").val();
                                        if (!quantity) {
                                            swal("Please enter quantity of items !");
                                            return
                                        }
                                        if (quantity == 0) {
                                            swal("Please quantity can not be zero !");
                                            return
                                        }
                                        var unitPrice = parseFloat($("#UnitPrice").val().split(",").join(""));
                                        if (!unitPrice) {
                                            swal("Please enter unit price !");
                                            return
                                        }
                                        if (unitPrice == 0) {
                                            swal("Please Unit price can not be zero !");
                                            return
                                        }
                                        if (unitPrice < 0) {
                                            swal("Please Unit price can not be negative !");
                                            return
                                        }
                                        var paymentScheduleId = $("#PaymentScheduleId").val();
                                        if (!paymentScheduleId) {
                                            swal("Please select Payment Schedule !");
                                            return
                                        }

                                        var contractId = $("#ContractId").val();
                                        var totalAmount = parseFloat($("#TotalAmount").val().split(",").join(""));
                                        if (totalAmount == 0) {
                                            swal("Please Total Amount can not be zero !");
                                            return
                                        }
                                        if (totalAmount < 0) {
                                            swal("Please Total Amount can not be negative !");
                                            return
                                        }
                                        if (totalAmount > 0) {
                                            var overhead = parseFloat($("#OverheadPercentage").val());
                                             var vat_applicable = $("#VatApplicable").val();

                                        var formData = {
                                            "ContractId": contractId,
                                            "ItemClassificationId": item_class,
                                            "Quantity": quantity,
                                            "UnitPrice": unitPrice,
                                            "UOM": uom,
                                            "ItemDesc": itemDesc,
                                            "VatApplicable": vat_applicable,
                                            "OverheadPercentage": overhead,
                                            "TotalAmount": totalAmount,
                                            "PaymentScheduleId": paymentScheduleId
                                        };
                                        $("#contract_item").prop('disabled', true);
                                        var url = '@Url.Action("SaveItemVariation", "Contract")';
                                        $.ajax(
                                        {
                                            type: "POST", //HTTP POST Method
                                            url: url, // Controller/View
                                            data: formData,
                                                success: function (data) {
                                                    $("#contract_item").prop('disabled', false);

                                                if (data.response == "Success") {

                                             swal("Saved successfully", { icon: "success" })
                                                .then((value) => {
                                                    UpdateItemsTable(data.itemsList);
                                                    PaymentScheduleList(data.paymentScheduleList);
                                                });

                                                }
                                                else if (data == "Exceed") {
                                                    swal("Not saved,Amount of total items can not exeed payment schedule amount");
                                                    return;
                                                }
                                                else {
                                           swal(" An error has occured DbException, contact system support");

                                                }
                                            },
                                            error: function (xhr) {
                                                $("#contract_item").prop('disabled', false);
                                                swal("An error has occured, contact system support");

                                            },

                                        });
                                            } else {
                                        swal("Please Total Amount must be money");
                                        }
                                    } else {
                                        swal("Please insert basic information on step one");
                                    }
                                });
                            });

                            //End of Submit  Contract Item
                        //FINISH CONTRACT VARIATION
                            $("#finish").click(function (e) {
                                    var url = '@Url.Action("ContractVariation", "Contract")';
                                    window.location.replace(url);
                            });

                                 $(function () {
                                $("#ItemCategory").change(function () {
                                    var category = $(this).val();
                                    if (category) {
                                      var url = '@Url.Action("GetItemClasses", "Procurement")';
                                    $.ajax({
                                        type: "GET",
                                        url: url,
                                        data: { category : category },
                                        success: function (data) {
                                            if (data.response == "Success") {
                                               $('#ItemClassificationId').empty();
                                                $('<option value="">Select...</option>').appendTo('#ItemClassificationId');
                                                $.each(data.itemClasses, function (i, d) {
                                                    $('<option value="' + d.ItemClassificationId + '">' + d.ClassificationDesc + '</option>').appendTo('#ItemClassificationId');
                                                });
                                            }
                                            else {
                                               swal("Failed to fetch data due to DB Exception.Contact Technical supporter");
                                            }
                                        }
                                    });
                                    }

                                });
                            });

                            $(function () { // this will be called when the DOM is ready
                                $("#ItemDesc").keyup(function () {
                                    var query = $(this).val();
                                    var item_id = $("#ItemClassificationId").val();
                                    if (!item_id) {
                                        swal("Please select class first");
                                        $(this).val("");
                                        return false;

                                    }
                                    var length = query.length;
                                    if (length > 1) {
                                        get_items(query, item_id);
                                    }

                                });
                            });

                                 $(function () { // this will be called when the DOM is ready
                                $("#UnitPrice").keyup(function () {
                                    var unit_price = parseFloat($(this).val().split(",").join(""));
                                    var quantity = parseFloat($("#Quantity").val());
                                    if (quantity > 0) {
                                    var overhead = parseFloat($("#OverheadPercentage").val());
                                    var total = unit_price * quantity;
                                    var checkedValue = $("#add_item #VatStatus:checked").val();

                                    if (checkedValue == "Applicable") {
                                        var vat = parseFloat($("#VatPercentage").val());
                                        var total_vat = total * vat / 100;
                                        var grand_total = total_vat + total;
                                           if (overhead > 0) {
                                                grand_total = grand_total + total * overhead / 100;
                                               }
                                        var total_amount = grand_total.toFixed(2);
                                        $("#TotalAmount").val(total_amount.toLocaleString('en'));

                                    } else {
                                             if (overhead > 0) {
                                         total = total + total * overhead / 100;
                                                   }
                                        $("#TotalAmount").val(total.toLocaleString('en'));

                                    }

                                }

                                });

                            });
                            $(function () { // this will be called when the DOM is ready
                                $("#Quantity").keyup(function () {

                                    var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                                    if (unit_price > 0) {
                                        var quantity = parseFloat($(this).val());
                                        var total = unit_price * quantity;
                                        var overhead = parseFloat($("#OverheadPercentage").val());
                                        var checkedValue = $("#add_item #VatStatus:checked").val();

                                        if (checkedValue == "Applicable") {
                                            var vat = parseFloat($("#VatPercentage").val());
                                            var total_vat = total * vat / 100;
                                            var grand_total = total_vat + total;
                                            if (overhead > 0) {
                                                grand_total = grand_total + total * overhead / 100;
                                               }
                                            var total_amount = grand_total.toFixed(2);
                                            $("#TotalAmount").val(total_amount.toLocaleString('en'));

                                        } else {
                                                  if (overhead > 0) {
                                             total = total + total * overhead / 100;
                                                   }
                                            $("#TotalAmount").val(total.toLocaleString('en'));

                                        }
                                    }

                                });

                            });

                             $(function () { // this will be called when the DOM is ready
                                 $("#OverheadPercentage").keyup(function () {
                                     var overhead = parseFloat($(this).val());
                                         if (overhead >= 0) {
                                     } else {
                                         overhead = 0;
                                     }
                                     var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                                     var quantity = parseFloat($("#Quantity").val());
                                     if (unit_price > 0 && quantity > 0) {
                                         var total = unit_price * quantity;
                                         var checkedValue = $("#add_item #VatStatus:checked").val();
                                         if (checkedValue == "Applicable") {
                                             var vat = parseFloat($("#VatPercentage").val());
                                             var total_vat = total * vat / 100;
                                             var grand_total = total_vat + total + total * overhead / 100;
                                             var total_amount = grand_total.toFixed(2);
                                             $("#TotalAmount").val(total_amount.toLocaleString('en'));
                                         } else {
                                             total = total + total * overhead / 100;
                                             $("#TotalAmount").val(total.toLocaleString('en'));

                                         }
                                     }

                                });

                            });

                            $("#VatStatus").change(function (e) {
                                  $("#VatApplicable").val(e.target.checked ? "YES" : "NO");
                                var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                                var quantity = parseFloat($("#Quantity").val());
                                  var overhead = parseFloat($(this).val());
                                if ($(this).is(":checked")) {
                                    if (unit_price >= 0 && quantity >= 0) {
                                        var total = unit_price * quantity;
                                        var vat = parseFloat($("#VatPercentage").val());
                                        var total_vat = total * vat / 100;
                                        var grand_total = total_vat + unit_price * quantity;
                                          if (overhead > 0) {
                                                grand_total = grand_total + total * overhead / 100;
                                               }
                                        var total_amount = grand_total.toFixed(2);
                                        $("#TotalAmount").val(total_amount.toLocaleString('en'));

                                    }

                                } else {
                                    if (unit_price >= 0 && quantity >= 0) {
                                        var total = unit_price * quantity;
                                              if (overhead > 0) {
                                             total = total + total * overhead / 100;
                                                   }
                                        $("#TotalAmount").val(total.toLocaleString('en'));

                                    }
                                }
                            });

                              $(function () {
                                    $("#EditItem #ItemCategory").change(function () {
                                        var category = $(this).val();
                                        if (category) {
                                          var url = '@Url.Action("GetItemClasses", "Procurement")';
                                        $.ajax({
                                            type: "GET",
                                            url: url,
                                            data: { category : category },
                                            success: function (data) {
                                                if (data.response == "Success") {
                                                   $('#EditItem #ItemClassificationId').empty();
                                                    $('<option value="">Select...</option>').appendTo('#EditItem #ItemClassificationId');
                                                    $.each(data.itemClasses, function (i, d) {
                                                        $('<option value="' + d.ItemClassificationId + '">' + d.ClassificationDesc + '</option>').appendTo('#EditItem #ItemClassificationId');
                                                    });
                                                }
                                                else {
                                                   swal("Failed to fetch data due to DB Exception.Contact Technical supporter");
                                                }
                                            }
                                        });
                                        }

                                    });
                                });

                            $(function () { // this will be called when the DOM is ready
                                $("#EditItem #UnitPrice").keyup(function () {
                                    var unit_price = parseFloat($(this).val().split(",").join(""));
                                    var quantity = parseFloat($("#EditItem #Quantity").val());
                                    if (quantity >0) {
                                    var overhead = parseFloat($("#OverheadPercentage").val());
                                    var total = unit_price * quantity;
                                    var checkedValue = $("#EditItem #VatStatus:checked").val();

                                    if (checkedValue == "Applicable") {
                                        var vat = parseFloat($("#VatPercentage").val());
                                        var total_vat = total * vat / 100;
                                        var grand_total = total_vat + unit_price * quantity;
                                             if (overhead > 0) {
                                                grand_total = grand_total + total * overhead / 100;
                                               }
                                        var total_amount = grand_total.toFixed(2);
                                        $("#EditItem #TotalAmount").val(total_amount.toLocaleString('en'));



                                    } else {
                                         if (overhead > 0) {
                                             total = total + total * overhead / 100;
                                                   }
                                        $("#EditItem #TotalAmount").val(total.toLocaleString('en'));

                                    }

                                }


                                });

                            });
                            $(function () { // this will be called when the DOM is ready
                                $("#EditItem #Quantity").keyup(function () {

                                    var unit_price = parseFloat($("#EditItem #UnitPrice").val().split(",").join(""));
                                    if (unit_price > 0) {
                                        var quantity = parseFloat($(this).val());
                                        var overhead = parseFloat($("#OverheadPercentage").val());
                                        var total = unit_price * quantity;

                                        var checkedValue = $("#EditItem #VatStatus:checked").val();

                                        if (checkedValue == "Applicable") {
                                            var vat = parseFloat($("#VatPercentage").val());
                                            var total_vat = total * vat / 100;
                                            var grand_total = total_vat + unit_price * quantity;
                                                 if (overhead > 0) {
                                                grand_total = grand_total + total * overhead / 100;
                                                    }
                                            var total_amount = grand_total.toFixed(2);
                                            $("#EditItem #TotalAmount").val(total_amount.toLocaleString('en'));

                                        } else {
                                             if (overhead > 0) {
                                             total = total + total * overhead / 100;
                                                   }
                                            $("#EditItem #TotalAmount").val(total.toLocaleString('en'));
                                        }
                                    }

                                });

                            });

                               $(function () { // this will be called when the DOM is ready
                                 $("#EditItem #OverheadPercentage").keyup(function () {
                                     var overhead = parseFloat($(this).val());
                                     if (overhead >= 0) {
                                     } else {
                                         overhead = 0;
                                     }
                                     var unit_price = parseFloat($("#EditItem #UnitPrice").val().split(",").join(""));
                                     var quantity = parseFloat($("#EditItem #Quantity").val());
                                     if (unit_price > 0 && quantity > 0) {
                                         var total = unit_price * quantity;
                                         var checkedValue = $("#EditItem #VatStatus:checked").val();
                                         if (checkedValue == "Applicable") {
                                             var vat = parseFloat($("#EditItem #VatPercentage").val());
                                             var total_vat = total * vat / 100;
                                             var grand_total = total_vat + total + total * overhead / 100;
                                             var total_amount = grand_total.toFixed(2);
                                             $("#EditItem #TotalAmount").val(total_amount.toLocaleString('en'));
                                         } else {
                                             total = total + total * overhead / 100;
                                             $("#EditItem #TotalAmount").val(total.toLocaleString('en'));

                                         }
                                     }

                                      });

                                  });

                            $("#EditItem #VatStatus").change(function (e) {
                               $("#EditItem #VatApplicable").val(e.target.checked ? "YES" : "NO");
                                var unit_price = parseFloat($("#EditItem #UnitPrice").val().split(",").join(""));
                                var quantity = parseFloat($("#EditItem #Quantity").val());
                                var overhead = parseFloat($("#OverheadPercentage").val());
                                if ($(this).is(":checked")) {
                                    if (unit_price >= 0 && quantity >= 0) {
                                        var total = unit_price * quantity;
                                        var vat = parseFloat($("#VatPercentage").val());
                                        var total_vat = total * vat / 100;
                                        var grand_total = total_vat + unit_price * quantity;
                                             if (overhead > 0) {
                                                grand_total = grand_total + total * overhead / 100;
                                               }
                                        var total_amount = grand_total.toFixed(2);
                                        $("#EditItem #TotalAmount").val(total_amount.toLocaleString('en'));

                                    }

                                } else {
                                    if (unit_price >= 0 && quantity >= 0) {
                                        var total = unit_price * quantity;
                                         if (overhead > 0) {
                                             total = total + total * overhead / 100;
                                                   }
                                        $("#EditItem #TotalAmount").val(total.toLocaleString('en'));

                                    }
                                }
                            });


                            $(function () { // this will be called when the DOM is ready
                                $("#add_lot").click(function () {
                                    $("#add_lot_form").show();
                                    $("#add_lot_field").hide();
                                    $("#hide_lot_field").show();

                                });
                            });

                            $(function () { // this will be called when the DOM is ready
                                $("#hide_lot_form").click(function () {
                                    $("#add_lot_form").hide();
                                    $("#add_lot_field").show();
                                    $("#hide_lot_field").hide();

                                });
                            });
                            //End Manage VAT


                            $("#EditItem").on('submit', function (e) {
                                e.preventDefault();
                                var item_class = $("#EditItem #ItemClassificationId").val();
                                if (!item_class) {
                                    swal("Please select Item Class !");
                                    return
                                }
                                var itemDesc = $("#EditItem #ItemDesc").val();
                                if (!itemDesc) {
                                    swal("Please enter item !");
                                    return
                                }
                                var uom = $("#EditItem #UOM").val();
                                if (!uom) {
                                    swal("Please select Unit of measure !");
                                    return
                                }

                                var quantity = $("#EditItem #Quantity").val();
                                if (!quantity) {
                                    swal("Please enter quantity of items !");
                                    return
                                }
                                if (quantity == 0) {
                                    swal("Please quantity can not be zero !");
                                    return
                                }
                                var unitPrice = $("#EditItem #UnitPrice").val();
                                if (!unitPrice) {
                                    swal("Please enter unit price !");
                                    return
                                }
                                if (unitPrice == 0) {
                                    swal("Please Unit price can not be zero !");
                                    return
                                }
                                var id = $("#EditItem #ContractDetailId").val();
                                var payment_id = $("#EditItem #PaymentScheduleId").val();
                                var totalAmount = parseFloat($("#EditItem #TotalAmount").val().split(",").join(""));
                                if (totalAmount == 0) {
                                    swal("Please Total Amount can not be zero !");
                                    return
                                }
                                if (totalAmount < 0) {
                                    swal("Please Total Amount can not be negative !");
                                    return
                                }

                                if (totalAmount > 0) {
                                var overhead = parseFloat($("#EditItem #OverheadPercentage").val());
                                var vat_applicable = $("#EditItem #VatApplicable").val();
                                    var formData = {
                                    "ContractDetailId": id,
                                    "ItemClassificationId": item_class,
                                    "Quantity": quantity,
                                    "UnitPrice": unitPrice,
                                    "UOM": uom,
                                    "ItemDesc": itemDesc,
                                    "VatApplicable": vat_applicable,
                                    "OverheadPercentage": overhead,
                                    "TotalAmount": totalAmount,
                                    "PaymentScheduleId": payment_id
                                };
                                $("#btn_save_edit_item").prop('disabled', true);
                                var url = '@Url.Action("UpdateItemByVariation", "Contract")';
                                $.ajax(
                    {
                        type: "POST",
                        url: url,
                        data: formData,
                       success: function (data) {
                       $("#btn_save_edit_item").prop('disabled', false);
                             if (data.response == "Success") {

                                             swal("Updated successfully", { icon: "success" })
                                                 .then((value) => {
                                                   $('#editItemModal').modal('hide');
                                                    UpdateItemsTable(data.itemsList);
                                                    PaymentScheduleList(data.paymentScheduleList);
                                                });

                                   }
                            else if (data == "Exceed") {
                                swal("Not saved,Amount can not exeed Payment Schedule Amount ");
                                return;
                             }
                           else if (data.response == "ExceedReceived") {
                                swal("Not saved,Amount can not be reduced to less than "+toLabel(data.amount)+" which is equal to amount previously received ");
                                return;
                            }
                            else {
                                swal("Failed to update ,DbException");
                                return;
                            }
                        },
                        error: function (xhr) {
                            $("#btn_save_edit_item").prop('disabled', false);
                            swal(error);

                        },

                    });

                            } else {
                    swal("Please Total Amount must be money");
                        }

                            });


                        });

        $(document).ajaxStart(function () {
            $(".loadingImg").show();
        });

        $(document).ajaxStop(function () {
            $(".loadingImg").hide();
        });

        $(document).on('click', '.editPayment', function () {
            var id = $(this).data('id');
            var fy = $(this).data('fy');
            var desc = $(this).data('desc');
            var amount = $(this).data('amount');
            var deliverable = $(this).data('deliverable');
            $("#EditPaySchedule #PaymentScheduleId").val(id);
            $("#EditPaySchedule #PaymentDescription").val(desc);
            $("#EditPaySchedule #PaymentAmount").val(amount.toLocaleString('en'));
            $("#EditPaySchedule #Deliverable").val(deliverable);
        });
//Delete Payment Schedule
        $(document).on('click', '.removePayment', function () {
            var id = $(this).data('id');
            var id = $(this).data('id');
            var desc = $(this).data('desc');
            swal({
                title: 'Confirmation',
                text: "Do you what to cancel this payment schedule  " + desc + " ?",
                buttons: [
                  'No',
                  'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    var url = '@Url.Action("DeletePayScheduleVariation", "Contract")';
                    $.ajax(
        {
            type: "POST",
            url: url,
            data: { id: id },
            success: function (data) {
                if (data.response == "Success") {

                    swal("Cancelled successfully!", { icon: "success" })
                      .then((value) => {
                          PaymentScheduleTable(data.paymentScheduleList);
                          UpdateItemsTable(data.itemsList);
                      });

                }
                else if (data == "Received") {
                   swal("Failed to delete because arleady received");
                }
                else {

                    swal("Failed to delete,DbException");
                }
            },
            error: function (xhr) {
                swal(error);
                $("#divLoader").hide();
            },

        });
                } else {
                    swal("Cancelled", "No change was made");
                }
            });

        });
        //Edit Item
        $(document).on('click', '.editItemModal', function () {
            var id = $(this).data('id');
            $("#EditItem #ContractDetailId").val(id);
            var category = $(this).data('category');
            $("#EditItem #ItemCategory").val(category);
            var classid = $(this).data('classid');
            $("#EditItem #ItemClassificationId").val(classid);
            var item = $(this).data('item');
            $("#EditItem #ItemDesc").val(item);
            var uom = $(this).data('uom');
            $("#EditItem #UOM").val(uom);
            var quantity = $(this).data('quantity');
            $("#EditItem #Quantity").val(quantity);
            var unitprice = $(this).data('unitprice');
            $("#EditItem #UnitPrice").val(unitprice.toLocaleString('en'));
            var totalamount = $(this).data('totalamount');
            $("#EditItem #TotalAmount").val(totalamount.toLocaleString('en'));
            var pscheduleid = $(this).data('pscheduleid');
            $("#EditItem #PaymentScheduleId").val(pscheduleid);
              var overhead = $(this).data('overhead');
            $("#EditItem #OverheadPercentage").val(overhead);
            var vat = $(this).data('vat');
            if (vat == "Excempted") {
                $("#EditItem #VatStatus").prop('checked', false);
                      $("#EditItem #VatApplicable").val("NO");
                } else {
                 $("#EditItem #VatStatus").prop('checked', true);
                         $("#EditItem #VatApplicable").val("YES");
                }
        });
        //REMOVE ITEM
        $(document).on('click', '.removeItems', function () {
            var id = $(this).data('id');
            var itemdesc = $(this).data('itemdesc');
            swal({
                title: 'Confirmation',
                text: "Do you what to cancel  " + itemdesc + " ?",
                buttons: [
                  'No',
                  'Yes'
                ],
            }).then(function (isConfirm) {
                if (isConfirm) {
                    var url = '@Url.Action("DeleteItemVariation", "Contract")';
                    $.ajax(
        {
            type: "POST",
            url: url,
            data: { id: id },
            success: function (data) {
             if (data.response == "Success") {

                    swal("Item removed successfully!", { icon: "success" })
                      .then((value) => {
                          UpdateItemsTable(data.itemsList);
                          PaymentScheduleList(data.paymentScheduleList);
                      });

                   }
                else if (data == "Received") {
                   swal("Failed to delete because arleady received");
                }
                else {
                    swal("Failed to cancel ,DbException");
                }
            },
            error: function (xhr) {
                //console.log(xhr.responseText);
                swal("An error has occured, contact system support");

            },

        });
                } else {
                    swal("Cancelled", "No change was made");
                }
            });
        });

                        var OldVal = 0
                        function inputThousandSeparator(NewVal) {
                            if (NewVal) {
                                try {
                                    NewVal = parseFloat(NewVal.split(",").join(""))
                                    if (typeof NewVal == 'number' && !Number.isNaN(NewVal)) {
                                        OldVal = NewVal;
                                        return NewVal.toLocaleString()
                                    } else {
                                        return OldVal
                                    }
                                } catch (e) {
                                    console.log(e)
                                }
                            }
                        }
                        $("#OriginalAmount").autoNumeric('init');
                        $("#ContractAmount").autoNumeric('init');
                        $("#PaymentAmount").autoNumeric('init');
                        $("#EditPaySchedule #PaymentAmount").autoNumeric('init');
                        $("#UnitPrice").autoNumeric('init');
                        $("#EditItem #UnitPrice").autoNumeric('init');
                        $("#ContractName").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#ContractDescription").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#LotDescription").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#PaymentDescription").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#Deliverable").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#EditPaySchedule #PaymentDescription").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#EditPaySchedule #Deliverable").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#ItemDesc").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });
                        $("#EditItem #ItemDesc").on('keypress', function (event) {
                            var regex = new RegExp("^[0-9a-zA-Z \b]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        });


                   $('#PaymentDescription').bind('copy paste cut', function (e) {
                            e.preventDefault();
                            swal('Paste option is disabled !!');
                   });

                   $('#EditPaySchedule #PaymentDescription').bind('copy paste cut', function (e) {
                            e.preventDefault();
                            swal('Paste option is disabled !!');
                   });

    </script>
}



