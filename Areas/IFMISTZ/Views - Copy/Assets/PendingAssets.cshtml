@model IEnumerable<IFMIS.Areas.IFMISTZ.Models.ReceivedAssetsVM>
@{
    ViewBag.Title = "Pending Assets ";
}



<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Pending Assets </h2>

                    </header>


                    <div>
                        <div class="widget-body " style="padding-top:10px">

                            <div align="center">
                                <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>

                            <div class="row">

                                <div class="col-xs-9 col-sm-3 col-md-2 col-lg-2">

                                        <a href="@Url.Action("CreateAssets", "Assets")" class="btn btn-info" style="width:120px;border-radius:1px;">
                                            <i class="fa fa-plus"></i>Add New
                                        </a>

                                </div>
                                <div class="col-xs-9 col-sm-3 col-md-2 col-lg-2">
                                        <a href="@Url.Action("UploadAssets", "Assets")" class="btn btn-info" style="width:120px;border-radius:1px;">
                                            <i class="fa fa-upload"></i>Upload Asset
                                        </a>
                                </div>
                            </div>
                            <table class="table  table-bordered table-hover table-condensed" style="width:94%" align="center" id="dt_assets">
                                <thead>
                                    <tr>
                                        <th style="text-align:right;width:4%"></th>
                                        <th style="text-align:left">Code</th>
                                        <th style="text-align:left">Asset Name</th>
                                        <th style="text-align:center">No of Assets</th>
                                        <th style="text-align:left">Asset Class</th>
                                        <th style="text-align:left">Source</th>
                                        <th style="text-align:left">Status</th>
                                        <th style="text-align:left;width:10%">Action</th>

                                    </tr>
                                </thead>

                                <tbody>
                                    @{var i = 0;}
                                    @foreach (var item in Model)
                                    {
                                        int asset_number = 0;
                                        if (item.Quantity != null)
                                        {
                                            asset_number = (int)item.Quantity;
                                        }
                                        i++;
                                        if (asset_number > 0)
                                        {
                                            <tr>
                                                <td style="text-align:right">
                                                    @i
                                                </td>
                                                <td style="text-align:left">
                                                    @Html.DisplayFor(modelItem => item.AssetsCode)
                                                </td>

                                                <td style="text-align:left">
                                                    @Html.DisplayFor(modelItem => item.AssetName)
                                                </td>
                                                <td style="text-align:center">
                                                    <span class="badge inbox-badge margin-right-13">@asset_number</span>
                                                </td>
                                                <td style="text-align:left">
                                                    @Html.DisplayFor(modelItem => item.ClassName)
                                                </td>
                                                <td style="text-align:left">
                                                    @Html.DisplayFor(modelItem => item.SourceModule)
                                                </td>
                                                <td style="text-align:left">
                                                    @Html.DisplayFor(modelItem => item.OverallStatus)
                                                </td>
                                                <td style="text-align:left">

                                                    <div class="btn-group">
                                                        <button type="button" class="btn btn-info btn-xs dropdown-toggle" data-toggle="dropdown" style="width:40px;border-radius:1px;" aria-haspopup="true" aria-expanded="false">
                                                            <span class="caret"></span>
                                                            <span class="sr-only">Toggle Dropdown</span>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            @if (item.AssetClassId != null)
                                                            {
                                                                <li>
                                                                    <a href="#" onclick="previewAssets(@item.ReceivedAssetsId)"> <i class="fa fa-search-minus"></i>  Preview</a>
                                                                </li>
                                                            }
                                                            @if (item.ClassName != null)
                                                            {
                                                                <li>
                                                                    <a href="@Url.Action("AddInformation", "Assets", new { id = item.ReceivedAssetsId })" class="btn-xs edit">
                                                                        <i class="fa fa-edit"></i>  Add Information
                                                                    </a>
                                                                </li>
                                                            }
                                                            @if (item.SourceModule != "External" && item.SourceModule != "External Uploaded")
                                                            {
                                                                <li><a href="#" onclick="assetClass(@item.ReceivedAssetsId,'@item.AssetsCode',@item.AssetClassId)" class="btn-xs edit"><i class="fa fa-edit"></i> Set Asset Class</a></li>
                                                                @*<li><a href="#" onclick="correctCategory(@item.ReceivedAssetsId,'@item.AssetsCode')" class="btn-xs edit"><i class="fa fa-edit"></i> Correct Classification</a></li>*@
                                                                <li><a href="#" onclick="correctDescription(@item.ReceivedAssetsId,'@item.AssetsCode','@item.AssetName')" class="btn-xs edit"><i class="fa fa-edit"></i> Correct Asset Description</a></li>

                                                            }
                                                            @if (item.OverallStatus.ToUpper() == "COMPLETE")
                                                            {
                                                                <li><a href="#" onclick="confirmAsset(@item.ReceivedAssetsId,'@item.AssetsCode')" class="btn-xs edit"><i class="fa fa-edit"></i> Confirm</a></li>
                                                            }
                                                            else if (item.OverallStatus.ToUpper() == "REJECTED")
                                                            {
                                                                <li><a href="#" onclick="confirmRejected(@item.ReceivedAssetsId,'@item.AssetsCode')" class="btn-xs edit"><i class="fa fa-edit"></i> Confirm</a></li>
                                                            }
                                                            @if (item.SourceModule == "External" || item.SourceModule == "External Uploaded")
                                                            {
                                                                <li><a href="#" onclick="cancelAsset(@item.ReceivedAssetsId,'@item.AssetsCode')" class="btn-xs edit"><i class="fa fa-edit"></i> Cancel</a></li>

                                                            }
                                                        </ul>
                                                    </div>
                                                </td>

                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>

                        </div>





                    </div>


                </div>
            </article>

        </div>
    </section>

</div>


<div class="modal fade" id="AssetClass">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 align="center">Code: <span id="bcode"></span><br />Set Asset Class</h4>
            </div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "AssetClassform" }))
            {
                @Html.AntiForgeryToken()

        <div class="modal-body">
            <div class="form-horizontal">
                <input type="hidden" name="AssetbatchId" id="AssetbatchId" value="">
                <input type="hidden" name="PrevAssetClassId" id="PrevAssetClassId" value="">
                <div class="form-group">
                    @Html.Label("Asset Class", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-7">
                        @Html.DropDownList("ClassName", ViewBag.AssetClassesList as SelectList, "Select ", new { @class = "form-control", @required = "required" })
                    </div>

                </div>        
                <div class="form-group subClass" style="display:none">
                    @Html.Label("Sub Class", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-7">
                        @Html.DropDownList("AssetClassId", ViewBag.SubClassesList as SelectList, "Select ", new { @class = "form-control" })
                    </div>

                </div>
            </div>
        </div>
                <div class="modal-footer">
                    <button class="btn btn-default action-btn" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-info">
                        Save
                    </button>
                </div>

            }

        </div>
    </div>
</div>

<div class="modal fade" id="CorrectCategory">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 align="center">Asset(s) Batch Code: <span id="bcode"></span><br />Correct Item Classification</h4>
            </div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "CorrectCatForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    <input type="hidden" name="AssetbatchId" id="AssetbatchId" value="">
                    <div class="form-group">
                        @Html.Label("Change To", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-7">
                            <select name="ItemClass" id="ItemClass" class="form-control" required>
                                <option value="" selected>Select ...</option>
                                <option value="3">Inventory</option>
                                <option value="1">Expense</option>
                                <option value="4">Service</option>
                            </select>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default action-btn" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-info">
                        Save
                    </button>
                </div>

            }

        </div>
    </div>
</div>

<div class="modal fade" id="CorrectDescription">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 align="center">Asset(s) Batch Code: <span id="bcode"></span><br />Correct Asset Description</h4>
            </div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitDesription(this)"}))
            {
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    <input type="hidden" name="Id" id="Id" value="">
                    <div class="form-group">
                        @Html.Label("Asset Description", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-7">
                            <input type="text" name="Description" id="Description" class="form-control" required autocomplete="off">
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default action-btn" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-info">
                        Save
                    </button>
                </div>

            }

        </div>
    </div>
</div>
<div class="modal fade" id="rejectEntry" style="left:4%">

    <div class="modal-dialog" style="width:35%;">
        <div class="modal-content panel-info">

            <div class="modal-header panel-heading">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title" style="text-align:center"> Confirm Asset</h3>
                <h4 align="center">Code Number <span id="code_number"></span></h4>
            </div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "ConfirmReason" }))
            {
                <div class="modal-body form-horizontal">

                    <br />

                    <input type="hidden" name="Id" id="Id" value="">
                    <div class="form-group">

                        <div class="col-md-12">
                            <textarea name="Reason" id="Reason" placeholder="Rejection reason" required rows="4" maxlength="250" class="form-control"></textarea>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-default" data-dismiss="modal">Cancel</a>
                    <input class="btn btn-info" type="submit" id="btnSubmit" value="Save" />
                    @*<input type="submit" value="Submit" class="btn btn-success" id="btnSubmit" />*@

                </div>

            }
        </div>
    </div>
</div>
<div class="modal fade" id="divModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog modal-lg" style="width:80%;">
        <div width="90%" class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">
                    Preview
                </h4>
            </div>
            <div class="modal-body" id="divModalBody">

            </div>

            <div id="divPaymentStatusLoader" style="text-align:center; display:none">
                <img src="~/assets/img/avatars/ajax_loader.gif" />
            </div>
        </div>
    </div>

</div>
@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">
              function SubmitDesription(formData) {
            var url = '@Url.Action("EditDescription", "Assets")';
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (result) {
                    if (result == "Success") {

                        swal("Asset description changed successfully", { icon: "Success" })
                            .then((value) => {
                                 $('#CorrectDescription').modal('hide');
                                        location.reload();
                                    });
                    }
                    else {
                        swal("Failed  due to DbException");
                    }
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }
        // =========== End Save Desription ====================
            $(document).ready(function () {
                /* // DOM Position key index //
 l - Length changing (dropdown)
 f - Filtering input (search)
 t - The Table! (datatable)
 i - Information (records)
 p - Pagination (paging)
 r - pRocessing
 < and > - div elements
 <"#id" and > - div with an id
 <"class" and > - div with a class
 <"#id.class" and > - div with an id and class
 Also see: http://legacy.datatables.net/usage/features
 */
                /* BASIC ;*/
                var responsiveHelper_dt_assets = undefined;
                var responsiveHelper_datatable_fixed_column = undefined;
                var responsiveHelper_datatable_col_reorder = undefined;
                var responsiveHelper_datatable_tabletools = undefined;

                var breakpointDefinition = {
                    tablet: 1024,
                    phone: 480
                };

                $('#dt_assets').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_dt_assets) {
                            responsiveHelper_dt_assets = new ResponsiveDatatablesHelper($('#dt_assets'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_dt_assets.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_dt_assets.respond();
                    }
                });

                /* END BASIC */

                /* COLUMN FILTER  */
                var otable = $('#datatable_fixed_column').DataTable({

                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_fixed_column) {
                            responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_fixed_column.respond();
                    }
                });

                // custom toolbar
                $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

                // Apply the filter
                $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {
                    otable
                        .column($(this).parent().index() + ':visible')
                        .search(this.value)
                        .draw();
                });
                /* END COLUMN FILTER */

                /* COLUMN SHOW - HIDE */
                $('#datatable_col_reorder').dataTable({
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_col_reorder) {
                            responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_col_reorder.respond();
                    }
                });

                /* END COLUMN SHOW - HIDE */

                /* TABLETOOLS */
                $('#datatable_tabletools').dataTable({

                    // Tabletools options:
                    //   https://datatables.net/extensions/tabletools/button_options
                    "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                    "oTableTools": {
                        "aButtons": [
                        "copy",
                        "csv",
                        "xls",
                           {
                               "sExtends": "pdf",
                               "sTitle": "SmartAdmin_PDF",
                               "sPdfMessage": "SmartAdmin PDF Export",
                               "sPdfSize": "letter"
                           },
                           {
                               "sExtends": "print",
                               "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                           }
                        ],
                        "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                    },
                    "autoWidth": true,
                    "preDrawCallback": function () {
                        // Initialize the responsive datatables helper once.
                        if (!responsiveHelper_datatable_tabletools) {
                            responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                        }
                    },
                    "rowCallback": function (nRow) {
                        responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                    },
                    "drawCallback": function (oSettings) {
                        responsiveHelper_datatable_tabletools.respond();
                    }
                });
                /* END TABLETOOLS */

                $("#AssetClassform").on('submit', function (e) {
                    e.preventDefault();
                    var className = $("#AssetClassform #ClassName").val();
                    if (className=="Motor Vehicle/Motor Cycle/Plants & Machinery") {
                        var subClassId = $("#AssetClassform #AssetClassId").val();
                        if (!subClassId) {
                            swal("Please select Sub Class");
                            return false;
                        }
                    }
                    var formData = $(this).serialize();
                    $('#AssetClass').modal('hide');
                    var url = '@Url.Action("SetAssetsClass", "Assets")';
                    $.ajax(
                    {
                        type: "POST",
                        url: url,
                        data: formData,
                        success: function (response) {
                            if (response == "Success") {

                                swal("Assets Class set  successfully", { icon: "success" })
                                  .then((value) => {
                                      location.reload();
                                  });
                            }
                            else {
                                swal("Failed to set Assets Class,DbException");
                            }
                        },
                        error: function (xhr) {
                            //console.log(xhr.responseText);
                            alert("An error has occured, contact system support");
                            $("#divLoader").hide();
                        },

                    });

                });


                    $("#ConfirmReason").on('submit', function (e) {
                    e.preventDefault();

                    swal({
                        title: 'Confirmation',
                        text: "Do you confirm this Entry ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                            var url = '@Url.Action("ConfirmRejected", "Assets")';
                            var id = $("#Id").val();
                            var reason = $("#Reason").val();
                            var formData = {
                                "Id": id,
                                "Reason": reason
                            }
                            $('#rejectEntry').modal('hide');
                            $.ajax(
                        {
                            type: "POST",
                            url: url,
                            data: formData,
                                    success: function (response) {
                                  if (response == "Success") {

                                    swal("Confirmed  successfully!", { icon: "success" })
                                              .then((value) => {
                                           location.reload();
                                              });


                                }             
                                else {

                                      swal(response);
                                }
                            },
                            error: function (xhr) {
                                swal(error);

                            },

                        });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });
                });

                // Chage item Classification
                $("#CorrectCatForm").on('submit', function (e) {
                    e.preventDefault();

                    var item_class_id = $("#CorrectCatForm #ItemClass").val();
                    var description = "";
                    if (item_class_id == 1) {
                        description = "Do you chage Classfication of this Item(s) ? Once Changed to expense can not be restored";
                    } else if (item_class_id == 4) {
                        description = "Do you chage Classfication of this Item(s) ?Once Changed to service can not be restored";
                    }
                else{
                        description = "Do you chage Classfication of this Item(s) ?";
                    }

                    swal({
                        title: 'Confirmation',
                        text: description,
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                            var url = '@Url.Action("ChangeClassification", "Assets")';
                            var id = $("#CorrectCatForm #AssetbatchId").val();
                            var formData = {
                                "id": id,
                                "class_id": item_class_id
                            }
                            $('#CorrectCategory').modal('hide');
                            $.ajax(
                        {
                            type: "POST",
                            url: url,
                            data: formData,
                            success: function (response) {
                                if (response == "Success") {

                                    swal("Changed  successfully!", { icon: "success" })
                                              .then((value) => {
                                                  location.reload();
                                              });


                                }
                                else {

                                    swal("Failed to change ,DbException");
                                }
                            },
                            error: function (xhr) {
                                swal(error);

                            },

                        });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });
                });


                        });


        $("#AssetClassform #ClassName").change(function (e) {
            if ($(this).val()=="Motor Vehicle/Motor Cycle/Plants & Machinery") {
                 $("#AssetClassform .subClass").show();
            } else {
                  $("#AssetClassform #AssetClassId").prop('selectedIndex', 0);
                   $("#AssetClassform .subClass").hide();
                }
        });
        var confirmAsset = function (id, assets_number) {
                  swal({
                        title: 'Confirmation',
                        text: "Do you what to confirm Asset(s)  - " + assets_number + " ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                         var url = '@Url.Action("ConfirmAsset", "Assets")';
                            $.ajax(
                {
                    type: "POST",
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        if (response == "Success") {

                            swal("Confirmed successfully", { icon: "success" })
                                      .then((value) => {
                                          location.reload();
                                      });


                        }
                        else {

                            swal("Failed to confirm ,DbException");
                        }
                    },
                    error: function (xhr) {
                        swal(error);
                        $("#divLoader").hide();
                    },

                });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });

        }
                var cancelAsset = function (id, assets_number) {
                  swal({
                        title: 'Confirmation',
                        text: "Do you what to cancel Asset(s)  - " + assets_number + " ?",
                        buttons: [
                          'No',
                          'Yes'
                        ],
                    }).then(function (isConfirm) {
                        if (isConfirm) {
                         var url = '@Url.Action("CancelAsset", "Assets")';
                            $.ajax(
                {
                    type: "POST",
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        if (response == "Success") {

                            swal("Cancelled successfully", { icon: "success" })
                                      .then((value) => {
                                          location.reload();
                                      });


                        }
                        else {

                            swal("Failed to cancel ,DbException");
                        }
                    },
                    error: function (xhr) {
                        swal(error);
                        $("#divLoader").hide();
                    },

                });
                        } else {
                            swal("Cancelled", "No change was made");
                        }
                    });

        }
              var correctCategory = function (id, code) {
                 $("#CorrectCategory #bcode").text(code);
                  $("#CorrectCatForm #AssetbatchId").val(id)
                  $('#CorrectCategory').modal('show');
               };
               var correctDescription = function (id, code,description) {
                   $("#CorrectDescription #bcode").text(code);
                    $("#CorrectDescription #Id").val(id);
                   $("#CorrectDescription #Description").val(description);
                     $('#CorrectDescription').modal('show');
               };
              var assetClass = function (id, code,asset_class_id) {
                   $("#AssetClass #bcode").text(code);
                    $("#AssetClass #AssetClassId").val(asset_class_id);
                    $("#AssetClass #AssetbatchId").val(id);
                    $("#AssetClass #PrevAssetClassId").val(asset_class_id);
                   $('#AssetClass').modal('show');
        };
      //SHOW LOADER ICON
    $(document).ajaxStart(function () {
        $(".loadingImg").show();

    });
    //HIDE LOADER ICON
    $(document).ajaxStop(function () {
        $(".loadingImg").hide();
    });
           var previewAssets = function (id) {
               var url = '@Url.Action("PreviewAssets", "Assets")';
            $("#divModalBody").load(url, { id: id }, function (response, status, xhr) {
                if (status == "error") {
                    $("#divModalBody").html("Error on accessing this details, contact system support.");
                }
             dt_preview_assets = $('#divModalBody #dt_preview_assets').dataTable();
                $("#divModal").modal("show");
            });
        }
        var confirmRejected = function (id, code) {
            $("#code_number").text(code);
            $(".modal-body #Id").val(id);
            $('#rejectEntry').modal('show');

        };
    </script>
}










