@model IFMIS.Areas.IFMISTZ.Models.AssetRegisterVM
@{
    ViewBag.Title = "Create New Asset";
}



<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">


    </div>


    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Register New Assets </h2>

                    </header>


                    <div>
                       
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return SubmitAssets(this)" }))
                            {
                            @Html.AntiForgeryToken()
                        <div class="form-horizontal">
                            <div class="form-group">
                                @Html.LabelFor(model => model.AssetClassId, htmlAttributes: new { @class = "control-label   col-md-2" })
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.AssetClassId, Model.AssetClassList, "Select ", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(model => model.AssetClassId, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.AssetName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.AssetName, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.AssetName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.Currency, Model.CurrenciesList, "Select ", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @min = "0", @required = "required", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", @required = "required", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.TotalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                
                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-8 col-md-offset-2">
                                        <a href="@Url.Action("PendingAssets","Assets")" class="btn btn-info pull-left"><i class="glyphicon glyphicon-arrow-left"></i> Back  </a>
                                        <button type="submit" class="btn btn-info" style="float: left; margin-left: 5px">
                                            <i class="glyphicon glyphicon-floppy-disk"></i> Save
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-offset-2">

                            </div>
                        </div>
                            }


                            <div align="center">
                                <img src="~/Media/Images/ajax_loader.gif" class="loadingImg" style="display:none" />
                            </div>





                        </div>





                    </div>

            </article>

        </div>
    </section>

</div>

@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->

    <script type="text/javascript">


        function SubmitAssets(formData) {

            var url = '@Url.Action("SaveAssets", "Assets")';
            var ajaxConfig = {
                type: "post",
                url: url,
                data: new FormData(formData),
                success: function (result) {
                    if (result == "Success") {
                        swal("Data saved  successfully", { icon: "Success" })
                                    .then((value) => {
                                       var url = '@Url.Action("PendingAssets", "Assets")';
                                        window.location.replace(url);
                                });
                    }
                    else {
                        swal("Failed  due to DbException");
                    }
                }
            }

            if ($(formData).attr('enctype') == "multipart/form-data") {
                ajaxConfig["contentType"] = false;
                ajaxConfig["processData"] = false;
            }
            $.ajax(ajaxConfig);
            return false;
        }
        // =========== End Save Inventory ====================
            $(document).ready(function () {

                //$('#ManufactureDate').datepicker({
                //    dateFormat: 'yy-mm-dd',
                //    prevText: '<i class="fa fa-chevron-left"></i>',
                //    nextText: '<i class="fa fa-chevron-right"></i>',
                //    onSelect: function (selectedDate) {
                //        $('#ManufactureDate').datepicker('option', 'minDate', selectedDate);
                //    }
                //});
                //$('#ExpireDate').datepicker({
                //    dateFormat: 'yy-mm-dd',
                //    prevText: '<i class="fa fa-chevron-left"></i>',
                //    nextText: '<i class="fa fa-chevron-right"></i>',
                //    onSelect: function (selectedDate) {
                //        $('#ExpireDate').datepicker('option', 'minDate', selectedDate);
                //    }
                //});

            $(function(){
              $('input[type="radio"][name="CanExpire"]').click(function(){
                if ($(this).is(':checked'))
                {
                  if ($(this).val()=="Yes") {
                        $(".expire").show();
                    } else {
                        $(".expire").hide();
                    }
                }
              });
             });

                //MANAGE SELECTED DATE
                $(function () {
                    $("#ExpireDate").change(function () {
                        var expire_date = $(this).val();
                        var manufacture_date = $("#ManufactureDate").val();
                        if (manufacture_date) {
                            if (expire_date) {
                                if (manufacture_date > expire_date) {
                                    swal("Please select date which is greater than the manufacture date");
                                    $("#ExpireDate").val("");
                                }

                            }
                        }


                    });
                });
                $(function () {
                    $("#ManufactureDate").change(function () {
                        var manufacture_date = $(this).val();
                        var expire_date = $("#ExpireDate").val();
                        if (expire_date) {
                            if (manufacture_date) {
                                if (manufacture_date > expire_date) {
                                    swal("Please select date which is less than the expire date");
                                    $("#ManufactureDate").val("");
                                }

                            }
                        }


                    });
                });

               $(function () {
                   $("#UOM").change(function () {
                       var selected_uom = $(this).val();
                       if (uom) {
                       if (selected_uom != uom) {
                           $(this).prop('selectedIndex', 0);
                           swal("Please unit of measure must match with that of item card.Otherwise create new item card with UOM of " + selected_uom + ' !');
                       }
                              }
                    });
                });

                              $(function () { // this will be called when the DOM is ready
                                $("#UnitPrice").keyup(function () {

                                    var quantity = parseFloat($("#Quantity").val());
                                    if (quantity > 0) {
                                   var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                                        var total = unit_price * quantity;
                                        $("#InventoryValue").val(total.toLocaleString('en'));
                                    }

                                });

                            });
                            $(function () { // this will be called when the DOM is ready
                                $("#Quantity").keyup(function () {

                                    var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                                    if (unit_price > 0) {
                                        var quantity = parseFloat($("#Quantity").val());
                                        var total = unit_price * quantity;

                                            $("#InventoryValue").val(total.toLocaleString('en'));

                                        }

                                });

                            });

                        });
               $(function () { // this will be called when the DOM is ready
                     $("#UnitPrice").keyup(function () {
                     var quantity = $("#Quantity").val();
                          if (quantity > 0) {
                          var unit_price = parseFloat($(this).val().split(",").join(""));
                          var total = unit_price * quantity;
                         $("#TotalAmount").val(total.toLocaleString('en'));
                             }

                   });

               });
                     $(function () { // this will be called when the DOM is ready
                                $("#Quantity").keyup(function () {

                                    var unit_price = parseFloat($("#UnitPrice").val().split(",").join(""));
                                    if (unit_price > 0) {
                                        var quantity = $(this).val();
                                        var total = unit_price * quantity;
                                            $("#TotalAmount").val(total.toLocaleString('en'));
                                    }

                                });

                            });
            //$("#AssetName").on('keypress', function (event) {
            //    var regex = new RegExp("^[0-9a-zA-Z \b]+$");
            //    var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            //    if (!regex.test(key)) {
            //        event.preventDefault();
            //        return false;
            //    }
            //});
             $("#UnitPrice").autoNumeric('init');
            //SHOW LOADER ICON
    $(document).ajaxStart(function () {
        $(".loadingImg").show();

    });
    //HIDE LOADER ICON
    $(document).ajaxStop(function () {
        $(".loadingImg").hide();
    });
       
    </script>
}



