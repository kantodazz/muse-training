@model IFMIS.Areas.IFMISTZ.Models.CreatePmgTransferVM

<div id="divLoader">
</div>
<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

            <!-- PAGE HEADER -->
            <!--
            <i class="fa-fw fa fa-pencil-square-o"></i>
            Payments
            <span>
            >
            Bills
            </span>
            -->
            </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Dummy Payment </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form class="form-horizontal" name="dummyPaymentForm" id="dummyPaymentForm">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ReferenceNo)
                                @Html.HiddenFor(model => model.OperationalCurrency)
                                @Html.HiddenFor(model => model.ReceivingBankBIC)
                                @Html.HiddenFor(model => model.DrGlAccount)
                                @Html.HiddenFor(model => model.DrGlAccountDesc)
                                @Html.HiddenFor(model => model.SubBudgetClassDesc)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.BankStatementDetailId, "Reference No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.BankStatementDetailId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.BankStatementDetailId, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.OperationalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.OperationalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.OperationalAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivingBankName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ReceivingBankAccountNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankAccountNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankAccountNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivingBankAccountName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ReceivingBankAccountName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ReceivingBankAccountName, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SubBudgetClassCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.SubBudgetClassCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClassCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @if (User.IsInRole("Special Dummy Payment Entry"))
                                {
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            @Html.CheckBoxFor(model => model.IsSpecialDummyPayment)
                                            @Html.DisplayNameFor(model => model.IsSpecialDummyPayment)
                                        </div>
                                    </div>
                                }

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <a href="#" onclick="getGlItems()">
                                            GL Items (<span id="glItemsCount">0</span>)
                                        </a>
                                    </div>
                                </div>

                                <hr />

                                <div class="alert alert-info" role="alert">
                                    GL Item(s) <span class="badge" id="txtGlItems">0</span>, Total Amount <span class="badge" id="txtTotalAmount">0</span>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <button class="btn btn-info" type="button" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingDummyPayments", "DummyPayments" )" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!-- END MAIN CONTENT -->
<!-- Start of Aproval modal -->
<div class="modal fade" id="divModal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 80%">
        <div class="modal-content">
            <div class="modal-header alert alert-info" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblmodal">Add GL Item</h4>
            </div>
            <div class="modal-body" id="divModalBody"></div>
            <div class="modal-footer">
                <button class="btn btn-success role-save" id="btnAddGlItem" style="float: left" onclick="addGlItems()">Add</button>
                <button class="btn btn-default role-cancel" style="float: left" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section pagespecific {
    <script type="text/javascript">
        let dummyPaymentDetails = [];
        $(function () {

            $("#BankStatementDetailId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: "Select Reference No",
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedReferenceNo", "InstitutionAccounts")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetReferenceNos", "InstitutionAccounts")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term,
                            transactionType: "DR"
                        };
                    },
                    results: function (data, page) {
                        return { results: data.refs }; // data.CountryList returning json data from Controlle
                    }
                },
            });

            $('#ExpensedAmount').autoNumeric('init');

            $("#SubBudgetClassCode").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Search Sub Budget Class',
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedSubBudgetClass", "SubBudgetClasses")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetSubBudgetClassesByAccount", "SubBudgetClasses")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term,
                            accountNo: $("#ReceivingBankAccountNo").val()
                        };
                    },
                    results: function (data, page) {
                        return { results: data.subBudgetClasses }; // data.CountryList returning json data from Controlle
                    }
                }
            });

            $("#FundingSourceCode").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Search Funding Source',
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedFundingSource", "FundingSources")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetFundingSources", "FundingSources")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.fundingSources }; // data.CountryList returning json data from Controlle
                    }
                }
            });

            $("#GlAccount").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Search Gl Account',
                allowClear: false,
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedCoa", "Coas")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: '@Url.Action("GetCoas", "Coas")', // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            subBudgetClass: $("#SubBudgetClassCode").val(),
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.coas }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });

        $('#BankStatementDetailId').on("change", function () {
            $("#divLoader").show();
            var bankStatementDetailId = $("#BankStatementDetailId").val();

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetReferenceNo", "InstitutionAccounts")',
                data: {
                    id: bankStatementDetailId,
                    transactionType: "DR",
                    checkForDuplicate: false
                },
                success: function (data, status, jqXHR) {
                    var applyDate = Date.now;
                    if (data.StatementDate !== null) {
                        applyDate = ConvertJsonDate(data.StatementDate);
                    }
                    if (data.success) {
                        $("#ReferenceNo").val(data.ReferenceNo);
                        $("#OperationalAmount").val(data.OperationalAmount);
                        $("#OperationalCurrency").val(data.OperationalCurrency);
                        $("#ReceivingBankName").val(data.ReceivingBankName);
                        $("#ReceivingBankBIC").val(data.ReceivingBankBic);
                        $("#ReceivingBankAccountNo").val(data.ReceivingBankAccountNo);
                        $("#ReceivingBankAccountName").val(data.ReceivingBankAccountName);
                        $("#ApplyDate").val(applyDate);
                    } else {
                        swal('Error on accessing bank statement details');
                    }
                    $("#OperationalAmount").autoNumeric({ aNeg: "-" }).trigger("change");
                },
                error: function () {
                    swal("Error on accessing bank statements details");
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            })
        });

        $('#GlAccount').on("change", function (e) {
            $("#divLoader").show();
            var glAccountId = $("#GlAccount").val().replace("-", "|");
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCoa", "Coas")',
                data: { id: glAccountId },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#GlAccount").val(data.GlAccount);
                        $("#GlAccountDesc").val(data.GlAccountDesc);
                        $("#SubVote").val(data.SubVote);
                        $("#SubVoteDesc").val(data.SubVoteDesc);
                        $("#TR").val(data.TR);
                        $("#CostCentre").val(data.CostCentre);
                        $("#CostCentreDesc").val(data.CostCentreDesc);
                        $("#Facility").val(data.Facility);
                        $("#FacilityDesc").val(data.FacilityDesc);
                        $('#GfsCode').val(data.GfsCode);
                        $('#GfsCodeCategory').val(data.GfsCodeCategory);
                        $('#GeographicalLocationDesc').val(data.GeographicalLocationDesc);
                        $('#TrDesc').val(data.TrDesc);
                        $('#ProjectDesc').val(data.ProjectDesc);
                        $('#ServiceOutputDesc').val(data.ServiceOutputDesc);
                        $('#ActivityDesc').val(data.ActivityDesc);
                        $('#FundTypeDesc').val(data.FundTypeDesc);
                        $('#CofogDesc').val(data.CofogDesc);
                        $('#FundingSourceDesc').val(data.FundingSourceDesc);
                        $('#VoteDesc').val(data.VoteDesc);
                    } else {
                        swal(data.response);
                        $("#divLoader").hide();
                    }
                },
                error: function () {
                    swal("Error on accessing GL details");
                    $("#divLoader").hide();
                },
                complete: function () {
                    $("#divLoader").hide();
                }
            })
        });

        $('#SubBudgetClassCode').on("change", function (e) {
            var subBudgetClassCode = $("#SubBudgetClassCode").val();
            var accountNo = $("#ReceivingBankAccountNo").val();

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSubBudgetClass", "SubBudgetClasses")',
                data: { subBudgetClassCode: subBudgetClassCode, accountNo: accountNo },
                success: function (data, status, jqXHR) {
                    if (data.success) {
                        $("#DrGlAccount").val(data.DrGlAccount);
                        $("#DrGlAccountDesc").val(data.DrGlAccountDesc);
                        $("#SubBudgetClassDesc").val(data.SubBudgetClassDesc);
                    } else {
                        swal(data.response);
                    }
                },
                error: function () {
                    swal("Error on accessing sub budget class items");
                    $("#SubBudgetClassCode").select2("val", "");
                },
                complete: function () {
                }
            })
        });

        var getGlItems = function () {
            $("#divLoader").show();
            var sbc = $("#SubBudgetClassCode").val();
            var totalAmount = $("#OperationalAmount").val();
            var applyDate = $("#ApplyDate").val();
            var isSpecialDummyPayment = $("#IsSpecialDummyPayment").prop("checked"); // Boolean true
            var url = '@Url.Action("GetGlItems", "DummyPayments")';

            $("#divModalBody").load(url, { sbc: sbc, totalAmount: totalAmount, applyDate: applyDate, dummyPaymentDetails: dummyPaymentDetails, isSpecialDummyPayment: isSpecialDummyPayment }, function (responseText, statusText, jqXHR) {
                $("#tblDummyPaymentDetails").DataTable();
                $("#divModal").modal("show");
                $("#divLoader").hide();
            });
        }

        var addGlItems = function () {
            var i = 1;
            dummyPaymentDetails = [];
            let totalExpensedAmount = 0;
            var data = $('#tblDummyPaymentDetails').dataTable().fnGetNodes();
            $(data).each(function () {
                fundingRefNo = $(this).find('input[name="FundingRefNo' + i + '"]').val();
                glAccount = $(this).find('input[name="GlAccount' + i + '"]').val();
                glAccountDesc = $(this).find('input[name="GlAccountDesc' + i + '"]').val();
                gfsCode = $(this).find('input[name="GfsCode' + i + '"]').val();
                gfsCodeCategory = $(this).find('input[name="GfsCodeCategory' + i + '"]').val();
                voteDesc = $(this).find('input[name="VoteDesc' + i + '"]').val();
                geographicalLocationDesc = $(this).find('input[name="GeographicalLocationDesc' + i + '"]').val();
                trDesc = $(this).find('input[name="TrDesc' + i + '"]').val();
                subBudgetClassDesc = $(this).find('input[name="SubBudgetClassDesc' + i + '"]').val();
                projectDesc = $(this).find('input[name="ProjectDesc' + i + '"]').val();
                serviceOutputDesc = $(this).find('input[name="ServiceOutputDesc' + i + '"]').val();
                activityDesc = $(this).find('input[name="ActivityDesc' + i + '"]').val();
                fundTypeDesc = $(this).find('input[name="FundTypeDesc' + i + '"]').val();
                cofogDesc = $(this).find('input[name="CofogDesc' + i + '"]').val();
                subVote = $(this).find('input[name="SubVote' + i + '"]').val();
                subVoteDesc = $(this).find('input[name="SubVoteDesc' + i + '"]').val();
                tr = $(this).find('input[name="TR' + i + '"]').val();
                costCentre = $(this).find('input[name="CostCentre' + i + '"]').val();
                costCentreDesc = $(this).find('input[name="CostCentreDesc' + i + '"]').val();
                fundBalance = $(this).find('input[name="FundBalance' + i + '"]').val();
                expensedAmount = $(this).find('input[name="ExpensedAmount' + i + '"]').val();
                facility = $(this).find('input[name="Facility' + i + '"]').val();
                facilityDesc = $(this).find('input[name="FacilityDesc' + i + '"]').val();

                dummyPaymentDetails.push({
                    FundingRefNo: fundingRefNo,
                    GlAccount: glAccount,
                    GlAccountDesc: glAccountDesc,
                    GfsCode: gfsCode,
                    GfsCodeCategory: gfsCodeCategory,
                    VoteDesc: voteDesc,
                    GeographicalLocationDesc: geographicalLocationDesc,
                    TrDesc: trDesc,
                    SubBudgetClassDesc: subBudgetClassDesc,
                    ProjectDesc: projectDesc,
                    ServiceOutputDesc: serviceOutputDesc,
                    ActivityDesc: activityDesc,
                    FundTypeDesc: fundTypeDesc,
                    CofogDesc: cofogDesc,
                    SubVote: subVote,
                    SubVoteDesc: subVoteDesc,
                    TR: tr,
                    CostCentre: costCentre,
                    CostCentreDesc: costCentreDesc,
                    Facility: facility,
                    FacilityDesc: facilityDesc,
                    FundBalance: fundBalance,
                    ExpensedAmount: expensedAmount == "" ? 0 : expensedAmount,
                });

                i++;
            })

            $.each(dummyPaymentDetails, function (key, value) {
                var expensedAmount = value.ExpensedAmount;
                if (isNaN(expensedAmount)) {
                    expensedAmount = expensedAmount.replace(/,/g, "")
                }

                if (expensedAmount == "" || expensedAmount == null) {
                    expensedAmount = "0";
                }

                totalExpensedAmount = parseFloat(totalExpensedAmount) + parseFloat(expensedAmount);
            });

            $("#glItemsCount").html(numeral(dummyPaymentDetails.filter(a => a.ExpensedAmount != "").filter(a => a.ExpensedAmount != "0.00").length).format("0,0"));
            $('#txtGlItems').html(numeral(dummyPaymentDetails.filter(a => a.ExpensedAmount != "").filter(a => a.ExpensedAmount != "0.00").length).format("0,0"));
            $('#txtTotalAmount').html(numeral(totalExpensedAmount).format("0, 0.00"));
            $("#divModal").modal("hide");
        }

        $("#btnSave").click(function () {
                $("#divLoader").show();
                $('#btnSave').prop("disabled", true);

            if (!$("#dummyPaymentForm").valid()) {
                    $("#divLoader").hide();
                    $('#btnSave').prop("disabled", false);
                    return false;
            }

            if (dummyPaymentDetails.length == 0) {
                swal({
                    text: "Please add atleast one GL item in order to save",
                    icon: "warning",
                    button: "OK",
                });

                $('#btnSave').prop("disabled", false);
                $("#divLoader").hide();
                return false;
            }

                var token = $("[name='__RequestVerificationToken']").val();
                var data = {
                    __RequestVerificationToken: token,
                    BankStatementDetailId: $('#BankStatementDetailId').val().trim(),
                    ReferenceNo: $('#ReferenceNo').val().trim(),
                    OperationalAmount: $('#OperationalAmount').val().trim(),
                    OperationalCurrency: $("#OperationalCurrency").val().trim(),
                    ReceivingBankName: $('#ReceivingBankName').val().trim(),
                    ReceivingBankAccountNo: $('#ReceivingBankAccountNo').val().trim(),
                    ReceivingBankAccountName: $('#ReceivingBankAccountName').val().trim(),
                    ApplyDate: $('#ApplyDate').val(),
                    Remarks: $('#Remarks').val().trim(),
                    SubBudgetClassCode: $('#SubBudgetClassCode').val().trim(),
                    SubBudgetClassDesc: $('#SubBudgetClassDesc').val().trim(),
                    DrGlAccount: $('#DrGlAccount').val(),
                    DrGlAccountDesc: $('#DrGlAccountDesc').val(),
                    IsSpecialDummyPayment: $('#IsSpecialDummyPayment').prop("checked"), // Boolean true
                    DummyPaymentDetails: dummyPaymentDetails
                }

                var url = '@Url.Action("CreatePmgTransfer", "DummyPayments")';
                $.ajax({
                    url: url,
                    type: "POST",
                    //data: JSON.stringify(data),
                    data: data,
                    dataType: "JSON",
                    //contentType: "application/json",
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                    success: function (response) {
                        //check is successfully save to database
                        if (response == "Success") {
                            //will send status from server side
                            swal({
                                text: "Dummy payment successfully saved.",
                                icon: "success",
                                button: "OK",
                            }).then(function () {
                                window.location = '@Url.Action("PendingDummyPayments", "DummyPayments")';
                            });
                            //clear form
                            dummyPaymentDetails = [];
                        } else if (response == "Error") {
                            swal("An error occured while processing your request, contact system support");
                        }
                        else {
                            swal(response);
                        }
                    },
                    error: function () {
                        swal("An error occured while processing your request, contact system support");
                    },
                    complete: function () {
                        $("#divLoader").hide();
                        $('#btnSave').prop("disabled", false);
                    }
                });
            });

        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }
    </script>
}
