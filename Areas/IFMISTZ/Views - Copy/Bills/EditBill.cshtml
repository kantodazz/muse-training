@model IFMIS.Areas.IFMISTZ.Models.EditBillVM
@{

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
                <h1 class="page-title txt-color-blueDark">

                    <!-- PAGE HEADER -->
                    <!--
                    <i class="fa-fw fa fa-pencil-square-o"></i>
                    Payments
                    <span>
                        >
                        Bills
                    </span>
                        -->
                </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Edit Bill </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">

                            <form action="@Url.Action("EditBill","Bills")" method="post" name="form" class="form-horizontal" novalidate autocomplete="off">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.BillId)
                                @Html.HiddenFor(model => model.CustomerName)
                                @Html.HiddenFor(model => model.BillPayOptionDesc)
                                @Html.HiddenFor(model => model.OperationalAmount)

                                <!-- Start of select 2 customer -->
                                <div class="form-group">
                                    <section>
                                        <label class="col-md-2 control-label">Customer</label>
                                        <div class="col col-md-8">
                                            @Html.TextBoxFor(model => model.CustomerId, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                </div>
                                <!-- End of select 2 customer -->
                                <div class="form-group">
                                    <section>
                                        <label class="col-md-2 control-label">Id No</label>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" name="IdNo" id="IdNo" value="@Model.IdNo" placeholder="Id No" readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.IdNo, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="col-md-2 control-label">Id Type</label>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control" name="IdType" id="IdType" value="@Model.IdType" placeholder="Id Type" readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.IdType, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                </div>
                                <div class="form-group">
                                    <section>
                                        <label class="col-md-2 control-label">Phone No</label>
                                        <div class="col-md-3">
                                            <input class="form-control" type="text" name="PhoneNo" id="PhoneNo" value="@Model.PhoneNo" placeholder="Phone Number" required readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                    <section>
                                        <label class="col-md-2 control-label">Email Address</label>
                                        <div class="col-md-3">
                                            <input id="EmailAddress" name="EmailAddress" value="@Model.EmailAddress" class="form-control" placeholder="Email Address" type="email" readonly="readonly">
                                            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                        </div>
                                    </section>
                                </div>
                                <div class="form-group">
                                    <label class="col-md-2 control-label">Currency</label>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.OperationalCurrency, Model.OperationalCurrencies, "Select Currency", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.OperationalCurrency, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="col-md-2 control-label">Pay Option</label>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.BillPayOption, Model.BillPayOptions, "Select Bill Pay Option", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.BillPayOption, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplyDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="col-md-2 control-label">Valid Days</label>
                                    <div class="col-md-1">
                                        <input class="form-control" type="number" name="BillValidDays" id="BillValidDays" placeholder="Bill Valid days" required value="30">
                                        @Html.ValidationMessageFor(model => model.BillValidDays, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="col-md-2 control-label">Description</label>
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        (Max words 250, remaining words <span id="txtRemainigWords">250</span>)
                                    </div>
                                </div>

                                <div class="row" style="padding-left: 10px; padding-right: 10px">
                                    <div class="col-md-12">
                                        <div class="alert alert-info" role="alert">
                                            Bill Item(s) <span class="badge" id="txtBillItems">
                                                @if (Model.BillDetails.Any())
                                                {
                                                <span>@Model.BillDetails.Count()</span>
                                                }
                                                else
                                                {
                                                <span>0</span>
                                                }
                                            </span>,
                                            Total Amount <span class="badge" id="txtTotalTotalAmount">
                                                @Html.DisplayFor(model => model.OperationalAmount, "_DecimalThousands")
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="row" style="padding-left: 10px; padding-right: 10px">
                                    <div class="col-md-12">
                                        <table class="table table-hover table-condensed table-stripped table-bordered">
                                            <thead>
                                                <tr>
                                                    <th colspan="9">
                                                        Bill Items | <a href="#" id="btnAddBillItem" class="btn btn-success btn-sm">
                                                            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                                                            Add New Bill Item
                                                        </a>
                                                    </th>
                                                </tr>
                                                <tr>
                                                    <th>#</th>
                                                    <th>Revenue Source</th>
                                                    <th>Sub Revenue Source</th>
                                                    <th>Unit Cost</th>
                                                    <th>Quantity</th>
                                                    <th>Net Amount</th>
                                                    <th>VAT Amount</th>
                                                    <th>Total Amount</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>

                                            @{
                                                int i = 0;
                                            }
                                            <tbody>
                                                @foreach (var item in Model.BillDetails)
                                                {
                                                    i++;
                                                <tr>
                                                    <td>@i</td>
                                                    <td>@item.CostName</td>
                                                    <td>@item.SubCostName</td>
                                                    <td>@string.Format("{0:N2}", item.UnitCost)</td>
                                                    <td>@string.Format("{0:N2}", item.Quantity)</td>
                                                    <td>@string.Format("{0:N2}", item.NetAmount)</td>
                                                    <td>@string.Format("{0:N2}", item.VatAmount)</td>
                                                    <td>@string.Format("{0:N2}", item.OperationalAmount)</td>
                                                    <td>
                                                        <a href="#">
                                                            <span class="glyphicon glyphicon-pencil"></span>
                                                        </a> |
                                                        <a href="#">
                                                            <span class="glyphicon glyphicon-trash"></span>
                                                        </a>
                                                    </td>
                                                </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-8">
                                            <button class="btn btn-info" type="submit" style="float: left" id="btnSave">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action("PendingBills","Billings")" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->
                    <!-- end widget -->
            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->
    </section>
    <!-- end widget grid -->
</div>
<!-- END MAIN CONTENT -->
<!--Start of delete confirmation modal section-->
<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="lblmodal">
    <div class="modal-dialog" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header alert alert-danger" style="font:bold 16px Trebuchet MS, Lucida Sans Unicode, Lucida Grande, Lucida Sans, Arial, sans-serif">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

                <h4 class="modal-title" id="lblmodal">Confirm Cancel</h4>
            </div>
            <div class="modal-body" id="modal-body">
                <p class="success-message">Are you sure you want to cancel this record ? </p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-success delete-confirm">Yes</button>
                <button class="btn btn-default delete-cancel" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>
<!--End of delete confirmation modal section-->

@section pagespecific {
    <script type="text/javascript">
        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        $(function () {
            var url = '@Url.Action("GetCustomers", "Bills")';

            $("#CustomerId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                placeholder: 'Select Customer',
                initSelection: function (element, callback) {
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax('@Url.Action("GetSelectedCustomer", "Bills")', {
                            data: { id: id },
                            dataType: "json"
                        }).done(function (data) {
                            callback(data);
                        });
                    }
                },
                ajax: {
                    url: url, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "POST",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.customers }; // data.CountryList returning json data from Controlle
                    }
                }
            });

            var maxCharacters = 250;
            var inputCharacters = $("#Remarks").val().length;
            var remainingCharacters = maxCharacters - inputCharacters;
            $("#txtRemainigWords").html(remainingCharacters);

            if (remainingCharacters <= 0 && e.keyCode != 8) {
                $("#Remarks").addClass("input-has-exceeded");
                $("#Remarks").prop("readonly", true);
            } else {
                $("#Remarks").removeClass("input-has-exceeded");
                $("#Remarks").prop("readonly", false);
            }
        });

        $('#CustomerId').on("change", function () {
            var customerId = $("#CustomerId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCustomer")',
                data: { id: customerId },
                success: function (data, status, jqXHR) {
                    $("#CustomerName").val(data.CustomerName);
                    $("#IdTypeId").val(data.IdTypeId);
                    $("#IdType").val(data.IdType);
                    $("#IdNo").val(data.IdNo);
                    $("#PhoneNo").val(data.PhoneNo);
                    $("#EmailAddress").val(data.EmailAddress);
                },
                error: function () {
                    swal({
                        text: "Error on accessing customer details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $("#BillPayOption").on("change", function () {
            $("#BillPayOptionDesc").val($("#BillPayOption option:selected").text());
        });

        $("#Remarks").keyup(function (e) {
            var maxCharacters = 250;
            var inputCharacters = $(this).val().length;
            var remainingCharacters = maxCharacters - inputCharacters;
            $("#txtRemainigWords").html(remainingCharacters);

            if (remainingCharacters <= 0 && e.keyCode != 8) {
                $("#Remarks").addClass("input-has-exceeded");
                $("#Remarks").prop("readonly", true);
            } else {
                $("#Remarks").removeClass("input-has-exceeded");
                $("#Remarks").prop("readonly", false);
            }
        });

        $("#btnAddBillItem").on("click", function () {

        });

        $('#CostingId').on("change", function () {
            var costingId = $("#CostingId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCosting")',
                data: { id: costingId },
                success: function (data, status, jqXHR) {
                    $("#CostCode").val(data.CostCode);
                    $("#CostName").val(data.CostName);
                    $("#CostDesc").val(data.CostDesc);
                    $("#UOM").val(data.UOM);
                    $("#BillValidDays").val(data.BillValidDays);
                    $("#IsMainSource").val(data.IsMainSource);
                    $("#GLAccountReceivable").val(data.GLAccountReceivable);
                    $("#GLAccountRevenue").val(data.GLAccountRevenue);
                    $("#BillPayOption").val(data.BillPayOption);
                    $("#IsPreRevenue").val(data.IsPreRevenue);
                    $("#SubCostingId option").remove();
                    $("#SubCostingId").append('<option value="">Select Sub Revenue Source</option>');
                    $.each(data.SubCostings, function (i, subCosting) {
                        $("#SubCostingId").append('<option value="'
                                                   + subCosting.SubCostingId + '">'
                                             + subCosting.SubCostDesc + '</option>');
                    });
                    $("#SubCostDesc").val("");
                    var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
                    var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
                    var hasVat = $("#HasVat").is(':checked');
                    var netAmount = GetNetAmount(num1, num2);
                    var vatAmount = GetVatAmount(num1, num2, hasVat);
                    var operationAmount = GetTotalAmount(num1, num2, hasVat);
                    $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
                    $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
                    $("#OperationalAmount").autoNumeric('set', operationAmount);
                },
                error: function () {
                    swal({
                        text: "Error on accessing costing details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $('#SubCostingId').on("change", function () {
            var subCostingId = $("#SubCostingId").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSubCosting")',
                data: { id: subCostingId },
                success: function (data, status, jqXHR) {
                    $("#SubCostName").val(data.SubCostName);
                    $("#SubCostDesc").val(data.SubCostDesc);
                    $("#UnitCost").autoNumeric('set', data.UnitCost);
                    var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
                    var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
                    var hasVat = $("#HasVat").is(':checked');
                    var netAmount = GetNetAmount(num1, num2);
                    var vatAmount = GetVatAmount(num1, num2, hasVat);
                    var operationAmount = GetTotalAmount(num1, num2, hasVat);
                    $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
                    $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
                    $("#OperationalAmount").autoNumeric('set', operationAmount);
                },
                error: function () {
                    swal({
                        text: "Error on accessing sub costing details",
                        icon: "error",
                        button: "OK",
                    })
                }
            })
        });

        $("#UnitCost").keyup(function () {
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var operationAmount = GetTotalAmount(num1, num2, hasVat);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $("#OperationalAmount").autoNumeric('set', operationAmount);
            if (operationAmount == 0) {
                $("#btnSave").prop("disabled", true);
            } else {
                $("#btnSave").prop("disabled", false);
            }
        });

        $("#Quantity").keyup(function () {
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));;
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var operationAmount = GetTotalAmount(num1, num2, hasVat);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $("#OperationalAmount").autoNumeric('set', operationAmount);
            if (operationAmount == 0) {
                $("#btnSave").prop("disabled", true);
            } else {
                $("#btnSave").prop("disabled", false);
            }
        });

        $('#HasVat').click(function () {
            debugger
            $("#divVat").toggle(this.checked);
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetVatDetails")',
                async: false,
                success: function (data, status, jqXHR) {
                    debugger
                    var vatPercentage = 0;
                    var glAccountVat = "";
                    vatPercentage = data.VatPercentage;
                    glAccountVat = data.GlAccountVat;
                    $("#VatPercentage").val(vatPercentage);
                    $("#GlAccountVat").val(glAccountVat);
                    $('#txtVatPercentage').html(numeral(vatPercentage).format("0,0.00"));
                },
                error: function () {
                    swal({
                        text: "Error on accessing VAT details",
                        icon: "error",
                        button: "OK",
                    })
                },
                complete: function () {

                }
            });
            var num1 = parseFloat($("#UnitCost").val().replace(/,/g, ""));
            var num2 = parseFloat($("#Quantity").val().replace(/,/g, ""));;
            var hasVat = $("#HasVat").is(':checked');
            var netAmount = GetNetAmount(num1, num2);
            var vatAmount = GetVatAmount(num1, num2, hasVat);
            var operationAmount = GetTotalAmount(num1, num2, hasVat);
            $('#txtNetAmount').html(numeral(netAmount).format("0,0.00"));
            $('#txtVatAmount').html(numeral(vatAmount).format("0,0.00"));
            $("#OperationalAmount").autoNumeric('set', operationAmount);
            if (operationAmount == 0) {
                $("#btnSave").prop("disabled", true);
            } else {
                $("#btnSave").prop("disabled", false);
            }
            if (hasVat && $("#VatPercentage").val() == 0) {
                $("#divHasVat").show();
                $("#btnSave").prop("disabled", true);
            } else {
                $("#divHasVat").hide();
                $("#btnSave").prop("disabled", false);
            }
            if (hasVat && ($("#GlAccountVat").val() == "" || $("#GlAccountVat").val() == null)) {
                $("#divGlAccountVat").show();
                $("#btnSave").prop("disabled", true);
            } else {
                $("#divGlAccountVat").hide();
                $("#btnSave").prop("disabled", false);
            }
        });

        function GetNetAmount(num1, num2) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            return num1 * num2;
        }

        function GetVatAmount(num1, num2, hasVat) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            if (hasVat) {
                var vatPercentage = $("#VatPercentage").val();
                return (num1 * num2) * (vatPercentage / 100);
            }

            return 0;
        }

        function GetTotalAmount(num1, num2, hasVat) {
            if (isNaN(num1)) {
                num1 = 0;
            }
            if (isNaN(num2)) {
                num2 = 0;
            }

            if (hasVat) {
                var vatPercentage = $("#VatPercentage").val();
                return (num1 * num2) + ((num1 * num2) * (vatPercentage / 100));
            }

            return num1 * num2;
        }

    </script>
}