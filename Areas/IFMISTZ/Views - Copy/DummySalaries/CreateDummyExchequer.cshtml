@model IFMIS.Areas.IFMISTZ.Models.CreateDummyExchequerVM

<style>
    .search-btn {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 5px;
        padding-right: 10px;
    }

    .search-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        padding-left: 10px;
    }

    .name-input-container {
        display: inline-flex;
        flex: 1 1 300px;
        position: relative;
        overflow: hidden;
    }

    .search-icon {
        padding: 0.5rem;
    }

    .search-button {
        background: #538AC5;
        border: 0;
        color: white;
        padding: 8px;
        border-radius: 0;
    }

    input[type=number] {
        padding: 8px;
        border: 1px solid #ccc;
        width: 205px;
    }

    input[type=text] {
        padding: 8px;
        border: 1px solid #ccc;
    }

    input[type=search] {
        padding: 4px;
        border: hidden;
        border-radius: 4px;
    }

    textarea {
        border: 1px solid #ccc;
    }

    select {
        padding: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        width: 230px;
    }

    .action-btn {
        width: 100px;
        color: white;
    }

    .form-label {
        text-align: right;
    }

    td {
        padding: 5px;
    }

    .info-box {
        padding: 10px;
        background-color: #ECF3F8;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .row-align {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-between;
    }
</style>
<!-- MAIN CONTENT -->
<div id="content" style="margin: 5px; padding-top: 30px">

    <div class="row">
        @*<div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

            <!-- PAGE HEADER -->
            <!--
            <i class="fa-fw fa fa-pencil-square-o"></i>
            Payments
            <span>
            >
            Bills
            </span>
            -->
            </h1>
            </div>*@

        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
            <!-- Button trigger modal -->
            <!--<a data-toggle="modal" href="#myModal" class="btn btn-success btn-lg pull-right header-btn hidden-mobile"><i class="fa fa-circle-arrow-up fa-lg"></i> Launch form modal</a>-->
        </div>
    </div>

    <!--
    <div class="alert alert-block alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <h4 class="alert-heading"><i class="fa fa-check-square-o"></i> Check validation!</h4>
        <p>
            You may also check the form validation by clicking on the form action button. Please try and see the results below!
        </p>
    </div>
        -->
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false">
                    <!-- widget options:
                        usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                        data-widget-colorbutton="false"
                        data-widget-editbutton="false"
                        data-widget-togglebutton="false"
                        data-widget-deletebutton="false"
                        data-widget-fullscreenbutton="false"
                        data-widget-custombutton="false"
                        data-widget-collapsed="true"
                        data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2> Create Dummy Exchequer</h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body">
                            <form class="form-horizontal" name="dummyPaymentForm" id="dummyPaymentForm" method="POST">
                                @*@Html.AntiForgeryToken()*@
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.Hidden("InstitutionCode")
                                @*@Html.Hidden("InstitutionName")*@
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InstitutionName, "Institution Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.InstitutionName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.InstitutionName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceNo, "Reference No", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @*<div class="form-group">
                                        @Html.LabelFor(model => model.InstitutionAccount, "Institution Account", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3" id="divInstitutionAccount">
                                            @Html.DropDownListFor(model => model.InstitutionAccount, new SelectList(""), "---select---", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.InstitutionAccount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SubBudgetClass, "Sub Budget Class", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3" id="divInstitutionAccount">
                                        @Html.DropDownListFor(model => model.SubBudgetClass, new SelectList(""), "---select---", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.SubBudgetClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ExchequerType, "Exchequer Type", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownList("ExchequerType",
                                        new SelectList(new List<SelectListItem>
                                            {
                                            new SelectListItem { Text = "Retention", Value = "Retention"},
                                            new SelectListItem { Text = "Direct Fund", Value = "Direct Fund"},
                                            }, "Value", "Text"),
                                            "--Select Category--", new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NetAmount, "Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ApplyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplyDate, "", new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplyDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-8 col-md-offset-2">
                                            <button class="btn btn-info" type="submit" style="float: left" id="form_submision">
                                                <i class="fa fa-save"></i>
                                                Save
                                            </button>
                                            <a href="@Url.Action(" DummyExchequerList", "DummySalaries" )" class="btn btn-info" style="float: left; margin-left: 5px">
                                                <i class="fa fa-arrow-left"></i>
                                                Back
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- END COL -->

        </div>

        <!-- END ROW -->

    </section>
    <!-- end widget grid -->

</div>
<!----------- Search GL Items ----------------->
<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">
        $(function () {
            $('#NetAmount').autoNumeric('init');
        });

        function ConvertJsonDate(inputDate) {
            var dx = new Date(parseInt(inputDate.substr(6)));
            //alert(dx.toDateString());
            var dd = ("0" + dx.getDate()).slice(-2);
            var mm = ("0" + (dx.getMonth() + 1)).slice(-2);
            var yy = dx.getFullYear();
            var HH = ("0" + dx.getHours()).slice(-2);
            var m = ("0" + dx.getMinutes()).slice(-2);
            var ss = ("0" + dx.getSeconds()).slice(-2);
            return yy + "-" + mm + "-" + dd;
            //return dx.toDateString() + "  " + HH + ":" + m + ":" + ss;
        }

        //$(function () {
        //    $('#ApplyDate').val(new Date().toDateInputValue());
        //});

        $("#InstitutionCode").toggle(true)

        $("#Description").on("keyup", function (e) {
            $("#maxchars_c").text(250 - this.value.length)

            if (this.value.length > 250) {
                swal("Maximum Characters reached!");
            }
        });
        $("#InstitutionName").select2({
            minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
            width: 'resolve',   // to adjust proper width of select2 wrapped elements
            placeholder: "--Select--",
            allowClear: false,
            initSelection: function (element, callback) {
                var id = $(element).val();
                if (id !== "") {
                    $.ajax('@Url.Action("GetInstitutionName", "DummySalaries")', {
                        data: { id: id },
                        dataType: "json"
                    }).done(function (data) {
                        callback(data);
                    });
                }
            },
            ajax: {
                url: '@Url.Action("SearchInstitution", "DummySalaries")', // Controller - Select2Demo and Action -AccessRemoteData
                type: "GET",
                dataType: 'json',
                data: function (term) {
                    return {
                        term: term
                    };
                },
                results: function (data, page) {
                    return { results: data.refs };
                }
            },
        });

         @*$(function () {
            var url = '@Url.Action("SearchInstitution", "DummySalaries")';

             $("#InstitutionId").select2({
                minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
                width: 'resolve',   // to adjust proper width of select2 wrapped elements
                ajax: {
                    url: url, // Controller - Select2Demo and Action -AccessRemoteData
                    type: "GET",
                    dataType: 'json',
                    data: function (term) {
                        return {
                            term: term
                        };
                    },
                    results: function (data, page) {
                        return { results: data.refs }; // data.CountryList returning json data from Controlle
                    }
                }
            });
        });*@
        @*$("#InstitutionName").change(function () {
            var id = $(this).val();
            $.ajax({
                type: "get",
                url: '@Url.Action("GetInstitutionDetails", "DummySalaries")',
                data: { instCode: id.split("-")[0].trim() },
                success: function (response) {
                    console.log(response)
                    $("#InstitutionCode").val(response.InstitutionCode);
                    $("#InstitutionName").val(response.InstitutionName);
                    //$("#InstitutionAccount").html('');
                    $.each(response.Accounts, function (i, account) {
                        console.log(account.AccountNumber)
                        $("#InstitutionAccount").append('<option value="'
                            + account.AccountNumber + '">'
                            + account.AccountnumberAccountName + '</option');
                    })
                },
                error: function (response) {
                    swal({
                        text: "An error occured while processing your request, please contact system support",
                        icon: "error",
                        button: "OK",
                    })
                    return false;
                }
            });
        });*@

       $("#InstitutionName").change(function () {
            var id = $(this).val();
            $.ajax({
                type: "get",
                url: '@Url.Action("GetSubBudgetClass", "DummySalaries")',
                data: { instCode: id.split("-")[0].trim() },
                success: function (response) {
                    console.log(response)
                    $("#InstitutionCode").val(response.InstitutionCode);
                    $("#InstitutionName").val(response.InstitutionName);
                    $.each(response.Accounts, function (i, account) {

                        $("#SubBudgetClass").append('<option value="'
                            + account.SubBudgetClass + '">'
                            + account.SubBudgetClassSubBudgetClassDesc + '</option');
                    })
                },
                error: function (response) {
                    swal({
                        text: "An error occured while processing your request, please contact system support",
                        icon: "error",
                        button: "OK",
                    })
                    return false;
                }
            });
        });


    </script>
}


